#include "Threefish512.h"

void Threefish512::Clear()
{
	if (_expandedKey.size() > 0)
		fill(_expandedKey.begin(), _expandedKey.end(), 0);
	if (_expandedTweak.size() > 0)
		fill(_expandedTweak.begin(), _expandedTweak.end(), 0);
}

void Threefish512::Encrypt(const std::vector<ulong> Input, std::vector<ulong> &Output)
{
	// cache the block, key, and tweak
	ulong B0 = Input[0];
	ulong B1 = Input[1];
	ulong B2 = Input[2];
	ulong B3 = Input[3];
	ulong B4 = Input[4];
	ulong B5 = Input[5];
	ulong B6 = Input[6];
	ulong B7 = Input[7];
	ulong K0 = _expandedKey[0];
	ulong K1 = _expandedKey[1];
	ulong K2 = _expandedKey[2];
	ulong K3 = _expandedKey[3];
	ulong K4 = _expandedKey[4];
	ulong K5 = _expandedKey[5];
	ulong K6 = _expandedKey[6];
	ulong K7 = _expandedKey[7];
	ulong K8 = _expandedKey[8];
	ulong T0 = _expandedTweak[0];
	ulong T1 = _expandedTweak[1];
	ulong T2 = _expandedTweak[2];

	Mix(B0, B1, 46, K0, K1);
	Mix(B2, B3, 36, K2, K3);
	Mix(B4, B5, 19, K4, K5 + T0);
	Mix(B6, B7, 37, K6 + T1, K7);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K1, K2);
	Mix(B2, B3, 30, K3, K4);
	Mix(B4, B5, 34, K5, K6 + T1);
	Mix(B6, B7, 24, K7 + T2, K8 + 1);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K2, K3);
	Mix(B2, B3, 36, K4, K5);
	Mix(B4, B5, 19, K6, K7 + T2);
	Mix(B6, B7, 37, K8 + T0, K0 + 2);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K3, K4);
	Mix(B2, B3, 30, K5, K6);
	Mix(B4, B5, 34, K7, K8 + T0);
	Mix(B6, B7, 24, K0 + T1, K1 + 3);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K4, K5);
	Mix(B2, B3, 36, K6, K7);
	Mix(B4, B5, 19, K8, K0 + T1);
	Mix(B6, B7, 37, K1 + T2, K2 + 4);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K5, K6);
	Mix(B2, B3, 30, K7, K8);
	Mix(B4, B5, 34, K0, K1 + T2);
	Mix(B6, B7, 24, K2 + T0, K3 + 5);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K6, K7);
	Mix(B2, B3, 36, K8, K0);
	Mix(B4, B5, 19, K1, K2 + T0);
	Mix(B6, B7, 37, K3 + T1, K4 + 6);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K7, K8);
	Mix(B2, B3, 30, K0, K1);
	Mix(B4, B5, 34, K2, K3 + T1);
	Mix(B6, B7, 24, K4 + T2, K5 + 7);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K8, K0);
	Mix(B2, B3, 36, K1, K2);
	Mix(B4, B5, 19, K3, K4 + T2);
	Mix(B6, B7, 37, K5 + T0, K6 + 8);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K0, K1);
	Mix(B2, B3, 30, K2, K3);
	Mix(B4, B5, 34, K4, K5 + T0);
	Mix(B6, B7, 24, K6 + T1, K7 + 9);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K1, K2);
	Mix(B2, B3, 36, K3, K4);
	Mix(B4, B5, 19, K5, K6 + T1);
	Mix(B6, B7, 37, K7 + T2, K8 + 10);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K2, K3);
	Mix(B2, B3, 30, K4, K5);
	Mix(B4, B5, 34, K6, K7 + T2);
	Mix(B6, B7, 24, K8 + T0, K0 + 11);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K3, K4);
	Mix(B2, B3, 36, K5, K6);
	Mix(B4, B5, 19, K7, K8 + T0);
	Mix(B6, B7, 37, K0 + T1, K1 + 12);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K4, K5);
	Mix(B2, B3, 30, K6, K7);
	Mix(B4, B5, 34, K8, K0 + T1);
	Mix(B6, B7, 24, K1 + T2, K2 + 13);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K5, K6);
	Mix(B2, B3, 36, K7, K8);
	Mix(B4, B5, 19, K0, K1 + T2);
	Mix(B6, B7, 37, K2 + T0, K3 + 14);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K6, K7);
	Mix(B2, B3, 30, K8, K0);
	Mix(B4, B5, 34, K1, K2 + T0);
	Mix(B6, B7, 24, K3 + T1, K4 + 15);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);
	Mix(B0, B1, 46, K7, K8);
	Mix(B2, B3, 36, K0, K1);
	Mix(B4, B5, 19, K2, K3 + T1);
	Mix(B6, B7, 37, K4 + T2, K5 + 16);
	Mix(B2, B1, 33);
	Mix(B4, B7, 27);
	Mix(B6, B5, 14);
	Mix(B0, B3, 42);
	Mix(B4, B1, 17);
	Mix(B6, B3, 49);
	Mix(B0, B5, 36);
	Mix(B2, B7, 39);
	Mix(B6, B1, 44);
	Mix(B0, B7, 9);
	Mix(B2, B5, 54);
	Mix(B4, B3, 56);
	Mix(B0, B1, 39, K8, K0);
	Mix(B2, B3, 30, K1, K2);
	Mix(B4, B5, 34, K3, K4 + T2);
	Mix(B6, B7, 24, K5 + T0, K6 + 17);
	Mix(B2, B1, 13);
	Mix(B4, B7, 50);
	Mix(B6, B5, 10);
	Mix(B0, B3, 17);
	Mix(B4, B1, 25);
	Mix(B6, B3, 29);
	Mix(B0, B5, 39);
	Mix(B2, B7, 43);
	Mix(B6, B1, 8);
	Mix(B0, B7, 35);
	Mix(B2, B5, 56);
	Mix(B4, B3, 22);

	// final key schedule
	Output[0] = B0 + K0;
	Output[1] = B1 + K1;
	Output[2] = B2 + K2;
	Output[3] = B3 + K3;
	Output[4] = B4 + K4;
	Output[5] = B5 + K5 + T0;
	Output[6] = B6 + K6 + T1;
	Output[7] = B7 + K7 + 18;
}

void Threefish512::SetKey(const std::vector<ulong> Key)
{
	unsigned int i;
	ulong parity = KeyScheduleConst;

	for (i = 0; i < _expandedKey.size() - 1; i++)
	{
		_expandedKey[i] = Key[i];
		parity ^= Key[i];
	}

	_expandedKey[i] = parity;
}

void Threefish512::SetTweak(const std::vector<ulong> Tweak)
{
	_expandedTweak[0] = Tweak[0];
	_expandedTweak[1] = Tweak[1];
	_expandedTweak[2] = Tweak[0] ^ Tweak[1];
}