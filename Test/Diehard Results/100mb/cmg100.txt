       NOTE: Most of the tests in DIEHARD return a p-value, which               
       should be uniform on [0,1) if the input file contains truly              
       independent random bits.   Those p-values are obtained by                
       p=F(X), where F is the assumed distribution of the sample                
       random variable X---often normal. But that assumed F is just             
       an asymptotic approximation, for which the fit will be worst             
       in the tails. Thus you should not be surprised with                      
       occasional p-values near 0 or 1, such as .0012 or .9983.                 
       When a bit stream really FAILS BIG, you will get p's of 0 or             
       1 to six or more places.  By all means, do not, as a                     
       Statistician might, think that a p < .025 or p> .975 means               
       that the RNG has "failed the test at the .05 level".  Such               
       p's happen among the hundreds that DIEHARD produces, even                
       with good RNG's.  So keep in mind that " p happens".                     
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::            This is the BIRTHDAY SPACINGS TEST                 ::        
     :: Choose m birthdays in a year of n days.  List the spacings    ::        
     :: between the birthdays.  If j is the number of values that     ::        
     :: occur more than once in that list, then j is asymptotically   ::        
     :: Poisson distributed with mean m^3/(4n).  Experience shows n   ::        
     :: must be quite large, say n>=2^18, for comparing the results   ::        
     :: to the Poisson distribution with that mean.  This test uses   ::        
     :: n=2^24 and m=2^9,  so that the underlying distribution for j  ::        
     :: is taken to be Poisson with lambda=2^27/(2^26)=2.  A sample   ::        
     :: of 500 j's is taken, and a chi-square goodness of fit test    ::        
     :: provides a p value.  The first test uses bits 1-24 (counting  ::        
     :: from the left) from integers in the specified file.           ::        
     ::   Then the file is closed and reopened. NextUInt32, bits 2-25 are   ::        
     :: used to provide birthdays, then 3-26 and so on to bits 9-32.  ::        
     :: Each set of bits provides a p-value, and the nine p-values    ::        
     :: provide a sample for a KSTEST.                                ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 BIRTHDAY SPACINGS TEST, M= 512 N=2**24 LAMBDA=  2.0000
           Results for cmg_100mb.txt  
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  1 to 24   2.028
  duplicate       number       number 
  spacings       observed     expected
        0          61.       67.668
        1         133.      135.335
        2         140.      135.335
        3          94.       90.224
        4          55.       45.112
        5           7.       18.045
  6 to INF         10.        8.282
 Chisquare with  6 d.o.f. =    10.30 p-value=  .887436
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  2 to 25   2.110
  duplicate       number       number 
  spacings       observed     expected
        0          59.       67.668
        1         131.      135.335
        2         129.      135.335
        3         103.       90.224
        4          46.       45.112
        5          22.       18.045
  6 to INF         10.        8.282
 Chisquare with  6 d.o.f. =     4.60 p-value=  .403416
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  3 to 26   2.126
  duplicate       number       number 
  spacings       observed     expected
        0          53.       67.668
        1         130.      135.335
        2         139.      135.335
        3          97.       90.224
        4          52.       45.112
        5          22.       18.045
  6 to INF          7.        8.282
 Chisquare with  6 d.o.f. =     6.12 p-value=  .589573
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  4 to 27   2.072
  duplicate       number       number 
  spacings       observed     expected
        0          64.       67.668
        1         138.      135.335
        2         121.      135.335
        3          99.       90.224
        4          45.       45.112
        5          25.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =     5.31 p-value=  .495810
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  5 to 28   1.954
  duplicate       number       number 
  spacings       observed     expected
        0          62.       67.668
        1         146.      135.335
        2         150.      135.335
        3          73.       90.224
        4          45.       45.112
        5          16.       18.045
  6 to INF          8.        8.282
 Chisquare with  6 d.o.f. =     6.43 p-value=  .623597
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  6 to 29   2.026
  duplicate       number       number 
  spacings       observed     expected
        0          62.       67.668
        1         141.      135.335
        2         133.      135.335
        3          88.       90.224
        4          49.       45.112
        5          20.       18.045
  6 to INF          7.        8.282
 Chisquare with  6 d.o.f. =     1.55 p-value=  .044055
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  7 to 30   1.970
  duplicate       number       number 
  spacings       observed     expected
        0          67.       67.668
        1         148.      135.335
        2         137.      135.335
        3          70.       90.224
        4          44.       45.112
        5          27.       18.045
  6 to INF          7.        8.282
 Chisquare with  6 d.o.f. =    10.42 p-value=  .891789
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  8 to 31   1.976
  duplicate       number       number 
  spacings       observed     expected
        0          70.       67.668
        1         129.      135.335
        2         139.      135.335
        3          98.       90.224
        4          43.       45.112
        5          12.       18.045
  6 to INF          9.        8.282
 Chisquare with  6 d.o.f. =     3.33 p-value=  .233892
  :::::::::::::::::::::::::::::::::::::::::
                   For a sample of size 500:     mean   
           cmg_100mb.txt   using bits  9 to 32   1.916
  duplicate       number       number 
  spacings       observed     expected
        0          69.       67.668
        1         147.      135.335
        2         134.      135.335
        3          88.       90.224
        4          37.       45.112
        5          20.       18.045
  6 to INF          5.        8.282
 Chisquare with  6 d.o.f. =     4.07 p-value=  .332872
  :::::::::::::::::::::::::::::::::::::::::
   The 9 p-values were
        .887436   .403416   .589573   .495810   .623597
        .044055   .891789   .233892   .332872
  A KSTEST for the 9 p-values yields  .021718

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::            THE OVERLAPPING 5-PERMUTATION TEST                 ::        
     :: This is the OPERM5 test.  It looks at a sequence of one mill- ::        
     :: ion 32-bit random integers.  Each set of five consecutive     ::        
     :: integers can be in one of 120 states, for the 5! possible or- ::        
     :: derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   ::        
     :: each provide a state. As many thousands of state transitions  ::        
     :: are observed,  cumulative counts are made of the number of    ::        
     :: occurences of each state.  Then the quadratic form in the     ::        
     :: weak inverse of the 120x120 covariance matrix yields a test   ::        
     :: equivalent to the likelihood ratio test that the 120 cell     ::        
     :: counts came from the specified (asymptotically) normal dis-   ::        
     :: tribution with the specified 120x120 covariance matrix (with  ::        
     :: rank 99).  This version uses 1,000,000 integers, twice.       ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
           OPERM5 test for file cmg_100mb.txt  
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 72.517; p-value= .021027
           OPERM5 test for file cmg_100mb.txt  
     For a sample of 1,000,000 consecutive 5-tuples,
 chisquare for 99 degrees of freedom= 88.087; p-value= .224054
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the BINARY RANK TEST for 31x31 matrices. The leftmost ::        
     :: 31 bits of 31 random integers from the test sequence are used ::        
     :: to form a 31x31 binary matrix over the field {0,1}. The rank  ::        
     :: is determined. That rank can be from 0 to 31, but ranks< 28   ::        
     :: are rare, and their counts are pooled with those for rank 28. ::        
     :: Ranks are found for 40,000 such random matrices and a chisqua-::        
     :: re test is performed on counts for ranks 31,30,29 and <=28.   ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
    Binary rank test for cmg_100mb.txt  
         Rank test for 31x31 binary matrices:
        rows from leftmost 31 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        28       198     211.4   .851598     .852
        29      5187    5134.0   .546924    1.399
        30     23157   23103.0   .125998    1.525
        31     11458   11551.5   .757200    2.282
  chisquare= 2.282 for 3 d. of f.; p-value= .549422
--------------------------------------------------------------
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the BINARY RANK TEST for 32x32 matrices. A random 32x ::        
     :: 32 binary matrix is formed, each row a 32-bit random integer. ::        
     :: The rank is determined. That rank can be from 0 to 32, ranks  ::        
     :: less than 29 are rare, and their counts are pooled with those ::        
     :: for rank 29.  Ranks are found for 40,000 such random matrices ::        
     :: and a chisquare test is performed on counts for ranks  32,31, ::        
     :: 30 and <=29.                                                  ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
    Binary rank test for cmg_100mb.txt  
         Rank test for 32x32 binary matrices:
        rows from leftmost 32 bits of each 32-bit integer
      rank   observed  expected (o-e)^2/e  sum
        29       228     211.4  1.300562    1.301
        30      5144    5134.0   .019438    1.320
        31     23215   23103.0   .542504    1.863
        32     11413   11551.5  1.661167    3.524
  chisquare= 3.524 for 3 d. of f.; p-value= .712544
--------------------------------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the BINARY RANK TEST for 6x8 matrices.  From each of  ::        
     :: six random 32-bit integers from the generator under test, a   ::        
     :: specified byte is chosen, and the resulting six bytes form a  ::        
     :: 6x8 binary matrix whose rank is determined.  That rank can be ::        
     :: from 0 to 6, but ranks 0,1,2,3 are rare; their counts are     ::        
     :: pooled with those for rank 4. Ranks are found for 100,000     ::        
     :: random matrices, and a chi-square test is performed on        ::        
     :: counts for ranks 6,5 and <=4.                                 ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
         Binary Rank Test for cmg_100mb.txt  
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  1 to  8
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          931       944.3        .187        .187
          r =5        21815     21743.9        .232        .420
          r =6        77254     77311.8        .043        .463
                        p=1-exp(-SUM/2)= .20668
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  2 to  9
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          960       944.3        .261        .261
          r =5        21736     21743.9        .003        .264
          r =6        77304     77311.8        .001        .265
                        p=1-exp(-SUM/2)= .12394
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  3 to 10
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          946       944.3        .003        .003
          r =5        21577     21743.9       1.281       1.284
          r =6        77477     77311.8        .353       1.637
                        p=1-exp(-SUM/2)= .55893
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  4 to 11
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          938       944.3        .042        .042
          r =5        21561     21743.9       1.538       1.581
          r =6        77501     77311.8        .463       2.044
                        p=1-exp(-SUM/2)= .64004
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  5 to 12
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          976       944.3       1.064       1.064
          r =5        21601     21743.9        .939       2.003
          r =6        77423     77311.8        .160       2.163
                        p=1-exp(-SUM/2)= .66094
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  6 to 13
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          963       944.3        .370        .370
          r =5        21670     21743.9        .251        .621
          r =6        77367     77311.8        .039        .661
                        p=1-exp(-SUM/2)= .28138
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  7 to 14
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          988       944.3       2.022       2.022
          r =5        21675     21743.9        .218       2.241
          r =6        77337     77311.8        .008       2.249
                        p=1-exp(-SUM/2)= .67514
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  8 to 15
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          922       944.3        .527        .527
          r =5        21883     21743.9        .890       1.417
          r =6        77195     77311.8        .176       1.593
                        p=1-exp(-SUM/2)= .54910
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits  9 to 16
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          930       944.3        .217        .217
          r =5        21697     21743.9        .101        .318
          r =6        77373     77311.8        .048        .366
                        p=1-exp(-SUM/2)= .16731
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 10 to 17
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          940       944.3        .020        .020
          r =5        21746     21743.9        .000        .020
          r =6        77314     77311.8        .000        .020
                        p=1-exp(-SUM/2)= .00988
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 11 to 18
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          948       944.3        .014        .014
          r =5        21693     21743.9        .119        .134
          r =6        77359     77311.8        .029        .162
                        p=1-exp(-SUM/2)= .07801
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 12 to 19
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          970       944.3        .699        .699
          r =5        21619     21743.9        .717       1.417
          r =6        77411     77311.8        .127       1.544
                        p=1-exp(-SUM/2)= .53794
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 13 to 20
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          970       944.3        .699        .699
          r =5        21627     21743.9        .628       1.328
          r =6        77403     77311.8        .108       1.435
                        p=1-exp(-SUM/2)= .51214
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 14 to 21
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          964       944.3        .411        .411
          r =5        21838     21743.9        .407        .818
          r =6        77198     77311.8        .168        .986
                        p=1-exp(-SUM/2)= .38911
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 15 to 22
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          899       944.3       2.173       2.173
          r =5        21904     21743.9       1.179       3.352
          r =6        77197     77311.8        .170       3.523
                        p=1-exp(-SUM/2)= .82817
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 16 to 23
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          931       944.3        .187        .187
          r =5        21676     21743.9        .212        .399
          r =6        77393     77311.8        .085        .485
                        p=1-exp(-SUM/2)= .21521
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 17 to 24
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          896       944.3       2.471       2.471
          r =5        21960     21743.9       2.148       4.618
          r =6        77144     77311.8        .364       4.983
                        p=1-exp(-SUM/2)= .91719
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 18 to 25
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          923       944.3        .481        .481
          r =5        21852     21743.9        .537       1.018
          r =6        77225     77311.8        .097       1.115
                        p=1-exp(-SUM/2)= .42747
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 19 to 26
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          958       944.3        .199        .199
          r =5        21674     21743.9        .225        .423
          r =6        77368     77311.8        .041        .464
                        p=1-exp(-SUM/2)= .20716
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 20 to 27
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1015       944.3       5.293       5.293
          r =5        21767     21743.9        .025       5.318
          r =6        77218     77311.8        .114       5.431
                        p=1-exp(-SUM/2)= .93384
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 21 to 28
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4         1014       944.3       5.144       5.144
          r =5        21749     21743.9        .001       5.146
          r =6        77237     77311.8        .072       5.218
                        p=1-exp(-SUM/2)= .92639
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 22 to 29
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          979       944.3       1.275       1.275
          r =5        21645     21743.9        .450       1.725
          r =6        77376     77311.8        .053       1.778
                        p=1-exp(-SUM/2)= .58897
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 23 to 30
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          953       944.3        .080        .080
          r =5        21580     21743.9       1.235       1.316
          r =6        77467     77311.8        .312       1.627
                        p=1-exp(-SUM/2)= .55672
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 24 to 31
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          905       944.3       1.636       1.636
          r =5        21938     21743.9       1.733       3.368
          r =6        77157     77311.8        .310       3.678
                        p=1-exp(-SUM/2)= .84105
        Rank of a 6x8 binary matrix,
     rows formed from eight bits of the RNG cmg_100mb.txt  
     b-rank test for bits 25 to 32
                     OBSERVED   EXPECTED     (O-E)^2/E      SUM
          r<=4          934       944.3        .112        .112
          r =5        21787     21743.9        .085        .198
          r =6        77279     77311.8        .014        .212
                        p=1-exp(-SUM/2)= .10045
   TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
 These should be 25 uniform [0,1] random variables:
     .206683     .123942     .558933     .640039     .660938
     .281376     .675145     .549095     .167311     .009880
     .078014     .537935     .512136     .389111     .828174
     .215206     .917195     .427472     .207165     .933844
     .926393     .588967     .556721     .841049     .100452
   brank test summary for cmg_100mb.txt  
       The KS test for those 25 supposed UNI's yields
                    KS p-value= .092575

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::                   THE BITSTREAM TEST                          ::        
     :: The file under test is viewed as a stream of bits. Call them  ::        
     :: b1,b2,... .  Consider an alphabet with two "letters", 0 and 1 ::        
     :: and think of the stream of bits as a succession of 20-letter  ::        
     :: "words", overlapping.  Thus the first word is b1b2...b20, the ::        
     :: second is b2b3...b21, and so on.  The bitstream test counts   ::        
     :: the number of missing 20-letter (20-bit) words in a string of ::        
     :: 2^21 overlapping 20-letter words.  There are 2^20 possible 20 ::        
     :: letter words.  For a truly random string of 2^21+19 bits, the ::        
     :: number of missing words j should be (very close to) normally  ::        
     :: distributed with mean 141,909 and sigma 428.  Thus            ::        
     ::  (j-141909)/428 should be a standard normal variate (z score) ::        
     :: that leads to a uniform [0,1) p value.  The test is repeated  ::        
     :: twenty times.                                                 ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 THE OVERLAPPING 20-tuples BITSTREAM  TEST, 20 BITS PER WORD, N words
   This test uses N=2^21 and samples the bitstream 20 times.
  No. missing words should average  141909. with sigma=428.
---------------------------------------------------------
 tst no  1:  141992 missing words,     .19 sigmas from mean, p-value= .57658
 tst no  2:  141619 missing words,    -.68 sigmas from mean, p-value= .24878
 tst no  3:  141965 missing words,     .13 sigmas from mean, p-value= .55175
 tst no  4:  142166 missing words,     .60 sigmas from mean, p-value= .72565
 tst no  5:  141938 missing words,     .07 sigmas from mean, p-value= .52671
 tst no  6:  141203 missing words,   -1.65 sigmas from mean, p-value= .04944
 tst no  7:  142003 missing words,     .22 sigmas from mean, p-value= .58662
 tst no  8:  142207 missing words,     .70 sigmas from mean, p-value= .75663
 tst no  9:  141917 missing words,     .02 sigmas from mean, p-value= .50715
 tst no 10:  142599 missing words,    1.61 sigmas from mean, p-value= .94645
 tst no 11:  141624 missing words,    -.67 sigmas from mean, p-value= .25250
 tst no 12:  143021 missing words,    2.60 sigmas from mean, p-value= .99530
 tst no 13:  142031 missing words,     .28 sigmas from mean, p-value= .61190
 tst no 14:  142007 missing words,     .23 sigmas from mean, p-value= .59026
 tst no 15:  142339 missing words,    1.00 sigmas from mean, p-value= .84229
 tst no 16:  142154 missing words,     .57 sigmas from mean, p-value= .71622
 tst no 17:  141514 missing words,    -.92 sigmas from mean, p-value= .17783
 tst no 18:  142106 missing words,     .46 sigmas from mean, p-value= .67707
 tst no 19:  141911 missing words,     .00 sigmas from mean, p-value= .50156
 tst no 20:  142245 missing words,     .78 sigmas from mean, p-value= .78356

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::             The tests OPSO, OQSO and DNA                      ::        
     ::         OPSO means Overlapping-Pairs-Sparse-Occupancy         ::        
     :: The OPSO test considers 2-letter words from an alphabet of    ::        
     :: 1024 letters.  Each letter is determined by a specified ten   ::        
     :: bits from a 32-bit integer in the sequence to be tested. OPSO ::        
     :: generates  2^21 (overlapping) 2-letter words  (from 2^21+1    ::        
     :: "keystrokes")  and counts the number of missing words---that  ::        
     :: is 2-letter words which do not appear in the entire sequence. ::        
     :: That count should be very close to normally distributed with  ::        
     :: mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should ::        
     :: be a standard normal variable. The OPSO test takes 32 bits at ::        
     :: a time from the test file and uses a designated set of ten    ::        
     :: consecutive bits. It then restarts the file for the next de-  ::        
     :: signated 10 bits, and so on.                                  ::        
     ::                                                               ::        
     ::     OQSO means Overlapping-Quadruples-Sparse-Occupancy        ::        
     ::   The test OQSO is similar, except that it considers 4-letter ::        
     :: words from an alphabet of 32 letters, each letter determined  ::        
     :: by a designated string of 5 consecutive bits from the test    ::        
     :: file, elements of which are assumed 32-bit random integers.   ::        
     :: The mean number of missing words in a sequence of 2^21 four-  ::        
     :: letter words,  (2^21+3 "keystrokes"), is again 141909, with   ::        
     :: sigma = 295.  The mean is based on theory; sigma comes from   ::        
     :: extensive simulation.                                         ::        
     ::                                                               ::        
     ::    The DNA test considers an alphabet of 4 letters::  C,G,A,T,::        
     :: determined by two designated bits in the sequence of random   ::        
     :: integers being tested.  It considers 10-letter words, so that ::        
     :: as in OPSO and OQSO, there are 2^20 possible words, and the   ::        
     :: mean number of missing words from a string of 2^21  (over-    ::        
     :: lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.   ::        
     :: The standard deviation sigma=339 was determined as for OQSO   ::        
     :: by simulation.  (Sigma for OPSO, 290, is the true value (to   ::        
     :: three places), not determined by simulation.                  ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 OPSO test for generator cmg_100mb.txt  
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OPSO for cmg_100mb.txt   using bits 23 to 32        142642  2.526  .9942
    OPSO for cmg_100mb.txt   using bits 22 to 31        142520  2.106  .9824
    OPSO for cmg_100mb.txt   using bits 21 to 30        141746  -.563  .2866
    OPSO for cmg_100mb.txt   using bits 20 to 29        141905  -.015  .4940
    OPSO for cmg_100mb.txt   using bits 19 to 28        142125   .744  .7715
    OPSO for cmg_100mb.txt   using bits 18 to 27        142134   .775  .7808
    OPSO for cmg_100mb.txt   using bits 17 to 26        142128   .754  .7746
    OPSO for cmg_100mb.txt   using bits 16 to 25        141713  -.677  .2492
    OPSO for cmg_100mb.txt   using bits 15 to 24        141727  -.629  .2648
    OPSO for cmg_100mb.txt   using bits 14 to 23        142100   .657  .7446
    OPSO for cmg_100mb.txt   using bits 13 to 22        142107   .682  .7523
    OPSO for cmg_100mb.txt   using bits 12 to 21        142353  1.530  .9370
    OPSO for cmg_100mb.txt   using bits 11 to 20        141808  -.349  .3634
    OPSO for cmg_100mb.txt   using bits 10 to 19        141717  -.663  .2536
    OPSO for cmg_100mb.txt   using bits  9 to 18        141903  -.022  .4913
    OPSO for cmg_100mb.txt   using bits  8 to 17        141935   .089  .5353
    OPSO for cmg_100mb.txt   using bits  7 to 16        142355  1.537  .9378
    OPSO for cmg_100mb.txt   using bits  6 to 15        141995   .295  .6162
    OPSO for cmg_100mb.txt   using bits  5 to 14        141852  -.198  .4216
    OPSO for cmg_100mb.txt   using bits  4 to 13        141597 -1.077  .1407
    OPSO for cmg_100mb.txt   using bits  3 to 12        142267  1.233  .8913
    OPSO for cmg_100mb.txt   using bits  2 to 11        141494 -1.432  .0760
    OPSO for cmg_100mb.txt   using bits  1 to 10        141749  -.553  .2902
 OQSO test for generator cmg_100mb.txt  
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
    OQSO for cmg_100mb.txt   using bits 28 to 32        142339  1.457  .9274
    OQSO for cmg_100mb.txt   using bits 27 to 31        142032   .416  .6612
    OQSO for cmg_100mb.txt   using bits 26 to 30        141924   .050  .5198
    OQSO for cmg_100mb.txt   using bits 25 to 29        141861  -.164  .4349
    OQSO for cmg_100mb.txt   using bits 24 to 28        142414  1.711  .9564
    OQSO for cmg_100mb.txt   using bits 23 to 27        142375  1.579  .9428
    OQSO for cmg_100mb.txt   using bits 22 to 26        141591 -1.079  .1403
    OQSO for cmg_100mb.txt   using bits 21 to 25        142573  2.250  .9878
    OQSO for cmg_100mb.txt   using bits 20 to 24        141298 -2.072  .0191
    OQSO for cmg_100mb.txt   using bits 19 to 23        142367  1.551  .9396
    OQSO for cmg_100mb.txt   using bits 18 to 22        141424 -1.645  .0500
    OQSO for cmg_100mb.txt   using bits 17 to 21        141330 -1.964  .0248
    OQSO for cmg_100mb.txt   using bits 16 to 20        141555 -1.201  .1149
    OQSO for cmg_100mb.txt   using bits 15 to 19        142479  1.931  .9733
    OQSO for cmg_100mb.txt   using bits 14 to 18        142459  1.863  .9688
    OQSO for cmg_100mb.txt   using bits 13 to 17        141999   .304  .6194
    OQSO for cmg_100mb.txt   using bits 12 to 16        141864  -.154  .4389
    OQSO for cmg_100mb.txt   using bits 11 to 15        141900  -.032  .4874
    OQSO for cmg_100mb.txt   using bits 10 to 14        141994   .287  .6130
    OQSO for cmg_100mb.txt   using bits  9 to 13        141620  -.981  .1634
    OQSO for cmg_100mb.txt   using bits  8 to 12        141739  -.577  .2818
    OQSO for cmg_100mb.txt   using bits  7 to 11        141715  -.659  .2550
    OQSO for cmg_100mb.txt   using bits  6 to 10        141647  -.889  .1869
    OQSO for cmg_100mb.txt   using bits  5 to  9        141756  -.520  .3016
    OQSO for cmg_100mb.txt   using bits  4 to  8        141805  -.354  .3618
    OQSO for cmg_100mb.txt   using bits  3 to  7        142072   .551  .7093
    OQSO for cmg_100mb.txt   using bits  2 to  6        142036   .429  .6662
    OQSO for cmg_100mb.txt   using bits  1 to  5        141910   .002  .5009
  DNA test for generator cmg_100mb.txt  
  Output: No. missing words (mw), equiv normal variate (z), p-value (p)
                                                           mw     z     p
     DNA for cmg_100mb.txt   using bits 31 to 32        142308  1.176  .8802
     DNA for cmg_100mb.txt   using bits 30 to 31        141753  -.461  .3223
     DNA for cmg_100mb.txt   using bits 29 to 30        141875  -.101  .4597
     DNA for cmg_100mb.txt   using bits 28 to 29        141792  -.346  .3646
     DNA for cmg_100mb.txt   using bits 27 to 28        141929   .058  .5231
     DNA for cmg_100mb.txt   using bits 26 to 27        141283 -1.848  .0323
     DNA for cmg_100mb.txt   using bits 25 to 26        141885  -.072  .4714
     DNA for cmg_100mb.txt   using bits 24 to 25        142347  1.291  .9017
     DNA for cmg_100mb.txt   using bits 23 to 24        142114   .604  .7270
     DNA for cmg_100mb.txt   using bits 22 to 23        142248   .999  .8411
     DNA for cmg_100mb.txt   using bits 21 to 22        141735  -.514  .3035
     DNA for cmg_100mb.txt   using bits 20 to 21        142138   .675  .7500
     DNA for cmg_100mb.txt   using bits 19 to 20        141865  -.131  .4480
     DNA for cmg_100mb.txt   using bits 18 to 19        141373 -1.582  .0568
     DNA for cmg_100mb.txt   using bits 17 to 18        142148   .704  .7593
     DNA for cmg_100mb.txt   using bits 16 to 17        141969   .176  .5699
     DNA for cmg_100mb.txt   using bits 15 to 16        141968   .173  .5687
     DNA for cmg_100mb.txt   using bits 14 to 15        142008   .291  .6145
     DNA for cmg_100mb.txt   using bits 13 to 14        141721  -.556  .2893
     DNA for cmg_100mb.txt   using bits 12 to 13        142284  1.105  .8655
     DNA for cmg_100mb.txt   using bits 11 to 12        141668  -.712  .2383
     DNA for cmg_100mb.txt   using bits 10 to 11        141765  -.426  .3351
     DNA for cmg_100mb.txt   using bits  9 to 10        141799  -.325  .3724
     DNA for cmg_100mb.txt   using bits  8 to  9        141911   .005  .5020
     DNA for cmg_100mb.txt   using bits  7 to  8        141891  -.054  .4784
     DNA for cmg_100mb.txt   using bits  6 to  7        141873  -.107  .4573
     DNA for cmg_100mb.txt   using bits  5 to  6        141633  -.815  .2075
     DNA for cmg_100mb.txt   using bits  4 to  5        142132   .657  .7444
     DNA for cmg_100mb.txt   using bits  3 to  4        141935   .076  .5302
     DNA for cmg_100mb.txt   using bits  2 to  3        142584  1.990  .9767
     DNA for cmg_100mb.txt   using bits  1 to  2        141456 -1.337  .0906

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::     This is the COUNT-THE-1's TEST on a stream of bytes.      ::        
     :: Consider the file under test as a stream of bytes (four per   ::        
     :: 32 bit integer).  Each byte can contain from 0 to 8 1's,      ::        
     :: with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let  ::        
     :: the stream of bytes provide a string of overlapping  5-letter ::        
     :: words, each "letter" taking values A,B,C,D,E. The letters are ::        
     :: determined by the number of 1's in a byte::  0,1,or 2 yield A,::        
     :: 3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus ::        
     :: we have a monkey at a typewriter hitting five keys with vari- ::        
     :: ous probabilities (37,56,70,56,37 over 256).  There are 5^5   ::        
     :: possible 5-letter words, and from a string of 256,000 (over-  ::        
     :: lapping) 5-letter words, counts are made on the frequencies   ::        
     :: for each word.   The quadratic form in the weak inverse of    ::        
     :: the covariance matrix of the cell counts provides a chisquare ::        
     :: test::  Q5-Q4, the difference of the naive Pearson sums of    ::        
     :: (OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.    ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
   Test results for cmg_100mb.txt  
 Chi-square with 5^5-5^4=2500 d.of f. for sample size:2560000
                               chisquare  equiv normal  p-value
  Results fo COUNT-THE-1's in successive bytes:
 byte stream for cmg_100mb.txt    2596.88      1.370      .914669
 byte stream for cmg_100mb.txt    2438.60      -.868      .192590

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::     This is the COUNT-THE-1's TEST for specific bytes.        ::        
     :: Consider the file under test as a stream of 32-bit integers.  ::        
     :: From each integer, a specific byte is chosen , say the left-  ::        
     :: most::  bits 1 to 8. Each byte can contain from 0 to 8 1's,   ::        
     :: with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let   ::        
     :: the specified bytes from successive integers provide a string ::        
     :: of (overlapping) 5-letter words, each "letter" taking values  ::        
     :: A,B,C,D,E. The letters are determined  by the number of 1's,  ::        
     :: in that byte::  0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D,::        
     :: and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter  ::        
     :: hitting five keys with with various probabilities::  37,56,70,::        
     :: 56,37 over 256. There are 5^5 possible 5-letter words, and    ::        
     :: from a string of 256,000 (overlapping) 5-letter words, counts ::        
     :: are made on the frequencies for each word. The quadratic form ::        
     :: in the weak inverse of the covariance matrix of the cell      ::        
     :: counts provides a chisquare test::  Q5-Q4, the difference of  ::        
     :: the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-   ::        
     :: and 4-letter cell counts.                                     ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
 Chi-square with 5^5-5^4=2500 d.of f. for sample size: 256000
                      chisquare  equiv normal  p value
  Results for COUNT-THE-1's in specified bytes:
           bits  1 to  8  2509.48       .134      .553344
           bits  2 to  9  2493.03      -.099      .460745
           bits  3 to 10  2534.58       .489      .687592
           bits  4 to 11  2466.10      -.479      .315804
           bits  5 to 12  2557.72       .816      .792813
           bits  6 to 13  2522.52       .319      .624961
           bits  7 to 14  2631.14      1.855      .968168
           bits  8 to 15  2575.36      1.066      .856728
           bits  9 to 16  2482.66      -.245      .403126
           bits 10 to 17  2442.28      -.816      .207152
           bits 11 to 18  2600.68      1.424      .922743
           bits 12 to 19  2521.75       .308      .620789
           bits 13 to 20  2483.67      -.231      .408674
           bits 14 to 21  2568.82       .973      .834794
           bits 15 to 22  2488.60      -.161      .435978
           bits 16 to 23  2509.18       .130      .551625
           bits 17 to 24  2649.87      2.119      .982975
           bits 18 to 25  2476.25      -.336      .368507
           bits 19 to 26  2554.74       .774      .780559
           bits 20 to 27  2605.79      1.496      .932686
           bits 21 to 28  2390.20     -1.553      .060237
           bits 22 to 29  2572.80      1.029      .848373
           bits 23 to 30  2563.92       .904      .817005
           bits 24 to 31  2541.91       .593      .723297
           bits 25 to 32  2532.72       .463      .678218

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::               THIS IS A PARKING LOT TEST                      ::        
     :: In a square of side 100, randomly "park" a car---a circle of  ::        
     :: radius 1.   Then try to park a 2nd, a 3rd, and so on, each    ::        
     :: time parking "by ear".  That is, if an attempt to park a car  ::        
     :: causes a crash with one already parked, try again at a new    ::        
     :: random location. (To avoid path problems, consider parking    ::        
     :: helicopters rather than cars.)   Each attempt leads to either ::        
     :: a crash or a success, the latter followed by an increment to  ::        
     :: the list of cars already parked. If we plot n:  the number of ::        
     :: attempts, versus k::  the number successfully parked, we get a::        
     :: curve that should be similar to those provided by a perfect   ::        
     :: random number generator.  Theory for the behavior of such a   ::        
     :: random curve seems beyond reach, and as graphics displays are ::        
     :: not available for this battery of tests, a simple characteriz ::        
     :: ation of the random experiment is used: k, the number of cars ::        
     :: successfully parked after n=12,000 attempts. Simulation shows ::        
     :: that k should average 3523 with sigma 21.9 and is very close  ::        
     :: to normally distributed.  Thus (k-3523)/21.9 should be a st-  ::        
     :: andard normal variable, which, converted to a uniform varia-  ::        
     :: ble, provides input to a KSTEST based on a sample of 10.      ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
           CDPARK: result of ten tests on file cmg_100mb.txt  
            Of 12,000 tries, the average no. of successes
                 should be 3523 with sigma=21.9
            Successes: 3516    z-score:  -.320 p-value: .374623
            Successes: 3548    z-score:  1.142 p-value: .873180
            Successes: 3528    z-score:   .228 p-value: .590298
            Successes: 3529    z-score:   .274 p-value: .607947
            Successes: 3536    z-score:   .594 p-value: .723613
            Successes: 3496    z-score: -1.233 p-value: .108811
            Successes: 3522    z-score:  -.046 p-value: .481790
            Successes: 3530    z-score:   .320 p-value: .625377
            Successes: 3503    z-score:  -.913 p-value: .180558
            Successes: 3556    z-score:  1.507 p-value: .934075
 
           square size   avg. no.  parked   sample sigma
             100.            3526.400       17.454
            KSTEST for the above 10: p=  .128716

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::               THE MINIMUM DISTANCE TEST                       ::        
     :: It does this 100 times::   choose n=8000 random points in a   ::        
     :: square of side 10000.  Find d, the minimum distance between   ::        
     :: the (n^2-n)/2 pairs of points.  If the points are truly inde- ::        
     :: pendent uniform, then d^2, the square of the minimum distance ::        
     :: should be (very close to) exponentially distributed with mean ::        
     :: .995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and  ::        
     :: a KSTEST on the resulting 100 values serves as a test of uni- ::        
     :: formity for random points in the square. Test numbers=0 mod 5 ::        
     :: are printed but the KSTEST is based on the full set of 100    ::        
     :: random choices of 8000 points in the 10000x10000 square.      ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
               This is the MINIMUM DISTANCE test
              for random integers in the file cmg_100mb.txt  
     Sample no.    d^2     avg     equiv uni            
           5    1.0583    .9298     .654783
          10    1.3558    .8091     .744013
          15     .0713    .8564     .069178
          20     .4842    .7911     .385333
          25    4.5130    .8885     .989280
          30     .6969    .8400     .503595
          35     .7387    .9420     .524023
          40    2.7263   1.0644     .935431
          45     .5227   1.0228     .408652
          50     .3964   1.0035     .328582
          55    3.4376   1.0175     .968408
          60    3.2814   1.0424     .963039
          65     .2727   1.0475     .239690
          70     .3862   1.0269     .321698
          75     .3560   1.0138     .300755
          80     .6945   1.0526     .502391
          85     .4681   1.0579     .375258
          90     .8322   1.0628     .566728
          95    1.9336   1.0421     .856779
         100    1.8779   1.0194     .848519
     MINIMUM DISTANCE TEST for cmg_100mb.txt  
          Result of KS test on 20 transformed mindist^2's:
                                  p-value= .215656

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::              THE 3DSPHERES TEST                               ::        
     :: Choose  4000 random points in a cube of edge 1000.  At each   ::        
     :: point, center a sphere large enough to reach the next closest ::        
     :: point. Then the volume of the smallest such sphere is (very   ::        
     :: close to) exponentially distributed with mean 120pi/3.  Thus  ::        
     :: the radius cubed is exponential with mean 30. (The mean is    ::        
     :: obtained by extensive simulation).  The 3DSPHERES test gener- ::        
     :: ates 4000 such spheres 20 times.  Each min radius cubed leads ::        
     :: to a uniform variable by means of 1-exp(-r^3/30.), then a     ::        
     ::  KSTEST is done on the 20 p-values.                           ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
               The 3DSPHERES test for file cmg_100mb.txt  
 sample no:  1     r^3=  20.144     p-value= .48904
 sample no:  2     r^3=   9.900     p-value= .28107
 sample no:  3     r^3=  13.939     p-value= .37164
 sample no:  4     r^3= 117.673     p-value= .98021
 sample no:  5     r^3=  17.204     p-value= .43644
 sample no:  6     r^3=   5.685     p-value= .17264
 sample no:  7     r^3=  86.723     p-value= .94447
 sample no:  8     r^3=  20.658     p-value= .49771
 sample no:  9     r^3=  42.704     p-value= .75912
 sample no: 10     r^3=  72.894     p-value= .91195
 sample no: 11     r^3=  38.159     p-value= .71972
 sample no: 12     r^3=  17.054     p-value= .43361
 sample no: 13     r^3=  16.537     p-value= .42376
 sample no: 14     r^3=  18.695     p-value= .46377
 sample no: 15     r^3=  27.367     p-value= .59837
 sample no: 16     r^3= 106.401     p-value= .97118
 sample no: 17     r^3=  12.326     p-value= .33693
 sample no: 18     r^3=  38.565     p-value= .72349
 sample no: 19     r^3=  54.383     p-value= .83680
 sample no: 20     r^3=  22.146     p-value= .52203
  A KS test is applied to those 20 p-values.
---------------------------------------------------------
       3DSPHERES test for file cmg_100mb.txt        p-value= .851817
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::      This is the SQEEZE test                                  ::        
     ::  Random integers are floated to get uniforms on [0,1). Start- ::        
     ::  ing with k=2^31=2147483647, the test finds j, the number of  ::        
     ::  iterations necessary to reduce k to 1, using the reduction   ::        
     ::  k=ceiling(k*U), with U provided by floating integers from    ::        
     ::  the file being tested.  Such j's are found 100,000 times,    ::        
     ::  then counts for the number of times j was <=6,7,...,47,>=48  ::        
     ::  are used to provide a chi-square test for cell frequencies.  ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
            RESULTS OF SQUEEZE TEST FOR cmg_100mb.txt  
         Table of standardized frequency counts
     ( (obs-exp)/sqrt(exp) )^2
        for j taking values <=6,7,8,...,47,>=48:
     -.8      .1    -1.6      .3      .0      .1
     -.2      .1     -.1     1.1      .3     -.2
     -.8    -1.3      .0     1.0      .2      .0
     -.1     -.1     1.6    -2.0     1.4     -.5
      .0      .5     -.3     -.2    -1.2     -.7
      .5      .4    -1.0      .0     1.0     1.0
      .7     -.4      .1     -.7     1.6      .0
      .8
           Chi-square with 42 degrees of freedom: 26.765
              z-score= -1.662  p-value= .032560
______________________________________________________________

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::             The  OVERLAPPING SUMS test                        ::        
     :: Integers are floated to get a sequence U(1),U(2),... of uni-  ::        
     :: form [0,1) variables.  Then overlapping sums,                 ::        
     ::   S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.    ::        
     :: The S's are virtually normal with a certain covariance mat-   ::        
     :: rix.  A linear transformation of the S's converts them to a   ::        
     :: sequence of independent standard normals, which are converted ::        
     :: to uniform variables for a KSTEST. The  p-values from ten     ::        
     :: KSTESTs are given still another KSTEST.                       ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
                Test no.  1      p-value  .184029
                Test no.  2      p-value  .632562
                Test no.  3      p-value  .522861
                Test no.  4      p-value  .183547
                Test no.  5      p-value  .004793
                Test no.  6      p-value  .023791
                Test no.  7      p-value  .949922
                Test no.  8      p-value  .833072
                Test no.  9      p-value  .461219
                Test no. 10      p-value  .858713
   Results of the OSUM test for cmg_100mb.txt  
        KSTEST on the above 10 p-values:  .497713

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     ::     This is the RUNS test.  It counts runs up, and runs down, ::        
     :: in a sequence of uniform [0,1) variables, obtained by float-  ::        
     :: ing the 32-bit integers in the specified file. This example   ::        
     :: shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95::        
     :: contains an up-run of length 3, a down-run of length 2 and an ::        
     :: up-run of (at least) 2, depending on the next values.  The    ::        
     :: covariance matrices for the runs-up and runs-down are well    ::        
     :: known, leading to chisquare tests for quadratic forms in the  ::        
     :: weak inverses of the covariance matrices.  Runs are counted   ::        
     :: for sequences of length 10,000.  This is done ten times. Then ::        
     :: repeated.                                                     ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
           The RUNS test for file cmg_100mb.txt  
     Up and down runs in a sample of 10000
_________________________________________________ 
                 Run test for cmg_100mb.txt  :
       runs up; ks test for 10 p's: .298765
     runs down; ks test for 10 p's: .346579
                 Run test for cmg_100mb.txt  :
       runs up; ks test for 10 p's: .175880
     runs down; ks test for 10 p's: .161126

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
     :: This is the CRAPS TEST. It plays 200,000 games of craps, finds::        
     :: the number of wins and the number of throws necessary to end  ::        
     :: each game.  The number of wins should be (very close to) a    ::        
     :: normal with mean 200000p and variance 200000p(1-p), with      ::        
     :: p=244/495.  Throws necessary to complete the game can vary    ::        
     :: from 1 to infinity, but counts for all>21 are lumped with 21. ::        
     :: A chi-square test is made on the no.-of-throws cell counts.   ::        
     :: Each 32-bit integer from the test file provides the value for ::        
     :: the throw of a die, by floating to [0,1), multiplying by 6    ::        
     :: and taking 1 plus the integer part of the result.             ::        
     :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::        
                Results of craps test for cmg_100mb.txt  
  No. of wins:  Observed Expected
                                98428    98585.86
                  98428= No. of wins, z-score= -.706 pvalue= .24008
   Analysis of Throws-per-Game:
 Chisq=  14.55 for 20 degrees of freedom, p=  .19837
               Throws Observed Expected  Chisq     Sum
                  1    66796    66666.7    .251     .251
                  2    37794    37654.3    .518     .769
                  3    26870    26954.7    .266    1.035
                  4    19231    19313.5    .352    1.387
                  5    13868    13851.4    .020    1.407
                  6     9952     9943.5    .007    1.414
                  7     7039     7145.0   1.573    2.988
                  8     5126     5139.1    .033    3.021
                  9     3703     3699.9    .003    3.024
                 10     2650     2666.3    .100    3.123
                 11     1854     1923.3   2.499    5.622
                 12     1344     1388.7   1.441    7.064
                 13     1028     1003.7    .588    7.651
                 14      733      726.1    .065    7.716
                 15      522      525.8    .028    7.744
                 16      411      381.2   2.338   10.082
                 17      291      276.5    .756   10.838
                 18      205      200.8    .087   10.924
                 19      160      146.0   1.346   12.270
                 20      116      106.2    .901   13.171
                 21      307      287.1   1.377   14.549
            SUMMARY  FOR cmg_100mb.txt  
                p-value for no. of wins: .240082
                p-value for throws/game: .198371

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

 Results of DIEHARD battery of tests sent to file cmg100.txt     
