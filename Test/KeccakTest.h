#ifndef CEXTEST_KECCAKTEST_H
#define CEXTEST_KECCAKTEST_H

#include "ITest.h"
#include "../CEX/IDigest.h"

namespace Test
{
	using CEX::Digest::IDigest;

	/// <summary>
	/// Tests the SHA-3 digest implementations using known vector comparisons
	/// </summary>
	class KeccakTest final : public ITest
	{
	private:

		static const std::string DESCRIPTION;
		static const std::string FAILURE;
		static const std::string SUCCESS;

		std::vector<std::vector<byte>> m_message;
		std::vector<std::vector<byte>> m_exp256;
		std::vector<std::vector<byte>> m_exp512;
		std::vector<std::vector<byte>> m_exp1024;

		TestEventHandler m_progressEvent;

	public:

		/// <summary>
		/// A range of Vector KATs; tests SHA-3 256/512 and the unofficial Keccak1024 implementation
		/// </summary>
		KeccakTest();

		/// <summary>
		/// Destructor
		/// </summary>
		~KeccakTest();

		/// <summary>
		/// Get: The test description
		/// </summary>
		const std::string Description() override;

		/// <summary>
		/// Progress return event callback
		/// </summary>
		TestEventHandler &Progress() override;

		/// <summary>
		/// Start the tests
		/// </summary>
		std::string Run() override;

	private:

		/// <summary>
		/// Tests the 256 bit version of the keccak message digest for correct operation,
		/// using selected vectors from the NIST Fips202 and alternative references.
		/// </summary>
		///
		/// <remarks>
		/// Fips202: <see href = "http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf"/>,
		/// ref(0) : <see href = "https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-256_Msg0.pdf"/>
		/// ref(1600) : <see href = "https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-256_1600.pdf"/>
		/// ref(24, 448) : <see href = "https://www.di-mgt.com.au/sha_testvectors.html" / >
		/// </remarks>
		void SHA3256KatTest();

		/// <summary>
		/// Tests the 512 bit version of the keccak message digest for correct operation,
		/// using selected vectors from the NIST Fips202 and alternative references.
		/// </summary>
		///
		/// <remarks>
		/// Fips202: <see href = "http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf"/>,
		/// ref(0) : <see href = "https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-512_Msg0.pdf"/>
		/// ref(1600) : <see href = "https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/SHA3-512_1600.pdf"/>
		/// ref(24, 448) : <see href = "https://www.di-mgt.com.au/sha_testvectors.html" / >
		/// </remarks>
		void SHA3512KatTest();

		/// <summary>
		/// Tests the 1024 bit version of the keccak message digest for correct operation,
		/// using original vectors generated by this implementation.
		/// </summary>
		void Keccak1024KatTest();

		void Initialize();
		void OnProgress(std::string Data);
		void TreeParamsTest();
	};
}

#endif
