#include "Poly1305Test.h"
#include "../CEX/Poly1305.h"

namespace Test
{
	const std::string Poly1305Test::DESCRIPTION = "Poly1305 MAC Generator Tests.";
	const std::string Poly1305Test::FAILURE = "FAILURE! ";
	const std::string Poly1305Test::SUCCESS = "SUCCESS! Poly1305 tests have executed succesfully.";

	Poly1305Test::Poly1305Test()
		:
		m_expectedCode(0),
		m_key(0),
		m_nonce(0),
		m_plainText(0),
		m_progressEvent()
	{
	}

	Poly1305Test::~Poly1305Test()
	{
	}

	const std::string Poly1305Test::Description()
	{
		return DESCRIPTION;
	}

	TestEventHandler &Poly1305Test::Progress()
	{
		return m_progressEvent;
	}

	std::string Poly1305Test::Run()
	{
		try
		{
			Initialize();

			const size_t SEQLEN = 16;
			for (size_t i = 0; i < SEQLEN; ++i)
			{
				Poly1305Compare(m_key[i], m_plainText[i], m_expectedCode[i]);
			}

			OnProgress(std::string("Poly1305Test: Passed Poly1305 sequential known answer vector tests.."));

			for (size_t i = SEQLEN; i < m_key.size(); ++i)
			{
				Poly1305AESCompare(m_key[i], m_nonce[i - SEQLEN], m_plainText[i], m_expectedCode[i]);
			}

			OnProgress(std::string("Poly1305Test: Passed Poly1305-AES known answer vector tests.."));

			return SUCCESS;
		}
		catch (TestException const &ex)
		{
			throw TestException(FAILURE + std::string(" : ") + ex.Message());
		}
		catch (...)
		{
			throw TestException(std::string(FAILURE + std::string(" : Unknown Error")));
		}
	}

	void Poly1305Test::Poly1305Compare(std::vector<byte> &Key, std::vector<byte> &PlainText, std::vector<byte> &MacCode)
	{
		Mac::Poly1305 gen;
		Key::Symmetric::SymmetricKey kp(Key);
		gen.Initialize(kp);
		gen.Update(PlainText, 0, PlainText.size());

		std::vector<byte> code(16);
		gen.Finalize(code, 0);

		if (MacCode != code)
		{
			throw TestException("Poly1305Compare: Tags do not match!");
		}
	}

	void Poly1305Test::Poly1305AESCompare(std::vector<byte> &Key, std::vector<byte> &Nonce, std::vector<byte> &PlainText, std::vector<byte> &MacCode)
	{
		Mac::Poly1305 gen(Enumeration::BlockCiphers::Rijndael);
		Key::Symmetric::SymmetricKey kp(Key, Nonce);
		gen.Initialize(kp);
		gen.Update(PlainText, 0, PlainText.size());

		std::vector<byte> code(16);
		gen.Finalize(code, 0);

		if (MacCode != code)
		{
			throw TestException("Poly1305AESCompare: Tags do not match!");
		}
	}

	void Poly1305Test::Initialize()
	{
		const char* keyEncoded[21] =
		{
			("85d6be7857556d337f4452fe42d506a80103808afb0db2fd4abff6af4149f51b"),
			("746869732069732033322d62797465206b657920666f7220506f6c7931333035"),
			("0000000000000000000000000000000000000000000000000000000000000000"),
			("0000000000000000000000000000000036e5f6b5c5e06070f0efca96227a863e"),
			("36e5f6b5c5e06070f0efca96227a863e00000000000000000000000000000000"),
			("1c9240a5eb55d38af333888604f6b5f0473917c1402b80099dca5cbc207075c0"),
			("0200000000000000000000000000000000000000000000000000000000000000"),
			("02000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
			("0100000000000000000000000000000000000000000000000000000000000000"),
			("0100000000000000000000000000000000000000000000000000000000000000"),
			("0200000000000000000000000000000000000000000000000000000000000000"),
			("0100000000000000040000000000000000000000000000000000000000000000"),
			("0100000000000000040000000000000000000000000000000000000000000000"),
			("eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880"),
			("01bcb20bfc8b6e03609ddd09f44b060f95cc0e44d0b79a8856afcae1bec4fe3c"),
			("cd07fd0ef8c0be0afcbdb30af4af000976fb3635a2dc92a1f768163ab12f2187"),
			("0000000000000000000000000000000000000000000000000000000000000000"),
			("f795bd0a50e29e0710d3130a20e98d0cf795bd4a52e29ed713d313fa20e98dbc"),
			("3ef49901c8e11c000430d90ad45e7603e69dae0aab9f91c03a325dcc9436fa90"),
			("da4afc035087d90e503f8f0ea08c3e0d85a4ea91a7de0b0d96eed0d4bf6ecf1c"),
			("ca3c6a0da0a864024ca3090628c28e0d25eb69bac5cdf7d6bfcee4d9d5507b82")

		};
		HexConverter::Decode(keyEncoded, 21, m_key);

		const char* nonceEncoded[5] =
		{
			("00000000000000000000000000000000"),
			("917cf69ebd68b2ec9b9fe9a3eadda692"),
			("166450152e2394835606a9d1dd2cdc8b"),
			("0b6ef7a0b8f8c738b0f8d5995415271f"),
			("046772a4f0a8de92e4f0d628cdb04484")
		};
		HexConverter::Decode(nonceEncoded, 5, m_nonce);

		const char* plainEncoded[21] =
		{
			("43727970746f6772617068696320466f72756d2052657365617263682047726f7570"),
			("48656c6c6f20776f726c6421"),
			("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
			("416e79207375626d697373696f6e20746f20746865204945544620696e74656e6465642062792074686520436f6e7472696275746f7220666f72207075626c69"
			"636174696f6e20617320616c6c206f722070617274206f6620616e204945544620496e7465726e65742d4472616674206f722052464320616e6420616e7920737"
			"46174656d656e74206d6164652077697468696e2074686520636f6e74657874206f6620616e204945544620616374697669747920697320636f6e736964657265"
			"6420616e20224945544620436f6e747269627574696f6e222e20537563682073746174656d656e747320696e636c756465206f72616c2073746174656d656e747"
			"320696e20494554462073657373696f6e732c2061732077656c6c206173207772697474656e20616e6420656c656374726f6e696320636f6d6d756e6963617469"
			"6f6e73206d61646520617420616e792074696d65206f7220706c6163652c207768696368206172652061646472657373656420746f"),
			("416e79207375626d697373696f6e20746f20746865204945544620696e74656e6465642062792074686520436f6e7472696275746f7220666f72207075626c69"
			"636174696f6e20617320616c6c206f722070617274206f6620616e204945544620496e7465726e65742d4472616674206f722052464320616e6420616e7920737"
			"46174656d656e74206d6164652077697468696e2074686520636f6e74657874206f6620616e204945544620616374697669747920697320636f6e736964657265"
			"6420616e20224945544620436f6e747269627574696f6e222e20537563682073746174656d656e747320696e636c756465206f72616c2073746174656d656e747"
			"320696e20494554462073657373696f6e732c2061732077656c6c206173207772697474656e20616e6420656c656374726f6e696320636f6d6d756e6963617469"
				"6f6e73206d61646520617420616e792074696d65206f7220706c6163652c207768696368206172652061646472657373656420746f"),
			("2754776173206272696c6c69672c20616e642074686520736c6974687920746f7665730a446964206779726520616e642067696d626c6520696e207468652077"
			"6162653a0a416c6c206d696d737920776572652074686520626f726f676f7665732c0a416e6420746865206d6f6d65207261746873206f757467726162652e"),
			("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
			("02000000000000000000000000000000"),
			("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF11000000000000000000000000000000"),
			("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE01010101010101010101010101010101"),
			("FDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
			("E33594D7505E43B900000000000000003394D7505E4379CD01000000000000000000000000000000000000000000000001000000000000000000000000000000"),
			("E33594D7505E43B900000000000000003394D7505E4379CD010000000000000000000000000000000000000000000000"),
			("8e993b9f48681273c29650ba32fc76ce48332ea7164d96a4476fb8c531a1186ac0dfc17c98dce87b4da7f011ec48c97271d2c20f9b928fe2270d6fb863d51738b4"
				"8eeee314a7cc8ab932164548e526ae90224368517acfeabd6bb3732bc0e9da99832b61ca01b6de56244a9e88d5f9b37973f622a43d14a6599b1f654cb45a74e355a5"),
			("66f75c0e0c7a40658629e3392f7f8e3349a02191ffd49f39879a8d9d1d0e23ea3caa4d240bd2ab8a8c4a6bb8d3288d9de4b793f05e97646dd4d98055de"
				"fc3e0677d956b4c62664bac15962ab15d93ccbbc03aafdbde779162ed93b55361f0f8acaa41d50ef5175927fe79ea316186516eef15001cd04d3524a55"
				"e4fa3c5ca479d3aaa8a897c21807f721b6270ffc68b6889d81a116799f6aaa35d8e04c7a7dd5e6da2519e8759f54e906696f5772fee093283bcef7b930"
				"aed50323bcbc8c820c67422c1e16bdc022a9c0277c9d95fef0ea4ee11e2b27276da811523c5acb80154989f8a67ee9e3fa30b73b0c1c34bf46e3464d97"
				"7cd7fcd0ac3b82721080bb0d9b982ee2c77feee983d7ba35da88ce86955002940652ab63bc56fb16f994da2b01d74356509d7d1b6d7956b0e5a557757b"
				"d1ced2eef8650bc5b6d426108c1518abcbd0befb6a0d5fd57a3e2dbf31458eab63df66613653d4beae73f5c40eb438fbcfdcf4a4ba46320184b9ca0da4"
				"dfae77de7ccc910356caea3243f33a3c81b064b3b7cedc7435c223f664227215715980e6e0bb570d459ba80d7512dbe458c8f0f3f52d659b6e8eef19ee"
				"71aea2ced85c7a42ffca6522a62db49a2a46eff72bd7f7e0883acd087183f0627f3537a4d558754ed63358e8182bee196735b361dc9bd64d5e34e1074a"
				"855655d2974cc6fa1653754cf40f561d8c7dc526aab2908ec2d2b977cde1a1fb1071e32f40e049ea20f30368ba1592b4fe57fb51595d23acbdace324cd"
				"d78060a17187c662368854e915402d9b52fb21e984663e41c26a109437e162cfaf071b53f77e50000a5388ff183b82ce7a1af476c416d7d204157b3633"
				"b2f4ec077b699b032816997e37bceded8d4a04976fd7d0c0b029f290794c3be504c5242287ea2f831f11ed5690d92775cd6e863d7731fd4da687ebfb13"
				"df4c41dc0fb8"),
			("f05204a74f0f88a7fa1a95b84ec3d8ffb36fcdc7723ea65dfe7cd464e86e0abf6b9d51db3220cfd8496ad6e6d36ebee8d990f9ce0d3bb7f72b7ab5b3ab0a7"
				"3240d11efe772c857021ae859db4933cdde4387b471d2ce700fef4b81087f8f47c307881fd83017afcd15b8d21edf9b704677f46df97b07e5b83f87c8a"
				"bd90af9b1d0f9e2710e8ebd0d4d1c6a055abea861f42368bed94d9373e909c1d3715b221c16bc524c55c31ec3eab204850bb2474a84f9917038eff9d92"
				"1130951391b5c54f09b5e1de833ea2cd7d3b306740abb7096d1e173da83427da2adddd3631eda30b54dbf487f2b082e8646f07d6e0a87e97522ca38d4a"
				"ce4954bf3db6dd3a93b06fa18eb56856627ed6cffcd7ae26374554ca18ab8905f26331d323fe10e6e70624c7bc07a70f06ecd804b48f8f7e75e910165e"
				"1beb554f1f0ec7949c9c8d429a206b4d5c0653102249b6098e6b45fac2a07ff0220b0b8ae8f4c6bcc0c813a7cd141fa8b398b42575fc395747c5a0257a"
				"c41d6c1f434cfbf5dfe8349f5347ef6b60e611f5d6c3cbc20ca2555274d1934325824cef4809da293ea13f181929e2af025bbd1c9abdc3af93afd4c50a"
				"2854ade3887f4d2c8c225168052c16e74d76d2dd3e9467a2c5b8e15c06ffbffa42b8536384139f07e195a8c9f70f514f31dca4eb2cf262c0dcbde53654"
				"b6250a29efe21d54e83c80e005a1cad36d5934ff01c32e4bc5fe06d03064ff4a268517df4a94c759289f323734318cfa5d859d4ce9c16e63d02dff0896"
				"976f521607638535d2ee8dd3312e1ddc80a55d34fe829ab954c1ebd54d929954770f1be9d32b4c05003c5c9e97943b6431e2afe820b1e967b19843e598"
				"5a131b1100517cdc363799104af91e2cf3f53cb8fd003653a6dd8a31a3f9d566a7124b0ffe9695bcb87c482eb60106f88198f766a40bc0f4873c23653c"
				"5f9e7a8e446f770beb8034cf01d21028ba15ccee21a8db918c4829d61c88bfa927bc5def831501796c5b401a60a6b1b433c9fb905c8cd40412fffee81ab"),
			(""),
			("66f7"),
			("66f75c0e0c7a406586"),
			("66f75c0e0c7a40658629e3392f7f8e3349a02191ffd49f39879a8d9d1d0e23ea"),
			("66f75c0e0c7a40658629e3392f7f8e3349a02191ffd49f39879a8d9d1d0e23ea3caa4d240bd2ab8a8c4a6bb8d3288d9de4b793f05e97646dd4d98055de")

		};
		HexConverter::Decode(plainEncoded, 21, m_plainText);

		const char* codeEncoded[21] =
		{
			("a8061dc1305136c6c22b8baf0c0127a9"),
			("a6f745008f81c916a20dcc74eef2b2f0"),
			("00000000000000000000000000000000"),
			("36e5f6b5c5e06070f0efca96227a863e"),
			("f3477e7cd95417af89a6b8794c310cf0"),
			("4541669a7eaaee61e708dc7cbcc5eb62"),
			("03000000000000000000000000000000"),
			("03000000000000000000000000000000"),
			("05000000000000000000000000000000"),
			("00000000000000000000000000000000"),
			("FAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"),
			("14000000000000005500000000000000"),
			("13000000000000000000000000000000"),
			("f3ffc7703f9400e52a7dfb4b3d3305d9"),
			("ae345d555eb04d6947bb95c0965237e2"),
			("045be28cc52009f506bdbfabedacf0b4"),
			("66e94bd4ef8a2c3b884cfa59ca342b2e"),
			("5ca585c75e8f8f025e710cabc9a1508b"),
			("2924f51b9c2eff5df09db61dd03a9ca1"),
			("3c5a13adb18d31c64cc29972030c917d"),
			("fc5fb58dc65daf19b14d1d05da1064e8")
		};
		HexConverter::Decode(codeEncoded, 21, m_expectedCode);
	}

	void Poly1305Test::OnProgress(std::string Data)
	{
		m_progressEvent(Data);
	}
}