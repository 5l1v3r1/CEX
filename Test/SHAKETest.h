#ifndef CEXTEST_SHAKETEST_H
#define CEXTEST_SHAKETEST_H

#include "ITest.h"
#include "../CEX/ShakeModes.h"

namespace Test
{
	using CEX::Enumeration::ShakeModes;

	/// <summary>
	/// SHAKE XOF function tests.
	/// <para>Parameters for SHAKE256 from the official KATs: https://raw.githubusercontent.com/gvanas/KeccakCodePackage/master/TestVectors/ShortMsgKAT_SHAKE256.txt
	/// Parameters for SHAKE128 from the official KATs: https://raw.githubusercontent.com/gvanas/KeccakCodePackage/master/TestVectors/ShortMsgKAT_SHAKE128.txt
	/// Original SHAKE512 and SHAKE1024 KAT vectors generated by the CEX implementations.</para>
	/// </summary>
	class SHAKETest final : public ITest
	{
	private:

		static const std::string DESCRIPTION;
		static const std::string FAILURE;
		static const std::string SUCCESS;

		std::vector<std::vector<byte>> m_key;
		std::vector<std::vector<byte>> m_output;
		TestEventHandler m_progressEvent;

	public:

		/// <summary>
		/// Compares known answer SHAKE vectors for equality
		/// </summary>
		SHAKETest();

		/// <summary>
		/// Destructor
		/// </summary>
		~SHAKETest();

		/// <summary>
		/// Get: The test description
		/// </summary>
		const std::string Description() override;

		/// <summary>
		/// Progress return event callback
		/// </summary>
		TestEventHandler &Progress() override;

		/// <summary>
		/// Start the tests
		/// </summary>
		std::string Run() override;

	private:

		void CompareVector(std::vector<byte> &Key, std::vector<byte> &Expected, ShakeModes Mode);
		void Initialize();
		void OnProgress(std::string Data);
	};
}

#endif
