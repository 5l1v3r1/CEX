// The GPL version 3 License (GPLv3)
// 
// Copyright (c) 2017 vtdev.com
// This file is part of the CEX Cryptographic library.
// 
// This program is free software : you can redistribute it and / or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITStateOUT ANY WARRANTY; without even the implied warranty of
// MERCStateANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

#ifndef CEX_KECCAK_H
#define CEX_KECCAK_H

#include "CexDomain.h"
#include "IntUtils.h"

#if defined(__AVX2__)
#	include "ULong256.h"
#endif
#if defined(__AVX512__)
#	include "ULong512.h"
#endif

NAMESPACE_DIGEST

using Utility::IntUtils;

#if defined(__AVX2__)
	using Numeric::ULong256;
#endif
#if defined(__AVX512__)
	using Numeric::ULong512;
#endif

/// <summary>
/// Internal static class containing the 24 and 48 round Keccak permutation functions.
/// <para>Note: The PermuteR48P1600U is an extended permutation function that uses 48 rounds, rather than the 24 rounds used by the standard implementation of Keccak. \n
/// The additional 24 rounds constants were generated using the LFSR from the Keccak code package, with the additional 24 constants being \n
/// the next in sequence generated by that LFSR.</para>
/// <para>The compact forms of the permutations have the suffix C, and are optimized for low memory consumption 
/// (enabled in the hash function by adding the CEX_DIGEST_COMPACT to the CexConfig file). \n
/// The Unrolled forms are optimized for speed have the U suffix. \n
/// The H suffix denotes functions that take an SIMD wrapper class as the state values, and process message blocks in parallel.</para>
/// <para>This class contains wide forms of the functions; PermuteR24P6400H and PermuteR48P12800H use AVX2. \n
/// Experimental functions using AVX512 instructions are also implemented; PermuteR24P6400H and PermuteR48P12800H. \n
/// These extended functions are only visible at run-time on some development platforms (VS..), if the __AVX2__ or __AVX512__ compiler flags are declared explicitely.</para>
/// </summary>
class Keccak
{
// Keccak 1024 round constants enum:
// Generated using the InitializeRoundConstants/LFSR86540 function from the keccak code package:
// https://github.com/gvanas/KeccakCodePackage/blob/aa3cded0ae844dbff0dbecfb6d42d50c7bdb9d9b/SnP/KeccakP-1600/Reference/KeccakP-1600-reference.c
// The first 24 are the standard constants, the second set was generated by extending the LFSR to generate 48 round constants
//const ulong RC[48] =
//{
//	0x0000000000000001, 0x0000000000008082, 0x800000000000808A, 0x8000000080008000,
//	0x000000000000808B, 0x0000000080000001, 0x8000000080008081, 0x8000000000008009,
//	0x000000000000008A, 0x0000000000000088, 0x0000000080008009, 0x000000008000000A,
//	0x000000008000808B, 0x800000000000008B, 0x8000000000008089, 0x8000000000008003,
//	0x8000000000008002, 0x8000000000000080, 0x000000000000800A, 0x800000008000000A,
//	0x8000000080008081, 0x8000000000008080, 0x0000000080000001, 0x8000000080008008,
//  // next sequence generated using LFSR86540
//	0x8000000080008082, 0x800000008000800A, 0x8000000000000003, 0x8000000080000009,
//	0x8000000000008082, 0x0000000000008009, 0x8000000000000080, 0x0000000000008083,
//	0x8000000000000081, 0x0000000000000001, 0x000000000000800B, 0x8000000080008001,
//	0x0000000000000080, 0x8000000000008000, 0x8000000080008001, 0x0000000000000009,
//	0x800000008000808B, 0x0000000000000081, 0x8000000000000082, 0x000000008000008B,
//	0x8000000080008009, 0x8000000080000000, 0x0000000080000080, 0x0000000080008003
//};

private:

	static const std::vector<ulong> RC24;
	static const std::vector<ulong> RC48;

public:

	/// <summary>
	/// The compact form of the 24 round (standard) SHA3 permutation function.
	/// <para>This function has been optimized for a small memory consumption.
	/// To enable this function, add the CEX_DIGEST_COMPACT directive to the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="State">The permutations uint64 state array</param>
	static void PermuteR24P1600C(std::array<ulong, 25> &State);

	/// <summary>
	/// The unrolled form of the 24 round (standard) SHA3 permutation function.
	/// <para>This function (the default) has been optimized for speed, and timing neutrality.
	/// To enable this function, remove the CEX_DIGEST_COMPACT directive from the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="InOffset">The starting offset within the Input array</param>
	/// <param name="State">The permutations uint64 state array</param>
	static void PermuteR24P1600U(std::array<ulong, 25> &State);

	/// <summary>
	/// The compact form of the 48 round (extended) SHA3 permutation function.
	/// <para>This function has been optimized for a small memory consumption.
	/// To enable this function, add the CEX_DIGEST_COMPACT directive to the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="State">The permutations uint64 state array</param>
	static void PermuteR48P1600C(std::array<ulong, 25> &State);

	/// <summary>
	/// The unrolled form of the 48 round (extended) SHA3 permutation function.
	/// <para>This function (the default) has been optimized for speed, and timing neutrality.
	/// To enable this function, remove the CEX_DIGEST_COMPACT directive from the CexConfig file.</para>
	/// </summary>
	/// 
	/// <param name="Input">The input message array</param>
	/// <param name="InOffset">The starting offset within the Input array</param>
	/// <param name="State">The permutations uint64 state array</param>
	static void PermuteR48P1600U(std::array<ulong, 25> &State);

#if defined(__AVX512__)

	/// <summary>
	/// The horizontally vectorized 24 round (standard) form of the SHA3 permutation function.
	/// <para>This function processes 8*25 blocks of state in parallel using AVX512 instructions.</para>
	/// </summary>
	/// 
	/// <param name="State">The permutations ULong512 state array</param>
	static void PermuteR24P12800H(std::vector<ULong512> &State);

	/// <summary>
	/// The horizontally vectorized 48 round (extended) form of the SHA3 permutation function.
	/// <para>This function processes 8*25 blocks of state in parallel using AVX512 instructions.</para>
	/// </summary>
	/// 
	/// <param name="State">The permutations ULong512 state array</param>
	static void PermuteR48P12800H(std::vector<ULong512> &State);

#endif

#if defined(__AVX2__)

	/// <summary>
	/// The horizontally vectorized 24 round (standard) form of the SHA3 permutation function.
	/// <para>This function processes 4*25 blocks of state in parallel using AVX2 instructions.</para>
	/// </summary>
	/// 
	/// <param name="State">The permutations ULong256 state array</param>
	static void PermuteR24P6400H(std::vector<ULong256> &State);

	/// <summary>
	/// The horizontally vectorized 48 round form (extended) of the SHA3 permutation function.
	/// <para>This function processes 4*25 blocks of state in parallel using AVX2 instructions.</para>
	/// </summary>
	/// 
	/// <param name="State">The permutations ULong256 state array</param>
	static void PermuteR48P6400H(std::vector<ULong256> &State);

#endif

};

NAMESPACE_DIGESTEND
#endif
