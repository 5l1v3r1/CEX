// The GPL version 3 License (GPLv3)
// 
// Copyright (c) 2017 vtdev.com
// This file is part of the CEX Cryptographic library.
// 
// This program is free software : you can redistribute it and / or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITStateOUT ANY WARRANTY; without even the implied warranty of
// MERCStateANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

#ifndef CEX_KECCAK_H
#define CEX_KECCAK_H

#include "CexDomain.h"
#include "IntUtils.h"

#if defined(__AVX512__)
#	include "ULong512.h"
#elif defined(__AVX2__)
#	include "ULong256.h"
#endif

NAMESPACE_DIGEST

using Utility::IntUtils;

#if defined(__AVX512__)
	using Numeric::ULong512;
#elif defined(__AVX2__)
	using Numeric::ULong256;
#endif

/**
* \internal
*/

/// <summary>
/// Internal static class containing the 24 and 48 round Keccak permutation functions.
/// <para>Note: The PermuteR48P1600 is an extended permutation function that uses 48 rounds, rather than the 24 rounds used by the SStateA3 implementation of Keccak.
/// The additional 24 rounds constants were generated using the LFSR from the Keccak code package, with the additional 24 constants being
/// the next in sequence generated by that LFSR.</para>
/// </summary>
class Keccak
{
// Keccak 1024 round constants enum:
// Generated using the InitializeRoundConstants/LFSR86540 function from the keccak code package:
// https://github.com/gvanas/KeccakCodePackage/blob/aa3cded0ae844dbff0dbecfb6d42d50c7bdb9d9b/SnP/KeccakP-1600/Reference/KeccakP-1600-reference.c
// The first 24 are the standard constants, the second set was generated by extending the LFSR to generate 48 round constants
//const ulong RC[48] =
//{
//	0x0000000000000001, 0x0000000000008082, 0x800000000000808A, 0x8000000080008000,
//	0x000000000000808B, 0x0000000080000001, 0x8000000080008081, 0x8000000000008009,
//	0x000000000000008A, 0x0000000000000088, 0x0000000080008009, 0x000000008000000A,
//	0x000000008000808B, 0x800000000000008B, 0x8000000000008089, 0x8000000000008003,
//	0x8000000000008002, 0x8000000000000080, 0x000000000000800A, 0x800000008000000A,
//	0x8000000080008081, 0x8000000000008080, 0x0000000080000001, 0x8000000080008008,
//  // next sequence generated using LFSR86540
//	0x8000000080008082, 0x800000008000800A, 0x8000000000000003, 0x8000000080000009,
//	0x8000000000008082, 0x0000000000008009, 0x8000000000000080, 0x0000000000008083,
//	0x8000000000000081, 0x0000000000000001, 0x000000000000800B, 0x8000000080008001,
//	0x0000000000000080, 0x8000000000008000, 0x8000000080008001, 0x0000000000000009,
//	0x800000008000808B, 0x0000000000000081, 0x8000000000000082, 0x000000008000008B,
//	0x8000000080008009, 0x8000000080000000, 0x0000000080000080, 0x0000000080008003
//};

public:

	template<typename Array>
	inline static void PermuteR24P1600(Array &State)
	{
		uint64_t Aba = State[0];
		uint64_t Abe = State[1];
		uint64_t Abi = State[2];
		uint64_t Abo = State[3];
		uint64_t Abu = State[4];
		uint64_t Aga = State[5];
		uint64_t Age = State[6];
		uint64_t Agi = State[7];
		uint64_t Ago = State[8];
		uint64_t Agu = State[9];
		uint64_t Aka = State[10];
		uint64_t Ake = State[11];
		uint64_t Aki = State[12];
		uint64_t Ako = State[13];
		uint64_t Aku = State[14];
		uint64_t Ama = State[15];
		uint64_t Ame = State[16];
		uint64_t Ami = State[17];
		uint64_t Amo = State[18];
		uint64_t Amu = State[19];
		uint64_t Asa = State[20];
		uint64_t Ase = State[21];
		uint64_t Asi = State[22];
		uint64_t Aso = State[23];
		uint64_t Asu = State[24];

		// round 1
		uint64_t Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		uint64_t Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		uint64_t Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		uint64_t Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		uint64_t Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		uint64_t Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		uint64_t De = Ca ^ IntUtils::RotFL64(Ci, 1);
		uint64_t Di = Ce ^ IntUtils::RotFL64(Co, 1);
		uint64_t Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		uint64_t Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		uint64_t Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000000000001ULL;
		uint64_t Ebe = Ce ^ ((~Ci) & Co);
		uint64_t Ebi = Ci ^ ((~Co) & Cu);
		uint64_t Ebo = Co ^ ((~Cu) & Ca);
		uint64_t Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		uint64_t Ega = Ca ^ ((~Ce) & Ci);
		uint64_t Ege = Ce ^ ((~Ci) & Co);
		uint64_t Egi = Ci ^ ((~Co) & Cu);
		uint64_t Ego = Co ^ ((~Cu) & Ca);
		uint64_t Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		uint64_t Eka = Ca ^ ((~Ce) & Ci);
		uint64_t Eke = Ce ^ ((~Ci) & Co);
		uint64_t Eki = Ci ^ ((~Co) & Cu);
		uint64_t Eko = Co ^ ((~Cu) & Ca);
		uint64_t Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		uint64_t Ema = Ca ^ ((~Ce) & Ci);
		uint64_t Eme = Ce ^ ((~Ci) & Co);
		uint64_t Emi = Ci ^ ((~Co) & Cu);
		uint64_t Emo = Co ^ ((~Cu) & Ca);
		uint64_t Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		uint64_t Esa = Ca ^ ((~Ce) & Ci);
		uint64_t Ese = Ce ^ ((~Ci) & Co);
		uint64_t Esi = Ci ^ ((~Co) & Cu);
		uint64_t Eso = Co ^ ((~Cu) & Ca);
		uint64_t Esu = Cu ^ ((~Ca) & Ce);
		// round 2
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000008082ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 3
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x800000000000808AULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 4
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000080008000ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 5
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000000000808BULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 6
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000080000001ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 7
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000080008081ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 8
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000008009ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 9
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000000000008AULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 10
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000000088ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 11
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000080008009ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 12
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x000000008000000AULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 13
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000008000808BULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 14
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x800000000000008BULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 15
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000008089ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 16
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000008003ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 17
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000008002ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 18
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000000080ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 19
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000000000800AULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 20
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x800000008000000AULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 21
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000080008081ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 22
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000008080ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 23
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000080000001ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 24
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000080008008ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);

		State[0] = Aba;
		State[1] = Abe;
		State[2] = Abi;
		State[3] = Abo;
		State[4] = Abu;
		State[5] = Aga;
		State[6] = Age;
		State[7] = Agi;
		State[8] = Ago;
		State[9] = Agu;
		State[10] = Aka;
		State[11] = Ake;
		State[12] = Aki;
		State[13] = Ako;
		State[14] = Aku;
		State[15] = Ama;
		State[16] = Ame;
		State[17] = Ami;
		State[18] = Amo;
		State[19] = Amu;
		State[20] = Asa;
		State[21] = Ase;
		State[22] = Asi;
		State[23] = Aso;
		State[24] = Asu;
	}

	template<typename Array>
	inline static void PermuteR48P1600(Array &State)
	{
		uint64_t Aba = State[0];
		uint64_t Abe = State[1];
		uint64_t Abi = State[2];
		uint64_t Abo = State[3];
		uint64_t Abu = State[4];
		uint64_t Aga = State[5];
		uint64_t Age = State[6];
		uint64_t Agi = State[7];
		uint64_t Ago = State[8];
		uint64_t Agu = State[9];
		uint64_t Aka = State[10];
		uint64_t Ake = State[11];
		uint64_t Aki = State[12];
		uint64_t Ako = State[13];
		uint64_t Aku = State[14];
		uint64_t Ama = State[15];
		uint64_t Ame = State[16];
		uint64_t Ami = State[17];
		uint64_t Amo = State[18];
		uint64_t Amu = State[19];
		uint64_t Asa = State[20];
		uint64_t Ase = State[21];
		uint64_t Asi = State[22];
		uint64_t Aso = State[23];
		uint64_t Asu = State[24];

		// round 1
		uint64_t Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		uint64_t Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		uint64_t Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		uint64_t Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		uint64_t Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		uint64_t Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		uint64_t De = Ca ^ IntUtils::RotFL64(Ci, 1);
		uint64_t Di = Ce ^ IntUtils::RotFL64(Co, 1);
		uint64_t Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		uint64_t Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		uint64_t Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000000000001ULL;
		uint64_t Ebe = Ce ^ ((~Ci) & Co);
		uint64_t Ebi = Ci ^ ((~Co) & Cu);
		uint64_t Ebo = Co ^ ((~Cu) & Ca);
		uint64_t Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		uint64_t Ega = Ca ^ ((~Ce) & Ci);
		uint64_t Ege = Ce ^ ((~Ci) & Co);
		uint64_t Egi = Ci ^ ((~Co) & Cu);
		uint64_t Ego = Co ^ ((~Cu) & Ca);
		uint64_t Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		uint64_t Eka = Ca ^ ((~Ce) & Ci);
		uint64_t Eke = Ce ^ ((~Ci) & Co);
		uint64_t Eki = Ci ^ ((~Co) & Cu);
		uint64_t Eko = Co ^ ((~Cu) & Ca);
		uint64_t Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		uint64_t Ema = Ca ^ ((~Ce) & Ci);
		uint64_t Eme = Ce ^ ((~Ci) & Co);
		uint64_t Emi = Ci ^ ((~Co) & Cu);
		uint64_t Emo = Co ^ ((~Cu) & Ca);
		uint64_t Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		uint64_t Esa = Ca ^ ((~Ce) & Ci);
		uint64_t Ese = Ce ^ ((~Ci) & Co);
		uint64_t Esi = Ci ^ ((~Co) & Cu);
		uint64_t Eso = Co ^ ((~Cu) & Ca);
		uint64_t Esu = Cu ^ ((~Ca) & Ce);
		// round 2
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000008082ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 3
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x800000000000808AULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 4
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000080008000ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 5
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000000000808BULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 6
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000080000001ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 7
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000080008081ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 8
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000008009ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 9
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000000000008AULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 10
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000000088ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 11
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000080008009ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 12
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x000000008000000AULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 13
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000008000808BULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 14
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x800000000000008BULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 15
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000008089ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 16
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000008003ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 17
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000008002ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 18
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000000080ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 19
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000000000800AULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 20
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x800000008000000AULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 21
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000080008081ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 22
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000008080ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 23
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000080000001ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 24
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000080008008ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 25
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000080008082ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 26
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x800000008000800AULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 27
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000000003ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 28
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000080000009ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 29
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000008082ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 30
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000008009ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 31
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000000080ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 32
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000008083ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 33
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000000081ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 34
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000000001ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 35
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x000000000000800BULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 36
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000080008001ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 37
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000000000080ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 38
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000000008000ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 39
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000080008001ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 40
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000000009ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 41
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x800000008000808BULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 42
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000000000081ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 43
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000000000082ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 44
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x000000008000008BULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 45
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x8000000080008009ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 46
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x8000000080000000ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);
		// round 47
		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Aba ^= Da;
		Ca = Aba;
		Age ^= De;
		Ce = IntUtils::RotFL64(Age, 44);
		Aki ^= Di;
		Ci = IntUtils::RotFL64(Aki, 43);
		Amo ^= Do;
		Co = IntUtils::RotFL64(Amo, 21);
		Asu ^= Du;
		Cu = IntUtils::RotFL64(Asu, 14);
		Eba = Ca ^ ((~Ce) & Ci);
		Eba ^= 0x0000000080000080ULL;
		Ebe = Ce ^ ((~Ci) & Co);
		Ebi = Ci ^ ((~Co) & Cu);
		Ebo = Co ^ ((~Cu) & Ca);
		Ebu = Cu ^ ((~Ca) & Ce);
		Abo ^= Do;
		Ca = IntUtils::RotFL64(Abo, 28);
		Agu ^= Du;
		Ce = IntUtils::RotFL64(Agu, 20);
		Aka ^= Da;
		Ci = IntUtils::RotFL64(Aka, 3);
		Ame ^= De;
		Co = IntUtils::RotFL64(Ame, 45);
		Asi ^= Di;
		Cu = IntUtils::RotFL64(Asi, 61);
		Ega = Ca ^ ((~Ce) & Ci);
		Ege = Ce ^ ((~Ci) & Co);
		Egi = Ci ^ ((~Co) & Cu);
		Ego = Co ^ ((~Cu) & Ca);
		Egu = Cu ^ ((~Ca) & Ce);
		Abe ^= De;
		Ca = IntUtils::RotFL64(Abe, 1);
		Agi ^= Di;
		Ce = IntUtils::RotFL64(Agi, 6);
		Ako ^= Do;
		Ci = IntUtils::RotFL64(Ako, 25);
		Amu ^= Du;
		Co = IntUtils::RotFL64(Amu, 8);
		Asa ^= Da;
		Cu = IntUtils::RotFL64(Asa, 18);
		Eka = Ca ^ ((~Ce) & Ci);
		Eke = Ce ^ ((~Ci) & Co);
		Eki = Ci ^ ((~Co) & Cu);
		Eko = Co ^ ((~Cu) & Ca);
		Eku = Cu ^ ((~Ca) & Ce);
		Abu ^= Du;
		Ca = IntUtils::RotFL64(Abu, 27);
		Aga ^= Da;
		Ce = IntUtils::RotFL64(Aga, 36);
		Ake ^= De;
		Ci = IntUtils::RotFL64(Ake, 10);
		Ami ^= Di;
		Co = IntUtils::RotFL64(Ami, 15);
		Aso ^= Do;
		Cu = IntUtils::RotFL64(Aso, 56);
		Ema = Ca ^ ((~Ce) & Ci);
		Eme = Ce ^ ((~Ci) & Co);
		Emi = Ci ^ ((~Co) & Cu);
		Emo = Co ^ ((~Cu) & Ca);
		Emu = Cu ^ ((~Ca) & Ce);
		Abi ^= Di;
		Ca = IntUtils::RotFL64(Abi, 62);
		Ago ^= Do;
		Ce = IntUtils::RotFL64(Ago, 55);
		Aku ^= Du;
		Ci = IntUtils::RotFL64(Aku, 39);
		Ama ^= Da;
		Co = IntUtils::RotFL64(Ama, 41);
		Ase ^= De;
		Cu = IntUtils::RotFL64(Ase, 2);
		Esa = Ca ^ ((~Ce) & Ci);
		Ese = Ce ^ ((~Ci) & Co);
		Esi = Ci ^ ((~Co) & Cu);
		Eso = Co ^ ((~Cu) & Ca);
		Esu = Cu ^ ((~Ca) & Ce);
		// round 48
		Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
		Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
		Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
		Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
		Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
		Da = Cu ^ IntUtils::RotFL64(Ce, 1);
		De = Ca ^ IntUtils::RotFL64(Ci, 1);
		Di = Ce ^ IntUtils::RotFL64(Co, 1);
		Do = Ci ^ IntUtils::RotFL64(Cu, 1);
		Du = Co ^ IntUtils::RotFL64(Ca, 1);
		Eba ^= Da;
		Ca = Eba;
		Ege ^= De;
		Ce = IntUtils::RotFL64(Ege, 44);
		Eki ^= Di;
		Ci = IntUtils::RotFL64(Eki, 43);
		Emo ^= Do;
		Co = IntUtils::RotFL64(Emo, 21);
		Esu ^= Du;
		Cu = IntUtils::RotFL64(Esu, 14);
		Aba = Ca ^ ((~Ce) & Ci);
		Aba ^= 0x0000000080008003ULL;
		Abe = Ce ^ ((~Ci) & Co);
		Abi = Ci ^ ((~Co) & Cu);
		Abo = Co ^ ((~Cu) & Ca);
		Abu = Cu ^ ((~Ca) & Ce);
		Ebo ^= Do;
		Ca = IntUtils::RotFL64(Ebo, 28);
		Egu ^= Du;
		Ce = IntUtils::RotFL64(Egu, 20);
		Eka ^= Da;
		Ci = IntUtils::RotFL64(Eka, 3);
		Eme ^= De;
		Co = IntUtils::RotFL64(Eme, 45);
		Esi ^= Di;
		Cu = IntUtils::RotFL64(Esi, 61);
		Aga = Ca ^ ((~Ce) & Ci);
		Age = Ce ^ ((~Ci) & Co);
		Agi = Ci ^ ((~Co) & Cu);
		Ago = Co ^ ((~Cu) & Ca);
		Agu = Cu ^ ((~Ca) & Ce);
		Ebe ^= De;
		Ca = IntUtils::RotFL64(Ebe, 1);
		Egi ^= Di;
		Ce = IntUtils::RotFL64(Egi, 6);
		Eko ^= Do;
		Ci = IntUtils::RotFL64(Eko, 25);
		Emu ^= Du;
		Co = IntUtils::RotFL64(Emu, 8);
		Esa ^= Da;
		Cu = IntUtils::RotFL64(Esa, 18);
		Aka = Ca ^ ((~Ce) & Ci);
		Ake = Ce ^ ((~Ci) & Co);
		Aki = Ci ^ ((~Co) & Cu);
		Ako = Co ^ ((~Cu) & Ca);
		Aku = Cu ^ ((~Ca) & Ce);
		Ebu ^= Du;
		Ca = IntUtils::RotFL64(Ebu, 27);
		Ega ^= Da;
		Ce = IntUtils::RotFL64(Ega, 36);
		Eke ^= De;
		Ci = IntUtils::RotFL64(Eke, 10);
		Emi ^= Di;
		Co = IntUtils::RotFL64(Emi, 15);
		Eso ^= Do;
		Cu = IntUtils::RotFL64(Eso, 56);
		Ama = Ca ^ ((~Ce) & Ci);
		Ame = Ce ^ ((~Ci) & Co);
		Ami = Ci ^ ((~Co) & Cu);
		Amo = Co ^ ((~Cu) & Ca);
		Amu = Cu ^ ((~Ca) & Ce);
		Ebi ^= Di;
		Ca = IntUtils::RotFL64(Ebi, 62);
		Ego ^= Do;
		Ce = IntUtils::RotFL64(Ego, 55);
		Eku ^= Du;
		Ci = IntUtils::RotFL64(Eku, 39);
		Ema ^= Da;
		Co = IntUtils::RotFL64(Ema, 41);
		Ese ^= De;
		Cu = IntUtils::RotFL64(Ese, 2);
		Asa = Ca ^ ((~Ce) & Ci);
		Ase = Ce ^ ((~Ci) & Co);
		Asi = Ci ^ ((~Co) & Cu);
		Aso = Co ^ ((~Cu) & Ca);
		Asu = Cu ^ ((~Ca) & Ce);

		State[0] = Aba;
		State[1] = Abe;
		State[2] = Abi;
		State[3] = Abo;
		State[4] = Abu;
		State[5] = Aga;
		State[6] = Age;
		State[7] = Agi;
		State[8] = Ago;
		State[9] = Agu;
		State[10] = Aka;
		State[11] = Ake;
		State[12] = Aki;
		State[13] = Ako;
		State[14] = Aku;
		State[15] = Ama;
		State[16] = Ame;
		State[17] = Ami;
		State[18] = Amo;
		State[19] = Amu;
		State[20] = Asa;
		State[21] = Ase;
		State[22] = Asi;
		State[23] = Aso;
		State[24] = Asu;
	}

#if defined(__AVX512__)

	template<typename Array>
	inline static void PermuteR24P12800(std::vector<Array> &State)
	{
		ULong512 Aba(State[0][0], State[1][0], State[2][0], State[3][0], State[4][0], State[5][0], State[6][0], State[7][0]);
		ULong512 Abe(State[0][1], State[1][1], State[2][1], State[3][1], State[4][1], State[5][1], State[6][1], State[7][1]);
		ULong512 Abi(State[0][2], State[1][2], State[2][2], State[3][2], State[4][2], State[5][2], State[6][2], State[7][2]);
		ULong512 Abo(State[0][3], State[1][3], State[2][3], State[3][3], State[4][3], State[5][3], State[6][3], State[7][3]);
		ULong512 Abu(State[0][4], State[1][4], State[2][4], State[3][4], State[4][4], State[5][4], State[6][4], State[7][4]);
		ULong512 Aga(State[0][5], State[1][5], State[2][5], State[3][5], State[4][5], State[5][5], State[6][5], State[7][5]);
		ULong512 Age(State[0][6], State[1][6], State[2][6], State[3][6], State[4][6], State[5][6], State[6][6], State[7][6]);
		ULong512 Agi(State[0][7], State[1][7], State[2][7], State[3][7], State[4][7], State[5][7], State[6][7], State[7][7]);
		ULong512 Ago(State[0][8], State[1][8], State[2][8], State[3][8], State[4][8], State[5][8], State[6][8], State[7][8]);
		ULong512 Agu(State[0][9], State[1][9], State[2][9], State[3][9], State[4][9], State[5][9], State[6][9], State[7][9]);
		ULong512 Aka(State[0][10], State[1][10], State[2][10], State[3][10], State[4][10], State[5][10], State[6][10], State[7][10]);
		ULong512 Ake(State[0][11], State[1][11], State[2][11], State[3][11], State[4][11], State[5][11], State[6][11], State[7][11]);
		ULong512 Aki(State[0][12], State[1][12], State[2][12], State[3][12], State[4][12], State[5][12], State[6][12], State[7][12]);
		ULong512 Ako(State[0][13], State[1][13], State[2][13], State[3][13], State[4][13], State[5][13], State[6][13], State[7][13]);
		ULong512 Aku(State[0][14], State[1][14], State[2][14], State[3][14], State[4][14], State[5][14], State[6][14], State[7][14]);
		ULong512 Ama(State[0][15], State[1][15], State[2][15], State[3][15], State[4][15], State[5][15], State[6][15], State[7][15]);
		ULong512 Ame(State[0][16], State[1][16], State[2][16], State[3][16], State[4][16], State[5][16], State[6][16], State[7][16]);
		ULong512 Ami(State[0][17], State[1][17], State[2][17], State[3][17], State[4][17], State[5][17], State[6][17], State[7][17]);
		ULong512 Amo(State[0][18], State[1][18], State[2][18], State[3][18], State[4][18], State[5][18], State[6][18], State[7][18]);
		ULong512 Amu(State[0][19], State[1][19], State[2][19], State[3][19], State[4][19], State[5][19], State[6][19], State[7][19]);
		ULong512 Asa(State[0][20], State[1][20], State[2][20], State[3][20], State[4][20], State[5][20], State[6][20], State[7][20]);
		ULong512 Ase(State[0][21], State[1][21], State[2][21], State[3][21], State[4][21], State[5][21], State[6][21], State[7][21]);
		ULong512 Asi(State[0][22], State[1][22], State[2][22], State[3][22], State[4][22], State[5][22], State[6][22], State[7][22]);
		ULong512 Aso(State[0][23], State[1][23], State[2][23], State[3][23], State[4][23], State[5][23], State[6][23], State[7][23]);
		ULong512 Asu(State[0][24], State[1][24], State[2][24], State[3][24], State[4][24], State[5][24], State[6][24], State[7][24]);

		const static std::array<ULong512, 24> RC24 =
		{
			ULong512(0x0000000000000001ULL), ULong512(0x0000000000008082ULL), ULong512(0x800000000000808AULL), ULong512(0x8000000080008000ULL),
			ULong512(0x000000000000808BULL), ULong512(0x0000000080000001ULL), ULong512(0x8000000080008081ULL), ULong512(0x8000000000008009ULL),
			ULong512(0x000000000000008AULL), ULong512(0x0000000000000088ULL), ULong512(0x0000000080008009ULL), ULong512(0x000000008000000AULL),
			ULong512(0x000000008000808BULL), ULong512(0x800000000000008BULL), ULong512(0x8000000000008089ULL), ULong512(0x8000000000008003ULL),
			ULong512(0x8000000000008002ULL), ULong512(0x8000000000000080ULL), ULong512(0x000000000000800AULL), ULong512(0x800000008000000AULL),
			ULong512(0x8000000080008081ULL), ULong512(0x8000000000008080ULL), ULong512(0x0000000080000001ULL), ULong512(0x8000000080008008ULL)
		};

		ULong512 Ca;
		ULong512 Ce;
		ULong512 Ci;
		ULong512 Co;
		ULong512 Cu;
		ULong512 Da;
		ULong512 De;
		ULong512 Di;
		ULong512 Do;
		ULong512 Du;
		ULong512 Eba;
		ULong512 Ebe;
		ULong512 Ebi;
		ULong512 Ebo;
		ULong512 Ebu;
		ULong512 Ega;
		ULong512 Ege;
		ULong512 Egi;
		ULong512 Ego;
		ULong512 Egu;
		ULong512 Eka;
		ULong512 Eke;
		ULong512 Eki;
		ULong512 Eko;
		ULong512 Eku;
		ULong512 Ema;
		ULong512 Eme;
		ULong512 Emi;
		ULong512 Emo;
		ULong512 Emu;
		ULong512 Esa;
		ULong512 Ese;
		ULong512 Esi;
		ULong512 Eso;
		ULong512 Esu;

		for (size_t i = 0; i < 24; i += 2)
		{
			// round n
			Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
			Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
			Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
			Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
			Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
			Da = Cu ^ ULong512::RotL64(Ce, 1);
			De = Ca ^ ULong512::RotL64(Ci, 1);
			Di = Ce ^ ULong512::RotL64(Co, 1);
			Do = Ci ^ ULong512::RotL64(Cu, 1);
			Du = Co ^ ULong512::RotL64(Ca, 1);
			Aba ^= Da;
			Ca = Aba;
			Age ^= De;
			Ce = ULong512::RotL64(Age, 44);
			Aki ^= Di;
			Ci = ULong512::RotL64(Aki, 43);
			Amo ^= Do;
			Co = ULong512::RotL64(Amo, 21);
			Asu ^= Du;
			Cu = ULong512::RotL64(Asu, 14);
			Eba = Ca ^ ((~Ce) & Ci);
			Eba ^= RC24[i];
			Ebe = Ce ^ ((~Ci) & Co);
			Ebi = Ci ^ ((~Co) & Cu);
			Ebo = Co ^ ((~Cu) & Ca);
			Ebu = Cu ^ ((~Ca) & Ce);
			Abo ^= Do;
			Ca = ULong512::RotL64(Abo, 28);
			Agu ^= Du;
			Ce = ULong512::RotL64(Agu, 20);
			Aka ^= Da;
			Ci = ULong512::RotL64(Aka, 3);
			Ame ^= De;
			Co = ULong512::RotL64(Ame, 45);
			Asi ^= Di;
			Cu = ULong512::RotL64(Asi, 61);
			Ega = Ca ^ ((~Ce) & Ci);
			Ege = Ce ^ ((~Ci) & Co);
			Egi = Ci ^ ((~Co) & Cu);
			Ego = Co ^ ((~Cu) & Ca);
			Egu = Cu ^ ((~Ca) & Ce);
			Abe ^= De;
			Ca = ULong512::RotL64(Abe, 1);
			Agi ^= Di;
			Ce = ULong512::RotL64(Agi, 6);
			Ako ^= Do;
			Ci = ULong512::RotL64(Ako, 25);
			Amu ^= Du;
			Co = ULong512::RotL64(Amu, 8);
			Asa ^= Da;
			Cu = ULong512::RotL64(Asa, 18);
			Eka = Ca ^ ((~Ce) & Ci);
			Eke = Ce ^ ((~Ci) & Co);
			Eki = Ci ^ ((~Co) & Cu);
			Eko = Co ^ ((~Cu) & Ca);
			Eku = Cu ^ ((~Ca) & Ce);
			Abu ^= Du;
			Ca = ULong512::RotL64(Abu, 27);
			Aga ^= Da;
			Ce = ULong512::RotL64(Aga, 36);
			Ake ^= De;
			Ci = ULong512::RotL64(Ake, 10);
			Ami ^= Di;
			Co = ULong512::RotL64(Ami, 15);
			Aso ^= Do;
			Cu = ULong512::RotL64(Aso, 56);
			Ema = Ca ^ ((~Ce) & Ci);
			Eme = Ce ^ ((~Ci) & Co);
			Emi = Ci ^ ((~Co) & Cu);
			Emo = Co ^ ((~Cu) & Ca);
			Emu = Cu ^ ((~Ca) & Ce);
			Abi ^= Di;
			Ca = ULong512::RotL64(Abi, 62);
			Ago ^= Do;
			Ce = ULong512::RotL64(Ago, 55);
			Aku ^= Du;
			Ci = ULong512::RotL64(Aku, 39);
			Ama ^= Da;
			Co = ULong512::RotL64(Ama, 41);
			Ase ^= De;
			Cu = ULong512::RotL64(Ase, 2);
			Esa = Ca ^ ((~Ce) & Ci);
			Ese = Ce ^ ((~Ci) & Co);
			Esi = Ci ^ ((~Co) & Cu);
			Eso = Co ^ ((~Cu) & Ca);
			Esu = Cu ^ ((~Ca) & Ce);
			// round n + 1
			Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
			Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
			Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
			Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
			Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
			Da = Cu ^ ULong512::RotL64(Ce, 1);
			De = Ca ^ ULong512::RotL64(Ci, 1);
			Di = Ce ^ ULong512::RotL64(Co, 1);
			Do = Ci ^ ULong512::RotL64(Cu, 1);
			Du = Co ^ ULong512::RotL64(Ca, 1);
			Eba ^= Da;
			Ca = Eba;
			Ege ^= De;
			Ce = ULong512::RotL64(Ege, 44);
			Eki ^= Di;
			Ci = ULong512::RotL64(Eki, 43);
			Emo ^= Do;
			Co = ULong512::RotL64(Emo, 21);
			Esu ^= Du;
			Cu = ULong512::RotL64(Esu, 14);
			Aba = Ca ^ ((~Ce) & Ci);
			Aba ^= RC24[i + 1];
			Abe = Ce ^ ((~Ci) & Co);
			Abi = Ci ^ ((~Co) & Cu);
			Abo = Co ^ ((~Cu) & Ca);
			Abu = Cu ^ ((~Ca) & Ce);
			Ebo ^= Do;
			Ca = ULong512::RotL64(Ebo, 28);
			Egu ^= Du;
			Ce = ULong512::RotL64(Egu, 20);
			Eka ^= Da;
			Ci = ULong512::RotL64(Eka, 3);
			Eme ^= De;
			Co = ULong512::RotL64(Eme, 45);
			Esi ^= Di;
			Cu = ULong512::RotL64(Esi, 61);
			Aga = Ca ^ ((~Ce) & Ci);
			Age = Ce ^ ((~Ci) & Co);
			Agi = Ci ^ ((~Co) & Cu);
			Ago = Co ^ ((~Cu) & Ca);
			Agu = Cu ^ ((~Ca) & Ce);
			Ebe ^= De;
			Ca = ULong512::RotL64(Ebe, 1);
			Egi ^= Di;
			Ce = ULong512::RotL64(Egi, 6);
			Eko ^= Do;
			Ci = ULong512::RotL64(Eko, 25);
			Emu ^= Du;
			Co = ULong512::RotL64(Emu, 8);
			Esa ^= Da;
			Cu = ULong512::RotL64(Esa, 18);
			Aka = Ca ^ ((~Ce) & Ci);
			Ake = Ce ^ ((~Ci) & Co);
			Aki = Ci ^ ((~Co) & Cu);
			Ako = Co ^ ((~Cu) & Ca);
			Aku = Cu ^ ((~Ca) & Ce);
			Ebu ^= Du;
			Ca = ULong512::RotL64(Ebu, 27);
			Ega ^= Da;
			Ce = ULong512::RotL64(Ega, 36);
			Eke ^= De;
			Ci = ULong512::RotL64(Eke, 10);
			Emi ^= Di;
			Co = ULong512::RotL64(Emi, 15);
			Eso ^= Do;
			Cu = ULong512::RotL64(Eso, 56);
			Ama = Ca ^ ((~Ce) & Ci);
			Ame = Ce ^ ((~Ci) & Co);
			Ami = Ci ^ ((~Co) & Cu);
			Amo = Co ^ ((~Cu) & Ca);
			Amu = Cu ^ ((~Ca) & Ce);
			Ebi ^= Di;
			Ca = ULong512::RotL64(Ebi, 62);
			Ego ^= Do;
			Ce = ULong512::RotL64(Ego, 55);
			Eku ^= Du;
			Ci = ULong512::RotL64(Eku, 39);
			Ema ^= Da;
			Co = ULong512::RotL64(Ema, 41);
			Ese ^= De;
			Cu = ULong512::RotL64(Ese, 2);
			Asa = Ca ^ ((~Ce) & Ci);
			Ase = Ce ^ ((~Ci) & Co);
			Asi = Ci ^ ((~Co) & Cu);
			Aso = Co ^ ((~Cu) & Ca);
			Asu = Cu ^ ((~Ca) & Ce);
		}

		Aba.Store(State[0][0], State[1][0], State[2][0], State[3][0], State[4][0], State[5][0], State[6][0], State[7][0]);
		Abe.Store(State[0][1], State[1][1], State[2][1], State[3][1], State[4][1], State[5][1], State[6][1], State[7][1]);
		Abi.Store(State[0][2], State[1][2], State[2][2], State[3][2], State[4][2], State[5][2], State[6][2], State[7][2]);
		Abo.Store(State[0][3], State[1][3], State[2][3], State[3][3], State[4][3], State[5][3], State[6][3], State[7][3]);
		Abu.Store(State[0][4], State[1][4], State[2][4], State[3][4], State[4][4], State[5][4], State[6][4], State[7][4]);
		Aga.Store(State[0][5], State[1][5], State[2][5], State[3][5], State[4][5], State[5][5], State[6][5], State[7][5]);
		Age.Store(State[0][6], State[1][6], State[2][6], State[3][6], State[4][6], State[5][6], State[6][6], State[7][6]);
		Agi.Store(State[0][7], State[1][7], State[2][7], State[3][7], State[4][7], State[5][7], State[6][7], State[7][7]);
		Ago.Store(State[0][8], State[1][8], State[2][8], State[3][8], State[4][8], State[5][8], State[6][8], State[7][8]);
		Agu.Store(State[0][9], State[1][9], State[2][9], State[3][9], State[4][9], State[5][9], State[6][9], State[7][9]);
		Aka.Store(State[0][10], State[1][10], State[2][10], State[3][10], State[4][10], State[5][10], State[6][10], State[7][10]);
		Ake.Store(State[0][11], State[1][11], State[2][11], State[3][11], State[4][11], State[5][11], State[6][11], State[7][11]);
		Aki.Store(State[0][12], State[1][12], State[2][12], State[3][12], State[4][12], State[5][12], State[6][12], State[7][12]);
		Ako.Store(State[0][13], State[1][13], State[2][13], State[3][13], State[4][13], State[5][13], State[6][13], State[7][13]);
		Aku.Store(State[0][14], State[1][14], State[2][14], State[3][14], State[4][14], State[5][14], State[6][14], State[7][14]);
		Ama.Store(State[0][15], State[1][15], State[2][15], State[3][15], State[4][15], State[5][15], State[6][15], State[7][15]);
		Ame.Store(State[0][16], State[1][16], State[2][16], State[3][16], State[4][16], State[5][16], State[6][16], State[7][16]);
		Ami.Store(State[0][17], State[1][17], State[2][17], State[3][17], State[4][17], State[5][17], State[6][17], State[7][17]);
		Amo.Store(State[0][18], State[1][18], State[2][18], State[3][18], State[4][18], State[5][18], State[6][18], State[7][18]);
		Amu.Store(State[0][19], State[1][19], State[2][19], State[3][19], State[4][19], State[5][19], State[6][19], State[7][19]);
		Asa.Store(State[0][20], State[1][20], State[2][20], State[3][20], State[4][20], State[5][20], State[6][20], State[7][20]);
		Ase.Store(State[0][21], State[1][21], State[2][21], State[3][21], State[4][21], State[5][21], State[6][21], State[7][21]);
		Asi.Store(State[0][22], State[1][22], State[2][22], State[3][22], State[4][22], State[5][22], State[6][22], State[7][22]);
		Aso.Store(State[0][23], State[1][23], State[2][23], State[3][23], State[4][23], State[5][23], State[6][23], State[7][23]);
		Asu.Store(State[0][24], State[1][24], State[2][24], State[3][24], State[4][24], State[5][24], State[6][24], State[7][24]);
	}

	template<typename Array>
	inline static void PermuteR48P12800(std::vector<Array> &State)
	{
		ULong512 Aba(State[0][0], State[1][0], State[2][0], State[3][0], State[4][0], State[5][0], State[6][0], State[7][0]);
		ULong512 Abe(State[0][1], State[1][1], State[2][1], State[3][1], State[4][1], State[5][1], State[6][1], State[7][1]);
		ULong512 Abi(State[0][2], State[1][2], State[2][2], State[3][2], State[4][2], State[5][2], State[6][2], State[7][2]);
		ULong512 Abo(State[0][3], State[1][3], State[2][3], State[3][3], State[4][3], State[5][3], State[6][3], State[7][3]);
		ULong512 Abu(State[0][4], State[1][4], State[2][4], State[3][4], State[4][4], State[5][4], State[6][4], State[7][4]);
		ULong512 Aga(State[0][5], State[1][5], State[2][5], State[3][5], State[4][5], State[5][5], State[6][5], State[7][5]);
		ULong512 Age(State[0][6], State[1][6], State[2][6], State[3][6], State[4][6], State[5][6], State[6][6], State[7][6]);
		ULong512 Agi(State[0][7], State[1][7], State[2][7], State[3][7], State[4][7], State[5][7], State[6][7], State[7][7]);
		ULong512 Ago(State[0][8], State[1][8], State[2][8], State[3][8], State[4][8], State[5][8], State[6][8], State[7][8]);
		ULong512 Agu(State[0][9], State[1][9], State[2][9], State[3][9], State[4][9], State[5][9], State[6][9], State[7][9]);
		ULong512 Aka(State[0][10], State[1][10], State[2][10], State[3][10], State[4][10], State[5][10], State[6][10], State[7][10]);
		ULong512 Ake(State[0][11], State[1][11], State[2][11], State[3][11], State[4][11], State[5][11], State[6][11], State[7][11]);
		ULong512 Aki(State[0][12], State[1][12], State[2][12], State[3][12], State[4][12], State[5][12], State[6][12], State[7][12]);
		ULong512 Ako(State[0][13], State[1][13], State[2][13], State[3][13], State[4][13], State[5][13], State[6][13], State[7][13]);
		ULong512 Aku(State[0][14], State[1][14], State[2][14], State[3][14], State[4][14], State[5][14], State[6][14], State[7][14]);
		ULong512 Ama(State[0][15], State[1][15], State[2][15], State[3][15], State[4][15], State[5][15], State[6][15], State[7][15]);
		ULong512 Ame(State[0][16], State[1][16], State[2][16], State[3][16], State[4][16], State[5][16], State[6][16], State[7][16]);
		ULong512 Ami(State[0][17], State[1][17], State[2][17], State[3][17], State[4][17], State[5][17], State[6][17], State[7][17]);
		ULong512 Amo(State[0][18], State[1][18], State[2][18], State[3][18], State[4][18], State[5][18], State[6][18], State[7][18]);
		ULong512 Amu(State[0][19], State[1][19], State[2][19], State[3][19], State[4][19], State[5][19], State[6][19], State[7][19]);
		ULong512 Asa(State[0][20], State[1][20], State[2][20], State[3][20], State[4][20], State[5][20], State[6][20], State[7][20]);
		ULong512 Ase(State[0][21], State[1][21], State[2][21], State[3][21], State[4][21], State[5][21], State[6][21], State[7][21]);
		ULong512 Asi(State[0][22], State[1][22], State[2][22], State[3][22], State[4][22], State[5][22], State[6][22], State[7][22]);
		ULong512 Aso(State[0][23], State[1][23], State[2][23], State[3][23], State[4][23], State[5][23], State[6][23], State[7][23]);
		ULong512 Asu(State[0][24], State[1][24], State[2][24], State[3][24], State[4][24], State[5][24], State[6][24], State[7][24]);

		const static std::array<ULong512, 48> RC48 =
		{
			ULong512(0x0000000000000001ULL), ULong512(0x0000000000008082ULL), ULong512(0x800000000000808AULL), ULong512(0x8000000080008000ULL),
			ULong512(0x000000000000808BULL), ULong512(0x0000000080000001ULL), ULong512(0x8000000080008081ULL), ULong512(0x8000000000008009ULL),
			ULong512(0x000000000000008AULL), ULong512(0x0000000000000088ULL), ULong512(0x0000000080008009ULL), ULong512(0x000000008000000AULL),
			ULong512(0x000000008000808BULL), ULong512(0x800000000000008BULL), ULong512(0x8000000000008089ULL), ULong512(0x8000000000008003ULL),
			ULong512(0x8000000000008002ULL), ULong512(0x8000000000000080ULL), ULong512(0x000000000000800AULL), ULong512(0x800000008000000AULL),
			ULong512(0x8000000080008081ULL), ULong512(0x8000000000008080ULL), ULong512(0x0000000080000001ULL), ULong512(0x8000000080008008ULL),
			ULong512(0x8000000080008082ULL), ULong512(0x800000008000800AULL), ULong512(0x8000000000000003ULL), ULong512(0x8000000080000009ULL),
			ULong512(0x8000000000008082ULL), ULong512(0x0000000000008009ULL), ULong512(0x8000000000000080ULL), ULong512(0x0000000000008083ULL),
			ULong512(0x8000000000000081ULL), ULong512(0x0000000000000001ULL), ULong512(0x000000000000800BULL), ULong512(0x8000000080008001ULL),
			ULong512(0x0000000000000080ULL), ULong512(0x8000000000008000ULL), ULong512(0x8000000080008001ULL), ULong512(0x0000000000000009ULL),
			ULong512(0x800000008000808BULL), ULong512(0x0000000000000081ULL), ULong512(0x8000000000000082ULL), ULong512(0x000000008000008BULL),
			ULong512(0x8000000080008009ULL), ULong512(0x8000000080000000ULL), ULong512(0x0000000080000080ULL), ULong512(0x0000000080008003ULL)
		};

		ULong512 Ca;
		ULong512 Ce;
		ULong512 Ci;
		ULong512 Co;
		ULong512 Cu;
		ULong512 Da;
		ULong512 De;
		ULong512 Di;
		ULong512 Do;
		ULong512 Du;
		ULong512 Eba;
		ULong512 Ebe;
		ULong512 Ebi;
		ULong512 Ebo;
		ULong512 Ebu;
		ULong512 Ega;
		ULong512 Ege;
		ULong512 Egi;
		ULong512 Ego;
		ULong512 Egu;
		ULong512 Eka;
		ULong512 Eke;
		ULong512 Eki;
		ULong512 Eko;
		ULong512 Eku;
		ULong512 Ema;
		ULong512 Eme;
		ULong512 Emi;
		ULong512 Emo;
		ULong512 Emu;
		ULong512 Esa;
		ULong512 Ese;
		ULong512 Esi;
		ULong512 Eso;
		ULong512 Esu;

		for (size_t i = 0; i < 48; i += 2)
		{
			// round n
			Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
			Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
			Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
			Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
			Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
			Da = Cu ^ ULong512::RotL64(Ce, 1);
			De = Ca ^ ULong512::RotL64(Ci, 1);
			Di = Ce ^ ULong512::RotL64(Co, 1);
			Do = Ci ^ ULong512::RotL64(Cu, 1);
			Du = Co ^ ULong512::RotL64(Ca, 1);
			Aba ^= Da;
			Ca = Aba;
			Age ^= De;
			Ce = ULong512::RotL64(Age, 44);
			Aki ^= Di;
			Ci = ULong512::RotL64(Aki, 43);
			Amo ^= Do;
			Co = ULong512::RotL64(Amo, 21);
			Asu ^= Du;
			Cu = ULong512::RotL64(Asu, 14);
			Eba = Ca ^ ((~Ce) & Ci);
			Eba ^= RC48[i];
			Ebe = Ce ^ ((~Ci) & Co);
			Ebi = Ci ^ ((~Co) & Cu);
			Ebo = Co ^ ((~Cu) & Ca);
			Ebu = Cu ^ ((~Ca) & Ce);
			Abo ^= Do;
			Ca = ULong512::RotL64(Abo, 28);
			Agu ^= Du;
			Ce = ULong512::RotL64(Agu, 20);
			Aka ^= Da;
			Ci = ULong512::RotL64(Aka, 3);
			Ame ^= De;
			Co = ULong512::RotL64(Ame, 45);
			Asi ^= Di;
			Cu = ULong512::RotL64(Asi, 61);
			Ega = Ca ^ ((~Ce) & Ci);
			Ege = Ce ^ ((~Ci) & Co);
			Egi = Ci ^ ((~Co) & Cu);
			Ego = Co ^ ((~Cu) & Ca);
			Egu = Cu ^ ((~Ca) & Ce);
			Abe ^= De;
			Ca = ULong512::RotL64(Abe, 1);
			Agi ^= Di;
			Ce = ULong512::RotL64(Agi, 6);
			Ako ^= Do;
			Ci = ULong512::RotL64(Ako, 25);
			Amu ^= Du;
			Co = ULong512::RotL64(Amu, 8);
			Asa ^= Da;
			Cu = ULong512::RotL64(Asa, 18);
			Eka = Ca ^ ((~Ce) & Ci);
			Eke = Ce ^ ((~Ci) & Co);
			Eki = Ci ^ ((~Co) & Cu);
			Eko = Co ^ ((~Cu) & Ca);
			Eku = Cu ^ ((~Ca) & Ce);
			Abu ^= Du;
			Ca = ULong512::RotL64(Abu, 27);
			Aga ^= Da;
			Ce = ULong512::RotL64(Aga, 36);
			Ake ^= De;
			Ci = ULong512::RotL64(Ake, 10);
			Ami ^= Di;
			Co = ULong512::RotL64(Ami, 15);
			Aso ^= Do;
			Cu = ULong512::RotL64(Aso, 56);
			Ema = Ca ^ ((~Ce) & Ci);
			Eme = Ce ^ ((~Ci) & Co);
			Emi = Ci ^ ((~Co) & Cu);
			Emo = Co ^ ((~Cu) & Ca);
			Emu = Cu ^ ((~Ca) & Ce);
			Abi ^= Di;
			Ca = ULong512::RotL64(Abi, 62);
			Ago ^= Do;
			Ce = ULong512::RotL64(Ago, 55);
			Aku ^= Du;
			Ci = ULong512::RotL64(Aku, 39);
			Ama ^= Da;
			Co = ULong512::RotL64(Ama, 41);
			Ase ^= De;
			Cu = ULong512::RotL64(Ase, 2);
			Esa = Ca ^ ((~Ce) & Ci);
			Ese = Ce ^ ((~Ci) & Co);
			Esi = Ci ^ ((~Co) & Cu);
			Eso = Co ^ ((~Cu) & Ca);
			Esu = Cu ^ ((~Ca) & Ce);
			// round n + 1
			Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
			Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
			Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
			Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
			Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
			Da = Cu ^ ULong512::RotL64(Ce, 1);
			De = Ca ^ ULong512::RotL64(Ci, 1);
			Di = Ce ^ ULong512::RotL64(Co, 1);
			Do = Ci ^ ULong512::RotL64(Cu, 1);
			Du = Co ^ ULong512::RotL64(Ca, 1);
			Eba ^= Da;
			Ca = Eba;
			Ege ^= De;
			Ce = ULong512::RotL64(Ege, 44);
			Eki ^= Di;
			Ci = ULong512::RotL64(Eki, 43);
			Emo ^= Do;
			Co = ULong512::RotL64(Emo, 21);
			Esu ^= Du;
			Cu = ULong512::RotL64(Esu, 14);
			Aba = Ca ^ ((~Ce) & Ci);
			Aba ^= RC48[i + 1];
			Abe = Ce ^ ((~Ci) & Co);
			Abi = Ci ^ ((~Co) & Cu);
			Abo = Co ^ ((~Cu) & Ca);
			Abu = Cu ^ ((~Ca) & Ce);
			Ebo ^= Do;
			Ca = ULong512::RotL64(Ebo, 28);
			Egu ^= Du;
			Ce = ULong512::RotL64(Egu, 20);
			Eka ^= Da;
			Ci = ULong512::RotL64(Eka, 3);
			Eme ^= De;
			Co = ULong512::RotL64(Eme, 45);
			Esi ^= Di;
			Cu = ULong512::RotL64(Esi, 61);
			Aga = Ca ^ ((~Ce) & Ci);
			Age = Ce ^ ((~Ci) & Co);
			Agi = Ci ^ ((~Co) & Cu);
			Ago = Co ^ ((~Cu) & Ca);
			Agu = Cu ^ ((~Ca) & Ce);
			Ebe ^= De;
			Ca = ULong512::RotL64(Ebe, 1);
			Egi ^= Di;
			Ce = ULong512::RotL64(Egi, 6);
			Eko ^= Do;
			Ci = ULong512::RotL64(Eko, 25);
			Emu ^= Du;
			Co = ULong512::RotL64(Emu, 8);
			Esa ^= Da;
			Cu = ULong512::RotL64(Esa, 18);
			Aka = Ca ^ ((~Ce) & Ci);
			Ake = Ce ^ ((~Ci) & Co);
			Aki = Ci ^ ((~Co) & Cu);
			Ako = Co ^ ((~Cu) & Ca);
			Aku = Cu ^ ((~Ca) & Ce);
			Ebu ^= Du;
			Ca = ULong512::RotL64(Ebu, 27);
			Ega ^= Da;
			Ce = ULong512::RotL64(Ega, 36);
			Eke ^= De;
			Ci = ULong512::RotL64(Eke, 10);
			Emi ^= Di;
			Co = ULong512::RotL64(Emi, 15);
			Eso ^= Do;
			Cu = ULong512::RotL64(Eso, 56);
			Ama = Ca ^ ((~Ce) & Ci);
			Ame = Ce ^ ((~Ci) & Co);
			Ami = Ci ^ ((~Co) & Cu);
			Amo = Co ^ ((~Cu) & Ca);
			Amu = Cu ^ ((~Ca) & Ce);
			Ebi ^= Di;
			Ca = ULong512::RotL64(Ebi, 62);
			Ego ^= Do;
			Ce = ULong512::RotL64(Ego, 55);
			Eku ^= Du;
			Ci = ULong512::RotL64(Eku, 39);
			Ema ^= Da;
			Co = ULong512::RotL64(Ema, 41);
			Ese ^= De;
			Cu = ULong512::RotL64(Ese, 2);
			Asa = Ca ^ ((~Ce) & Ci);
			Ase = Ce ^ ((~Ci) & Co);
			Asi = Ci ^ ((~Co) & Cu);
			Aso = Co ^ ((~Cu) & Ca);
			Asu = Cu ^ ((~Ca) & Ce);
		}

		Aba.Store(State[0][0], State[1][0], State[2][0], State[3][0], State[4][0], State[5][0], State[6][0], State[7][0]);
		Abe.Store(State[0][1], State[1][1], State[2][1], State[3][1], State[4][1], State[5][1], State[6][1], State[7][1]);
		Abi.Store(State[0][2], State[1][2], State[2][2], State[3][2], State[4][2], State[5][2], State[6][2], State[7][2]);
		Abo.Store(State[0][3], State[1][3], State[2][3], State[3][3], State[4][3], State[5][3], State[6][3], State[7][3]);
		Abu.Store(State[0][4], State[1][4], State[2][4], State[3][4], State[4][4], State[5][4], State[6][4], State[7][4]);
		Aga.Store(State[0][5], State[1][5], State[2][5], State[3][5], State[4][5], State[5][5], State[6][5], State[7][5]);
		Age.Store(State[0][6], State[1][6], State[2][6], State[3][6], State[4][6], State[5][6], State[6][6], State[7][6]);
		Agi.Store(State[0][7], State[1][7], State[2][7], State[3][7], State[4][7], State[5][7], State[6][7], State[7][7]);
		Ago.Store(State[0][8], State[1][8], State[2][8], State[3][8], State[4][8], State[5][8], State[6][8], State[7][8]);
		Agu.Store(State[0][9], State[1][9], State[2][9], State[3][9], State[4][9], State[5][9], State[6][9], State[7][9]);
		Aka.Store(State[0][10], State[1][10], State[2][10], State[3][10], State[4][10], State[5][10], State[6][10], State[7][10]);
		Ake.Store(State[0][11], State[1][11], State[2][11], State[3][11], State[4][11], State[5][11], State[6][11], State[7][11]);
		Aki.Store(State[0][12], State[1][12], State[2][12], State[3][12], State[4][12], State[5][12], State[6][12], State[7][12]);
		Ako.Store(State[0][13], State[1][13], State[2][13], State[3][13], State[4][13], State[5][13], State[6][13], State[7][13]);
		Aku.Store(State[0][14], State[1][14], State[2][14], State[3][14], State[4][14], State[5][14], State[6][14], State[7][14]);
		Ama.Store(State[0][15], State[1][15], State[2][15], State[3][15], State[4][15], State[5][15], State[6][15], State[7][15]);
		Ame.Store(State[0][16], State[1][16], State[2][16], State[3][16], State[4][16], State[5][16], State[6][16], State[7][16]);
		Ami.Store(State[0][17], State[1][17], State[2][17], State[3][17], State[4][17], State[5][17], State[6][17], State[7][17]);
		Amo.Store(State[0][18], State[1][18], State[2][18], State[3][18], State[4][18], State[5][18], State[6][18], State[7][18]);
		Amu.Store(State[0][19], State[1][19], State[2][19], State[3][19], State[4][19], State[5][19], State[6][19], State[7][19]);
		Asa.Store(State[0][20], State[1][20], State[2][20], State[3][20], State[4][20], State[5][20], State[6][20], State[7][20]);
		Ase.Store(State[0][21], State[1][21], State[2][21], State[3][21], State[4][21], State[5][21], State[6][21], State[7][21]);
		Asi.Store(State[0][22], State[1][22], State[2][22], State[3][22], State[4][22], State[5][22], State[6][22], State[7][22]);
		Aso.Store(State[0][23], State[1][23], State[2][23], State[3][23], State[4][23], State[5][23], State[6][23], State[7][23]);
		Asu.Store(State[0][24], State[1][24], State[2][24], State[3][24], State[4][24], State[5][24], State[6][24], State[7][24]);
	}

#elif defined(__AVX2__)

	template<typename Array>
	inline static void PermuteR24P6400(std::vector<Array> &State)
	{
		ULong256 Aba(State[0][0], State[1][0], State[2][0], State[3][0]);
		ULong256 Abe(State[0][1], State[1][1], State[2][1], State[3][1]);
		ULong256 Abi(State[0][2], State[1][2], State[2][2], State[3][2]);
		ULong256 Abo(State[0][3], State[1][3], State[2][3], State[3][3]);
		ULong256 Abu(State[0][4], State[1][4], State[2][4], State[3][4]);
		ULong256 Aga(State[0][5], State[1][5], State[2][5], State[3][5]);
		ULong256 Age(State[0][6], State[1][6], State[2][6], State[3][6]);
		ULong256 Agi(State[0][7], State[1][7], State[2][7], State[3][7]);
		ULong256 Ago(State[0][8], State[1][8], State[2][8], State[3][8]);
		ULong256 Agu(State[0][9], State[1][9], State[2][9], State[3][9]);
		ULong256 Aka(State[0][10], State[1][10], State[2][10], State[3][10]);
		ULong256 Ake(State[0][11], State[1][11], State[2][11], State[3][11]);
		ULong256 Aki(State[0][12], State[1][12], State[2][12], State[3][12]);
		ULong256 Ako(State[0][13], State[1][13], State[2][13], State[3][13]);
		ULong256 Aku(State[0][14], State[1][14], State[2][14], State[3][14]);
		ULong256 Ama(State[0][15], State[1][15], State[2][15], State[3][15]);
		ULong256 Ame(State[0][16], State[1][16], State[2][16], State[3][16]);
		ULong256 Ami(State[0][17], State[1][17], State[2][17], State[3][17]);
		ULong256 Amo(State[0][18], State[1][18], State[2][18], State[3][18]);
		ULong256 Amu(State[0][19], State[1][19], State[2][19], State[3][19]);
		ULong256 Asa(State[0][20], State[1][20], State[2][20], State[3][20]);
		ULong256 Ase(State[0][21], State[1][21], State[2][21], State[3][21]);
		ULong256 Asi(State[0][22], State[1][22], State[2][22], State[3][22]);
		ULong256 Aso(State[0][23], State[1][23], State[2][23], State[3][23]);
		ULong256 Asu(State[0][24], State[1][24], State[2][24], State[3][24]);

		const static std::array<ULong256, 24> RC24 =
		{
			ULong256(0x0000000000000001ULL), ULong256(0x0000000000008082ULL), ULong256(0x800000000000808AULL), ULong256(0x8000000080008000ULL),
			ULong256(0x000000000000808BULL), ULong256(0x0000000080000001ULL), ULong256(0x8000000080008081ULL), ULong256(0x8000000000008009ULL),
			ULong256(0x000000000000008AULL), ULong256(0x0000000000000088ULL), ULong256(0x0000000080008009ULL), ULong256(0x000000008000000AULL),
			ULong256(0x000000008000808BULL), ULong256(0x800000000000008BULL), ULong256(0x8000000000008089ULL), ULong256(0x8000000000008003ULL),
			ULong256(0x8000000000008002ULL), ULong256(0x8000000000000080ULL), ULong256(0x000000000000800AULL), ULong256(0x800000008000000AULL),
			ULong256(0x8000000080008081ULL), ULong256(0x8000000000008080ULL), ULong256(0x0000000080000001ULL), ULong256(0x8000000080008008ULL)
		};

		ULong256 Ca;
		ULong256 Ce;
		ULong256 Ci;
		ULong256 Co;
		ULong256 Cu;
		ULong256 Da;
		ULong256 De;
		ULong256 Di;
		ULong256 Do;
		ULong256 Du;
		ULong256 Eba;
		ULong256 Ebe;
		ULong256 Ebi;
		ULong256 Ebo;
		ULong256 Ebu;
		ULong256 Ega;
		ULong256 Ege;
		ULong256 Egi;
		ULong256 Ego;
		ULong256 Egu;
		ULong256 Eka;
		ULong256 Eke;
		ULong256 Eki;
		ULong256 Eko;
		ULong256 Eku;
		ULong256 Ema;
		ULong256 Eme;
		ULong256 Emi;
		ULong256 Emo;
		ULong256 Emu;
		ULong256 Esa;
		ULong256 Ese;
		ULong256 Esi;
		ULong256 Eso;
		ULong256 Esu;

		for (size_t i = 0; i < 24; i += 2) 
		{
			// round n
			Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
			Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
			Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
			Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
			Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
			Da = Cu ^ ULong256::RotL64(Ce, 1);
			De = Ca ^ ULong256::RotL64(Ci, 1);
			Di = Ce ^ ULong256::RotL64(Co, 1);
			Do = Ci ^ ULong256::RotL64(Cu, 1);
			Du = Co ^ ULong256::RotL64(Ca, 1);
			Aba ^= Da;
			Ca = Aba;
			Age ^= De;
			Ce = ULong256::RotL64(Age, 44);
			Aki ^= Di;
			Ci = ULong256::RotL64(Aki, 43);
			Amo ^= Do;
			Co = ULong256::RotL64(Amo, 21);
			Asu ^= Du;
			Cu = ULong256::RotL64(Asu, 14);
			Eba = Ca ^ ((~Ce) & Ci);
			Eba ^= RC24[i];
			Ebe = Ce ^ ((~Ci) & Co);
			Ebi = Ci ^ ((~Co) & Cu);
			Ebo = Co ^ ((~Cu) & Ca);
			Ebu = Cu ^ ((~Ca) & Ce);
			Abo ^= Do;
			Ca = ULong256::RotL64(Abo, 28);
			Agu ^= Du;
			Ce = ULong256::RotL64(Agu, 20);
			Aka ^= Da;
			Ci = ULong256::RotL64(Aka, 3);
			Ame ^= De;
			Co = ULong256::RotL64(Ame, 45);
			Asi ^= Di;
			Cu = ULong256::RotL64(Asi, 61);
			Ega = Ca ^ ((~Ce) & Ci);
			Ege = Ce ^ ((~Ci) & Co);
			Egi = Ci ^ ((~Co) & Cu);
			Ego = Co ^ ((~Cu) & Ca);
			Egu = Cu ^ ((~Ca) & Ce);
			Abe ^= De;
			Ca = ULong256::RotL64(Abe, 1);
			Agi ^= Di;
			Ce = ULong256::RotL64(Agi, 6);
			Ako ^= Do;
			Ci = ULong256::RotL64(Ako, 25);
			Amu ^= Du;
			Co = ULong256::RotL64(Amu, 8);
			Asa ^= Da;
			Cu = ULong256::RotL64(Asa, 18);
			Eka = Ca ^ ((~Ce) & Ci);
			Eke = Ce ^ ((~Ci) & Co);
			Eki = Ci ^ ((~Co) & Cu);
			Eko = Co ^ ((~Cu) & Ca);
			Eku = Cu ^ ((~Ca) & Ce);
			Abu ^= Du;
			Ca = ULong256::RotL64(Abu, 27);
			Aga ^= Da;
			Ce = ULong256::RotL64(Aga, 36);
			Ake ^= De;
			Ci = ULong256::RotL64(Ake, 10);
			Ami ^= Di;
			Co = ULong256::RotL64(Ami, 15);
			Aso ^= Do;
			Cu = ULong256::RotL64(Aso, 56);
			Ema = Ca ^ ((~Ce) & Ci);
			Eme = Ce ^ ((~Ci) & Co);
			Emi = Ci ^ ((~Co) & Cu);
			Emo = Co ^ ((~Cu) & Ca);
			Emu = Cu ^ ((~Ca) & Ce);
			Abi ^= Di;
			Ca = ULong256::RotL64(Abi, 62);
			Ago ^= Do;
			Ce = ULong256::RotL64(Ago, 55);
			Aku ^= Du;
			Ci = ULong256::RotL64(Aku, 39);
			Ama ^= Da;
			Co = ULong256::RotL64(Ama, 41);
			Ase ^= De;
			Cu = ULong256::RotL64(Ase, 2);
			Esa = Ca ^ ((~Ce) & Ci);
			Ese = Ce ^ ((~Ci) & Co);
			Esi = Ci ^ ((~Co) & Cu);
			Eso = Co ^ ((~Cu) & Ca);
			Esu = Cu ^ ((~Ca) & Ce);
			// round n + 1
			Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
			Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
			Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
			Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
			Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
			Da = Cu ^ ULong256::RotL64(Ce, 1);
			De = Ca ^ ULong256::RotL64(Ci, 1);
			Di = Ce ^ ULong256::RotL64(Co, 1);
			Do = Ci ^ ULong256::RotL64(Cu, 1);
			Du = Co ^ ULong256::RotL64(Ca, 1);
			Eba ^= Da;
			Ca = Eba;
			Ege ^= De;
			Ce = ULong256::RotL64(Ege, 44);
			Eki ^= Di;
			Ci = ULong256::RotL64(Eki, 43);
			Emo ^= Do;
			Co = ULong256::RotL64(Emo, 21);
			Esu ^= Du;
			Cu = ULong256::RotL64(Esu, 14);
			Aba = Ca ^ ((~Ce) & Ci);
			Aba ^= RC24[i + 1];
			Abe = Ce ^ ((~Ci) & Co);
			Abi = Ci ^ ((~Co) & Cu);
			Abo = Co ^ ((~Cu) & Ca);
			Abu = Cu ^ ((~Ca) & Ce);
			Ebo ^= Do;
			Ca = ULong256::RotL64(Ebo, 28);
			Egu ^= Du;
			Ce = ULong256::RotL64(Egu, 20);
			Eka ^= Da;
			Ci = ULong256::RotL64(Eka, 3);
			Eme ^= De;
			Co = ULong256::RotL64(Eme, 45);
			Esi ^= Di;
			Cu = ULong256::RotL64(Esi, 61);
			Aga = Ca ^ ((~Ce) & Ci);
			Age = Ce ^ ((~Ci) & Co);
			Agi = Ci ^ ((~Co) & Cu);
			Ago = Co ^ ((~Cu) & Ca);
			Agu = Cu ^ ((~Ca) & Ce);
			Ebe ^= De;
			Ca = ULong256::RotL64(Ebe, 1);
			Egi ^= Di;
			Ce = ULong256::RotL64(Egi, 6);
			Eko ^= Do;
			Ci = ULong256::RotL64(Eko, 25);
			Emu ^= Du;
			Co = ULong256::RotL64(Emu, 8);
			Esa ^= Da;
			Cu = ULong256::RotL64(Esa, 18);
			Aka = Ca ^ ((~Ce) & Ci);
			Ake = Ce ^ ((~Ci) & Co);
			Aki = Ci ^ ((~Co) & Cu);
			Ako = Co ^ ((~Cu) & Ca);
			Aku = Cu ^ ((~Ca) & Ce);
			Ebu ^= Du;
			Ca = ULong256::RotL64(Ebu, 27);
			Ega ^= Da;
			Ce = ULong256::RotL64(Ega, 36);
			Eke ^= De;
			Ci = ULong256::RotL64(Eke, 10);
			Emi ^= Di;
			Co = ULong256::RotL64(Emi, 15);
			Eso ^= Do;
			Cu = ULong256::RotL64(Eso, 56);
			Ama = Ca ^ ((~Ce) & Ci);
			Ame = Ce ^ ((~Ci) & Co);
			Ami = Ci ^ ((~Co) & Cu);
			Amo = Co ^ ((~Cu) & Ca);
			Amu = Cu ^ ((~Ca) & Ce);
			Ebi ^= Di;
			Ca = ULong256::RotL64(Ebi, 62);
			Ego ^= Do;
			Ce = ULong256::RotL64(Ego, 55);
			Eku ^= Du;
			Ci = ULong256::RotL64(Eku, 39);
			Ema ^= Da;
			Co = ULong256::RotL64(Ema, 41);
			Ese ^= De;
			Cu = ULong256::RotL64(Ese, 2);
			Asa = Ca ^ ((~Ce) & Ci);
			Ase = Ce ^ ((~Ci) & Co);
			Asi = Ci ^ ((~Co) & Cu);
			Aso = Co ^ ((~Cu) & Ca);
			Asu = Cu ^ ((~Ca) & Ce);
		}

		Aba.Store(State[0][0], State[1][0], State[2][0], State[3][0]);
		Abe.Store(State[0][1], State[1][1], State[2][1], State[3][1]);
		Abi.Store(State[0][2], State[1][2], State[2][2], State[3][2]);
		Abo.Store(State[0][3], State[1][3], State[2][3], State[3][3]);
		Abu.Store(State[0][4], State[1][4], State[2][4], State[3][4]);
		Aga.Store(State[0][5], State[1][5], State[2][5], State[3][5]);
		Age.Store(State[0][6], State[1][6], State[2][6], State[3][6]);
		Agi.Store(State[0][7], State[1][7], State[2][7], State[3][7]);
		Ago.Store(State[0][8], State[1][8], State[2][8], State[3][8]);
		Agu.Store(State[0][9], State[1][9], State[2][9], State[3][9]);
		Aka.Store(State[0][10], State[1][10], State[2][10], State[3][10]);
		Ake.Store(State[0][11], State[1][11], State[2][11], State[3][11]);
		Aki.Store(State[0][12], State[1][12], State[2][12], State[3][12]);
		Ako.Store(State[0][13], State[1][13], State[2][13], State[3][13]);
		Aku.Store(State[0][14], State[1][14], State[2][14], State[3][14]);
		Ama.Store(State[0][15], State[1][15], State[2][15], State[3][15]);
		Ame.Store(State[0][16], State[1][16], State[2][16], State[3][16]);
		Ami.Store(State[0][17], State[1][17], State[2][17], State[3][17]);
		Amo.Store(State[0][18], State[1][18], State[2][18], State[3][18]);
		Amu.Store(State[0][19], State[1][19], State[2][19], State[3][19]);
		Asa.Store(State[0][20], State[1][20], State[2][20], State[3][20]);
		Ase.Store(State[0][21], State[1][21], State[2][21], State[3][21]);
		Asi.Store(State[0][22], State[1][22], State[2][22], State[3][22]);
		Aso.Store(State[0][23], State[1][23], State[2][23], State[3][23]);
		Asu.Store(State[0][24], State[1][24], State[2][24], State[3][24]);
	}

	template<typename Array>
	inline static void PermuteR48P6400(std::vector<Array> &State)
	{
		ULong256 Aba(State[0][0], State[1][0], State[2][0], State[3][0]);
		ULong256 Abe(State[0][1], State[1][1], State[2][1], State[3][1]);
		ULong256 Abi(State[0][2], State[1][2], State[2][2], State[3][2]);
		ULong256 Abo(State[0][3], State[1][3], State[2][3], State[3][3]);
		ULong256 Abu(State[0][4], State[1][4], State[2][4], State[3][4]);
		ULong256 Aga(State[0][5], State[1][5], State[2][5], State[3][5]);
		ULong256 Age(State[0][6], State[1][6], State[2][6], State[3][6]);
		ULong256 Agi(State[0][7], State[1][7], State[2][7], State[3][7]);
		ULong256 Ago(State[0][8], State[1][8], State[2][8], State[3][8]);
		ULong256 Agu(State[0][9], State[1][9], State[2][9], State[3][9]);
		ULong256 Aka(State[0][10], State[1][10], State[2][10], State[3][10]);
		ULong256 Ake(State[0][11], State[1][11], State[2][11], State[3][11]);
		ULong256 Aki(State[0][12], State[1][12], State[2][12], State[3][12]);
		ULong256 Ako(State[0][13], State[1][13], State[2][13], State[3][13]);
		ULong256 Aku(State[0][14], State[1][14], State[2][14], State[3][14]);
		ULong256 Ama(State[0][15], State[1][15], State[2][15], State[3][15]);
		ULong256 Ame(State[0][16], State[1][16], State[2][16], State[3][16]);
		ULong256 Ami(State[0][17], State[1][17], State[2][17], State[3][17]);
		ULong256 Amo(State[0][18], State[1][18], State[2][18], State[3][18]);
		ULong256 Amu(State[0][19], State[1][19], State[2][19], State[3][19]);
		ULong256 Asa(State[0][20], State[1][20], State[2][20], State[3][20]);
		ULong256 Ase(State[0][21], State[1][21], State[2][21], State[3][21]);
		ULong256 Asi(State[0][22], State[1][22], State[2][22], State[3][22]);
		ULong256 Aso(State[0][23], State[1][23], State[2][23], State[3][23]);
		ULong256 Asu(State[0][24], State[1][24], State[2][24], State[3][24]);

		const static std::array<ULong256, 48> RC48 =
		{
			ULong256(0x0000000000000001ULL), ULong256(0x0000000000008082ULL), ULong256(0x800000000000808AULL), ULong256(0x8000000080008000ULL),
			ULong256(0x000000000000808BULL), ULong256(0x0000000080000001ULL), ULong256(0x8000000080008081ULL), ULong256(0x8000000000008009ULL),
			ULong256(0x000000000000008AULL), ULong256(0x0000000000000088ULL), ULong256(0x0000000080008009ULL), ULong256(0x000000008000000AULL),
			ULong256(0x000000008000808BULL), ULong256(0x800000000000008BULL), ULong256(0x8000000000008089ULL), ULong256(0x8000000000008003ULL),
			ULong256(0x8000000000008002ULL), ULong256(0x8000000000000080ULL), ULong256(0x000000000000800AULL), ULong256(0x800000008000000AULL),
			ULong256(0x8000000080008081ULL), ULong256(0x8000000000008080ULL), ULong256(0x0000000080000001ULL), ULong256(0x8000000080008008ULL),
			ULong256(0x8000000080008082ULL), ULong256(0x800000008000800AULL), ULong256(0x8000000000000003ULL), ULong256(0x8000000080000009ULL),
			ULong256(0x8000000000008082ULL), ULong256(0x0000000000008009ULL), ULong256(0x8000000000000080ULL), ULong256(0x0000000000008083ULL),
			ULong256(0x8000000000000081ULL), ULong256(0x0000000000000001ULL), ULong256(0x000000000000800BULL), ULong256(0x8000000080008001ULL),
			ULong256(0x0000000000000080ULL), ULong256(0x8000000000008000ULL), ULong256(0x8000000080008001ULL), ULong256(0x0000000000000009ULL),
			ULong256(0x800000008000808BULL), ULong256(0x0000000000000081ULL), ULong256(0x8000000000000082ULL), ULong256(0x000000008000008BULL),
			ULong256(0x8000000080008009ULL), ULong256(0x8000000080000000ULL), ULong256(0x0000000080000080ULL), ULong256(0x0000000080008003ULL)
		};

		ULong256 Ca;
		ULong256 Ce;
		ULong256 Ci;
		ULong256 Co;
		ULong256 Cu;
		ULong256 Da;
		ULong256 De;
		ULong256 Di;
		ULong256 Do;
		ULong256 Du;
		ULong256 Eba;
		ULong256 Ebe;
		ULong256 Ebi;
		ULong256 Ebo;
		ULong256 Ebu;
		ULong256 Ega;
		ULong256 Ege;
		ULong256 Egi;
		ULong256 Ego;
		ULong256 Egu;
		ULong256 Eka;
		ULong256 Eke;
		ULong256 Eki;
		ULong256 Eko;
		ULong256 Eku;
		ULong256 Ema;
		ULong256 Eme;
		ULong256 Emi;
		ULong256 Emo;
		ULong256 Emu;
		ULong256 Esa;
		ULong256 Ese;
		ULong256 Esi;
		ULong256 Eso;
		ULong256 Esu;

		for (size_t i = 0; i < 48; i += 2)
		{
			// round n
			Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
			Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
			Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
			Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
			Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
			Da = Cu ^ ULong256::RotL64(Ce, 1);
			De = Ca ^ ULong256::RotL64(Ci, 1);
			Di = Ce ^ ULong256::RotL64(Co, 1);
			Do = Ci ^ ULong256::RotL64(Cu, 1);
			Du = Co ^ ULong256::RotL64(Ca, 1);
			Aba ^= Da;
			Ca = Aba;
			Age ^= De;
			Ce = ULong256::RotL64(Age, 44);
			Aki ^= Di;
			Ci = ULong256::RotL64(Aki, 43);
			Amo ^= Do;
			Co = ULong256::RotL64(Amo, 21);
			Asu ^= Du;
			Cu = ULong256::RotL64(Asu, 14);
			Eba = Ca ^ ((~Ce) & Ci);
			Eba ^= RC48[i];
			Ebe = Ce ^ ((~Ci) & Co);
			Ebi = Ci ^ ((~Co) & Cu);
			Ebo = Co ^ ((~Cu) & Ca);
			Ebu = Cu ^ ((~Ca) & Ce);
			Abo ^= Do;
			Ca = ULong256::RotL64(Abo, 28);
			Agu ^= Du;
			Ce = ULong256::RotL64(Agu, 20);
			Aka ^= Da;
			Ci = ULong256::RotL64(Aka, 3);
			Ame ^= De;
			Co = ULong256::RotL64(Ame, 45);
			Asi ^= Di;
			Cu = ULong256::RotL64(Asi, 61);
			Ega = Ca ^ ((~Ce) & Ci);
			Ege = Ce ^ ((~Ci) & Co);
			Egi = Ci ^ ((~Co) & Cu);
			Ego = Co ^ ((~Cu) & Ca);
			Egu = Cu ^ ((~Ca) & Ce);
			Abe ^= De;
			Ca = ULong256::RotL64(Abe, 1);
			Agi ^= Di;
			Ce = ULong256::RotL64(Agi, 6);
			Ako ^= Do;
			Ci = ULong256::RotL64(Ako, 25);
			Amu ^= Du;
			Co = ULong256::RotL64(Amu, 8);
			Asa ^= Da;
			Cu = ULong256::RotL64(Asa, 18);
			Eka = Ca ^ ((~Ce) & Ci);
			Eke = Ce ^ ((~Ci) & Co);
			Eki = Ci ^ ((~Co) & Cu);
			Eko = Co ^ ((~Cu) & Ca);
			Eku = Cu ^ ((~Ca) & Ce);
			Abu ^= Du;
			Ca = ULong256::RotL64(Abu, 27);
			Aga ^= Da;
			Ce = ULong256::RotL64(Aga, 36);
			Ake ^= De;
			Ci = ULong256::RotL64(Ake, 10);
			Ami ^= Di;
			Co = ULong256::RotL64(Ami, 15);
			Aso ^= Do;
			Cu = ULong256::RotL64(Aso, 56);
			Ema = Ca ^ ((~Ce) & Ci);
			Eme = Ce ^ ((~Ci) & Co);
			Emi = Ci ^ ((~Co) & Cu);
			Emo = Co ^ ((~Cu) & Ca);
			Emu = Cu ^ ((~Ca) & Ce);
			Abi ^= Di;
			Ca = ULong256::RotL64(Abi, 62);
			Ago ^= Do;
			Ce = ULong256::RotL64(Ago, 55);
			Aku ^= Du;
			Ci = ULong256::RotL64(Aku, 39);
			Ama ^= Da;
			Co = ULong256::RotL64(Ama, 41);
			Ase ^= De;
			Cu = ULong256::RotL64(Ase, 2);
			Esa = Ca ^ ((~Ce) & Ci);
			Ese = Ce ^ ((~Ci) & Co);
			Esi = Ci ^ ((~Co) & Cu);
			Eso = Co ^ ((~Cu) & Ca);
			Esu = Cu ^ ((~Ca) & Ce);
			// round n + 1
			Ca = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
			Ce = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
			Ci = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
			Co = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
			Cu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
			Da = Cu ^ ULong256::RotL64(Ce, 1);
			De = Ca ^ ULong256::RotL64(Ci, 1);
			Di = Ce ^ ULong256::RotL64(Co, 1);
			Do = Ci ^ ULong256::RotL64(Cu, 1);
			Du = Co ^ ULong256::RotL64(Ca, 1);
			Eba ^= Da;
			Ca = Eba;
			Ege ^= De;
			Ce = ULong256::RotL64(Ege, 44);
			Eki ^= Di;
			Ci = ULong256::RotL64(Eki, 43);
			Emo ^= Do;
			Co = ULong256::RotL64(Emo, 21);
			Esu ^= Du;
			Cu = ULong256::RotL64(Esu, 14);
			Aba = Ca ^ ((~Ce) & Ci);
			Aba ^= RC48[i + 1];
			Abe = Ce ^ ((~Ci) & Co);
			Abi = Ci ^ ((~Co) & Cu);
			Abo = Co ^ ((~Cu) & Ca);
			Abu = Cu ^ ((~Ca) & Ce);
			Ebo ^= Do;
			Ca = ULong256::RotL64(Ebo, 28);
			Egu ^= Du;
			Ce = ULong256::RotL64(Egu, 20);
			Eka ^= Da;
			Ci = ULong256::RotL64(Eka, 3);
			Eme ^= De;
			Co = ULong256::RotL64(Eme, 45);
			Esi ^= Di;
			Cu = ULong256::RotL64(Esi, 61);
			Aga = Ca ^ ((~Ce) & Ci);
			Age = Ce ^ ((~Ci) & Co);
			Agi = Ci ^ ((~Co) & Cu);
			Ago = Co ^ ((~Cu) & Ca);
			Agu = Cu ^ ((~Ca) & Ce);
			Ebe ^= De;
			Ca = ULong256::RotL64(Ebe, 1);
			Egi ^= Di;
			Ce = ULong256::RotL64(Egi, 6);
			Eko ^= Do;
			Ci = ULong256::RotL64(Eko, 25);
			Emu ^= Du;
			Co = ULong256::RotL64(Emu, 8);
			Esa ^= Da;
			Cu = ULong256::RotL64(Esa, 18);
			Aka = Ca ^ ((~Ce) & Ci);
			Ake = Ce ^ ((~Ci) & Co);
			Aki = Ci ^ ((~Co) & Cu);
			Ako = Co ^ ((~Cu) & Ca);
			Aku = Cu ^ ((~Ca) & Ce);
			Ebu ^= Du;
			Ca = ULong256::RotL64(Ebu, 27);
			Ega ^= Da;
			Ce = ULong256::RotL64(Ega, 36);
			Eke ^= De;
			Ci = ULong256::RotL64(Eke, 10);
			Emi ^= Di;
			Co = ULong256::RotL64(Emi, 15);
			Eso ^= Do;
			Cu = ULong256::RotL64(Eso, 56);
			Ama = Ca ^ ((~Ce) & Ci);
			Ame = Ce ^ ((~Ci) & Co);
			Ami = Ci ^ ((~Co) & Cu);
			Amo = Co ^ ((~Cu) & Ca);
			Amu = Cu ^ ((~Ca) & Ce);
			Ebi ^= Di;
			Ca = ULong256::RotL64(Ebi, 62);
			Ego ^= Do;
			Ce = ULong256::RotL64(Ego, 55);
			Eku ^= Du;
			Ci = ULong256::RotL64(Eku, 39);
			Ema ^= Da;
			Co = ULong256::RotL64(Ema, 41);
			Ese ^= De;
			Cu = ULong256::RotL64(Ese, 2);
			Asa = Ca ^ ((~Ce) & Ci);
			Ase = Ce ^ ((~Ci) & Co);
			Asi = Ci ^ ((~Co) & Cu);
			Aso = Co ^ ((~Cu) & Ca);
			Asu = Cu ^ ((~Ca) & Ce);
		}

		Aba.Store(State[0][0], State[1][0], State[2][0], State[3][0]);
		Abe.Store(State[0][1], State[1][1], State[2][1], State[3][1]);
		Abi.Store(State[0][2], State[1][2], State[2][2], State[3][2]);
		Abo.Store(State[0][3], State[1][3], State[2][3], State[3][3]);
		Abu.Store(State[0][4], State[1][4], State[2][4], State[3][4]);
		Aga.Store(State[0][5], State[1][5], State[2][5], State[3][5]);
		Age.Store(State[0][6], State[1][6], State[2][6], State[3][6]);
		Agi.Store(State[0][7], State[1][7], State[2][7], State[3][7]);
		Ago.Store(State[0][8], State[1][8], State[2][8], State[3][8]);
		Agu.Store(State[0][9], State[1][9], State[2][9], State[3][9]);
		Aka.Store(State[0][10], State[1][10], State[2][10], State[3][10]);
		Ake.Store(State[0][11], State[1][11], State[2][11], State[3][11]);
		Aki.Store(State[0][12], State[1][12], State[2][12], State[3][12]);
		Ako.Store(State[0][13], State[1][13], State[2][13], State[3][13]);
		Aku.Store(State[0][14], State[1][14], State[2][14], State[3][14]);
		Ama.Store(State[0][15], State[1][15], State[2][15], State[3][15]);
		Ame.Store(State[0][16], State[1][16], State[2][16], State[3][16]);
		Ami.Store(State[0][17], State[1][17], State[2][17], State[3][17]);
		Amo.Store(State[0][18], State[1][18], State[2][18], State[3][18]);
		Amu.Store(State[0][19], State[1][19], State[2][19], State[3][19]);
		Asa.Store(State[0][20], State[1][20], State[2][20], State[3][20]);
		Ase.Store(State[0][21], State[1][21], State[2][21], State[3][21]);
		Asi.Store(State[0][22], State[1][22], State[2][22], State[3][22]);
		Aso.Store(State[0][23], State[1][23], State[2][23], State[3][23]);
		Asu.Store(State[0][24], State[1][24], State[2][24], State[3][24]);
	}

#endif

};

NAMESPACE_DIGESTEND
#endif
