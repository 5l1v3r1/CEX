#include "FFTM12T62.h"
#include "IAeadMode.h"
#include "IDigest.h"
#include "IntUtils.h"
#include "McElieceUtils.h"
#include "MemUtils.h"
#include "SymmetricKey.h"

NAMESPACE_MCELIECE

using Cipher::Symmetric::Block::Mode::IAeadMode;
using Digest::IDigest;
using Utility::IntUtils;
using Utility::MemUtils;

const ulong FFTM12T62::ButterflyConsts[63][12] =
{
	{
		0XF00F0FF0F00F0FF0, 0XF0F00F0F0F0FF0F0, 0X0FF00FF00FF00FF0, 0XAA5555AAAA5555AA,
		0XF00F0FF0F00F0FF0, 0X33CCCC33CC3333CC, 0XFFFF0000FFFF0000, 0XCC33CC3333CC33CC,
		0X33CC33CC33CC33CC, 0X5A5A5A5A5A5A5A5A, 0XFF00FF00FF00FF00, 0XF00F0FF0F00F0FF0,
	},
	{
		0X3C3C3C3C3C3C3C3C, 0XF0F0F0F0F0F0F0F0, 0X5555AAAA5555AAAA, 0XCC3333CCCC3333CC,
		0XC33CC33CC33CC33C, 0X55555555AAAAAAAA, 0X33333333CCCCCCCC, 0X00FF00FFFF00FF00,
		0XF0F0F0F0F0F0F0F0, 0X0000000000000000, 0X0000FFFFFFFF0000, 0XF0F00F0F0F0FF0F0,
	},
	{
		0X3C3C3C3C3C3C3C3C, 0X0F0F0F0F0F0F0F0F, 0XAAAA5555AAAA5555, 0XCC3333CCCC3333CC,
		0XC33CC33CC33CC33C, 0X55555555AAAAAAAA, 0X33333333CCCCCCCC, 0XFF00FF0000FF00FF,
		0X0F0F0F0F0F0F0F0F, 0X0000000000000000, 0X0000FFFFFFFF0000, 0XF0F00F0F0F0FF0F0,
	},
	{
		0XAA55AA5555AA55AA, 0XCC33CC3333CC33CC, 0X33CCCC33CC3333CC, 0X55555555AAAAAAAA,
		0XFF0000FF00FFFF00, 0X3CC33CC3C33CC33C, 0X5555AAAA5555AAAA, 0X0FF00FF00FF00FF0,
		0XCCCC33333333CCCC, 0XF0F0F0F0F0F0F0F0, 0X00FFFF0000FFFF00, 0XC33CC33CC33CC33C,
	},
	{
		0X55AA55AAAA55AA55, 0XCC33CC3333CC33CC, 0XCC3333CC33CCCC33, 0X55555555AAAAAAAA,
		0XFF0000FF00FFFF00, 0XC33CC33C3CC33CC3, 0XAAAA5555AAAA5555, 0XF00FF00FF00FF00F,
		0X3333CCCCCCCC3333, 0X0F0F0F0F0F0F0F0F, 0XFF0000FFFF0000FF, 0XC33CC33CC33CC33C,
	},
	{
		0XAA55AA5555AA55AA, 0X33CC33CCCC33CC33, 0XCC3333CC33CCCC33, 0X55555555AAAAAAAA,
		0X00FFFF00FF0000FF, 0X3CC33CC3C33CC33C, 0X5555AAAA5555AAAA, 0X0FF00FF00FF00FF0,
		0X3333CCCCCCCC3333, 0XF0F0F0F0F0F0F0F0, 0X00FFFF0000FFFF00, 0XC33CC33CC33CC33C,
	},
	{
		0X55AA55AAAA55AA55, 0X33CC33CCCC33CC33, 0X33CCCC33CC3333CC, 0X55555555AAAAAAAA,
		0X00FFFF00FF0000FF, 0XC33CC33C3CC33CC3, 0XAAAA5555AAAA5555, 0XF00FF00FF00FF00F,
		0XCCCC33333333CCCC, 0X0F0F0F0F0F0F0F0F, 0XFF0000FFFF0000FF, 0XC33CC33CC33CC33C,
	},
	{
		0X6699669999669966, 0X33CCCC33CC3333CC, 0XA5A5A5A55A5A5A5A, 0X3C3CC3C3C3C33C3C,
		0XF00FF00F0FF00FF0, 0X55AA55AA55AA55AA, 0X3C3CC3C3C3C33C3C, 0X0F0F0F0FF0F0F0F0,
		0X55AA55AA55AA55AA, 0X33CCCC33CC3333CC, 0XF0F0F0F0F0F0F0F0, 0XA55A5AA55AA5A55A,
	},
	{
		0X9966996666996699, 0X33CCCC33CC3333CC, 0XA5A5A5A55A5A5A5A, 0X3C3CC3C3C3C33C3C,
		0X0FF00FF0F00FF00F, 0XAA55AA55AA55AA55, 0X3C3CC3C3C3C33C3C, 0XF0F0F0F00F0F0F0F,
		0XAA55AA55AA55AA55, 0XCC3333CC33CCCC33, 0X0F0F0F0F0F0F0F0F, 0XA55A5AA55AA5A55A,
	},
	{
		0X6699669999669966, 0X33CCCC33CC3333CC, 0X5A5A5A5AA5A5A5A5, 0XC3C33C3C3C3CC3C3,
		0X0FF00FF0F00FF00F, 0XAA55AA55AA55AA55, 0XC3C33C3C3C3CC3C3, 0X0F0F0F0FF0F0F0F0,
		0XAA55AA55AA55AA55, 0X33CCCC33CC3333CC, 0XF0F0F0F0F0F0F0F0, 0XA55A5AA55AA5A55A,
	},
	{
		0X9966996666996699, 0X33CCCC33CC3333CC, 0X5A5A5A5AA5A5A5A5, 0XC3C33C3C3C3CC3C3,
		0XF00FF00F0FF00FF0, 0X55AA55AA55AA55AA, 0XC3C33C3C3C3CC3C3, 0XF0F0F0F00F0F0F0F,
		0X55AA55AA55AA55AA, 0XCC3333CC33CCCC33, 0X0F0F0F0F0F0F0F0F, 0XA55A5AA55AA5A55A,
	},
	{
		0X6699669999669966, 0XCC3333CC33CCCC33, 0X5A5A5A5AA5A5A5A5, 0X3C3CC3C3C3C33C3C,
		0X0FF00FF0F00FF00F, 0X55AA55AA55AA55AA, 0X3C3CC3C3C3C33C3C, 0X0F0F0F0FF0F0F0F0,
		0X55AA55AA55AA55AA, 0X33CCCC33CC3333CC, 0XF0F0F0F0F0F0F0F0, 0XA55A5AA55AA5A55A,
	},
	{
		0X9966996666996699, 0XCC3333CC33CCCC33, 0X5A5A5A5AA5A5A5A5, 0X3C3CC3C3C3C33C3C,
		0XF00FF00F0FF00FF0, 0XAA55AA55AA55AA55, 0X3C3CC3C3C3C33C3C, 0XF0F0F0F00F0F0F0F,
		0XAA55AA55AA55AA55, 0XCC3333CC33CCCC33, 0X0F0F0F0F0F0F0F0F, 0XA55A5AA55AA5A55A,
	},
	{
		0X6699669999669966, 0XCC3333CC33CCCC33, 0XA5A5A5A55A5A5A5A, 0XC3C33C3C3C3CC3C3,
		0XF00FF00F0FF00FF0, 0XAA55AA55AA55AA55, 0XC3C33C3C3C3CC3C3, 0X0F0F0F0FF0F0F0F0,
		0XAA55AA55AA55AA55, 0X33CCCC33CC3333CC, 0XF0F0F0F0F0F0F0F0, 0XA55A5AA55AA5A55A,
	},
	{
		0X9966996666996699, 0XCC3333CC33CCCC33, 0XA5A5A5A55A5A5A5A, 0XC3C33C3C3C3CC3C3,
		0X0FF00FF0F00FF00F, 0X55AA55AA55AA55AA, 0XC3C33C3C3C3CC3C3, 0XF0F0F0F00F0F0F0F,
		0X55AA55AA55AA55AA, 0XCC3333CC33CCCC33, 0X0F0F0F0F0F0F0F0F, 0XA55A5AA55AA5A55A,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X6996699669966996, 0X00FFFF0000FFFF00,
		0XFF00FF00FF00FF00, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X6996699669966996, 0X00FFFF0000FFFF00,
		0X00FF00FF00FF00FF, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X6996699669966996, 0XFF0000FFFF0000FF,
		0X00FF00FF00FF00FF, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X6996699669966996, 0XFF0000FFFF0000FF,
		0XFF00FF00FF00FF00, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X9669966996699669, 0XFF0000FFFF0000FF,
		0X00FF00FF00FF00FF, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X9669966996699669, 0XFF0000FFFF0000FF,
		0XFF00FF00FF00FF00, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X9669966996699669, 0X00FFFF0000FFFF00,
		0XFF00FF00FF00FF00, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X6996699669966996, 0X9669966996699669, 0X00FFFF0000FFFF00,
		0X00FF00FF00FF00FF, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X9669966996699669, 0X00FFFF0000FFFF00,
		0XFF00FF00FF00FF00, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X9669966996699669, 0X00FFFF0000FFFF00,
		0X00FF00FF00FF00FF, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X9669966996699669, 0XFF0000FFFF0000FF,
		0X00FF00FF00FF00FF, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X9669966996699669, 0XFF0000FFFF0000FF,
		0XFF00FF00FF00FF00, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X6996699669966996, 0XFF0000FFFF0000FF,
		0X00FF00FF00FF00FF, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X6996699669966996, 0XFF0000FFFF0000FF,
		0XFF00FF00FF00FF00, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X6996699669966996, 0X00FFFF0000FFFF00,
		0XFF00FF00FF00FF00, 0X0FF00FF0F00FF00F, 0X0F0FF0F0F0F00F0F, 0XC33C3CC33CC3C33C,
		0XC33C3CC33CC3C33C, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X9669699696696996, 0X9669966996699669, 0X6996699669966996, 0X00FFFF0000FFFF00,
		0X00FF00FF00FF00FF, 0XF00FF00F0FF00FF0, 0XF0F00F0F0F0FF0F0, 0X3CC3C33CC33C3CC3,
		0X3CC3C33CC33C3CC3, 0XA55A5AA55AA5A55A, 0XC33C3CC33CC3C33C, 0X3CC3C33C3CC3C33C,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	},
	{
		0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
		0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
		0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
	}
};

//~~~Public Functions~~~//

bool FFTM12T62::Decrypt(std::vector<byte> &E, const std::vector<byte> &PrivateKey, const std::vector<byte> &S)
{
	size_t i;
	ulong diff;
	ulong t;

	std::array<ulong, CND_SIZE / 8> cond;

	IntUtils::BlockToLe(PrivateKey, IRR_SIZE, cond, 0, CND_SIZE);
	std::vector<ulong> recv(64);
	PreProcess(recv, S);
	McElieceUtils::BenesCompact(recv, cond, 1);

	// scaling
	std::array<std::array<ulong, M>, 64> inverse;
	std::array<std::array<ulong, M>, 64> scaled;
	Scaling(scaled, inverse, PrivateKey, recv);

	// transposed FFT
	std::array<std::array<ulong, M>, 2> sPriv;
	TransposedFFT::Transform(sPriv, scaled);
	SyndromeAdjust(sPriv);

	// Berlekamp Massey
	std::array<ulong, M> locator;
	std::memset(&locator[0], byte(0), locator.size() * sizeof(ulong));
	BerlekampMassey(locator, sPriv);

	// additive FFT
	std::array<std::array<ulong, M>, 64> eval;
	AdditiveFFT::Transform(eval, locator);

	std::array<ulong, 64> error;
	for (i = 0; i < 64; i++)
	{
		error[i] = McElieceUtils::Or(eval[i], M);
		error[i] = ~error[i];
	}

	// re-encrypt
	ScalingInverse(scaled, inverse, error);
	std::array<std::array<ulong, M>, 2> sPrivCmp;
	TransposedFFT::Transform(sPrivCmp, scaled);
	SyndromeAdjust(sPrivCmp);

	diff = 0;
	diff |= sPriv[0][0] ^ sPrivCmp[0][0];
	diff |= sPriv[0][1] ^ sPrivCmp[0][1];
	diff |= sPriv[0][2] ^ sPrivCmp[0][2];
	diff |= sPriv[0][3] ^ sPrivCmp[0][3];
	diff |= sPriv[0][4] ^ sPrivCmp[0][4];
	diff |= sPriv[0][5] ^ sPrivCmp[0][5];
	diff |= sPriv[0][6] ^ sPrivCmp[0][6];
	diff |= sPriv[0][7] ^ sPrivCmp[0][7];
	diff |= sPriv[0][8] ^ sPrivCmp[0][8];
	diff |= sPriv[0][9] ^ sPrivCmp[0][9];
	diff |= sPriv[0][10] ^ sPrivCmp[0][10];
	diff |= sPriv[0][11] ^ sPrivCmp[0][11];
	diff |= sPriv[1][0] ^ sPrivCmp[1][0];
	diff |= sPriv[1][1] ^ sPrivCmp[1][1];
	diff |= sPriv[1][2] ^ sPrivCmp[1][2];
	diff |= sPriv[1][3] ^ sPrivCmp[1][3];
	diff |= sPriv[1][4] ^ sPrivCmp[1][4];
	diff |= sPriv[1][5] ^ sPrivCmp[1][5];
	diff |= sPriv[1][6] ^ sPrivCmp[1][6];
	diff |= sPriv[1][7] ^ sPrivCmp[1][7];
	diff |= sPriv[1][8] ^ sPrivCmp[1][8];
	diff |= sPriv[1][9] ^ sPrivCmp[1][9];
	diff |= sPriv[1][10] ^ sPrivCmp[1][10];
	diff |= sPriv[1][11] ^ sPrivCmp[1][11];
	diff |= diff >> 32;
	diff |= diff >> 16;
	diff |= diff >> 8;
	t = diff & 0xFF;

	// compact and store
	McElieceUtils::BenesCompact(error, cond, 0);
	IntUtils::LeToBlock(error, 0, E, 0, error.size() * sizeof(ulong));

	t |= McElieceUtils::Weight(error) ^ T;
	t -= 1;
	t >>= 63;

	return (t - 1 == 0) ? true : false;
}

void FFTM12T62::Encrypt(std::vector<byte> &S, std::vector<byte> &E, const std::vector<byte> &PublicKey, std::unique_ptr<IPrng> &Random)
{
	GenE(E, Random);
	Syndrome(S, PublicKey, E);
}

bool FFTM12T62::Generate(std::vector<byte> &PublicKey, std::vector<byte> &PrivateKey, std::unique_ptr<IPrng> &Random)
{
	size_t ctr;

	for (ctr = 0; ctr < GEN_MAXR; ++ctr)
	{
		SkGen(PrivateKey, Random);

		if (PkGen(PublicKey, PrivateKey) == 0) 
		{
			break;
		}
	}

	return (ctr < GEN_MAXR) ? true : false;
}

//~~~Private Functions~~~//

//~~~Decrypt~~~//

void FFTM12T62::BerlekampMassey(std::array<ulong, M> &Output, std::array<std::array<ulong, M>, 2> &Input)
{
	ushort b;
	ushort bInv;
	ushort d;
	ushort L;
	ushort mask16b;
	ushort N;
	ushort r;
	ulong maskLeq;
	ulong maskNz;
	std::array<ulong, M> B;
	std::array<ulong, M> prod;
	std::array<ulong, M> tmpIn;
	std::array<ulong, M> rVec;
	std::array<ulong, M> tmpC;

	Output[0] = 1;
	MemUtils::Copy(Output, 0, B, 0, M * sizeof(ulong));
	Output[0] <<= 63;
	B[0] <<= 62;
	b = 1;
	L = 0;

	for (N = 0; N < T * 2; N++)
	{
		// computing d
		if (N < 64)
		{
			tmpIn[0] = Input[0][0] << (63 - N);
			tmpIn[1] = Input[0][1] << (63 - N);
			tmpIn[2] = Input[0][2] << (63 - N);
			tmpIn[3] = Input[0][3] << (63 - N);
			tmpIn[4] = Input[0][4] << (63 - N);
			tmpIn[5] = Input[0][5] << (63 - N);
			tmpIn[6] = Input[0][6] << (63 - N);
			tmpIn[7] = Input[0][7] << (63 - N);
			tmpIn[8] = Input[0][8] << (63 - N);
			tmpIn[9] = Input[0][9] << (63 - N);
			tmpIn[10] = Input[0][10] << (63 - N);
			tmpIn[11] = Input[0][11] << (63 - N);
		}
		else
		{
			tmpIn[0] = (Input[0][0] >> (N - 63)) | (Input[1][0] << (127 - N));
			tmpIn[1] = (Input[0][1] >> (N - 63)) | (Input[1][1] << (127 - N));
			tmpIn[2] = (Input[0][2] >> (N - 63)) | (Input[1][2] << (127 - N));
			tmpIn[3] = (Input[0][3] >> (N - 63)) | (Input[1][3] << (127 - N));
			tmpIn[4] = (Input[0][4] >> (N - 63)) | (Input[1][4] << (127 - N));
			tmpIn[5] = (Input[0][5] >> (N - 63)) | (Input[1][5] << (127 - N));
			tmpIn[6] = (Input[0][6] >> (N - 63)) | (Input[1][6] << (127 - N));
			tmpIn[7] = (Input[0][7] >> (N - 63)) | (Input[1][7] << (127 - N));
			tmpIn[8] = (Input[0][8] >> (N - 63)) | (Input[1][8] << (127 - N));
			tmpIn[9] = (Input[0][9] >> (N - 63)) | (Input[1][9] << (127 - N));
			tmpIn[10] = (Input[0][10] >> (N - 63)) | (Input[1][10] << (127 - N));
			tmpIn[11] = (Input[0][11] >> (N - 63)) | (Input[1][11] << (127 - N));
		}

		McElieceUtils::Multiply(prod, Output, tmpIn);
		d = McElieceUtils::Reduce(prod, M);

		// 3 cases
		bInv = McElieceUtils::Invert(b, M);
		r = McElieceUtils::Multiply(d, bInv, M);
		McElieceUtils::Insert(rVec, r);
		McElieceUtils::Multiply(tmpC, rVec, B);

		tmpC[0] ^= Output[0];
		tmpC[1] ^= Output[1];
		tmpC[2] ^= Output[2];
		tmpC[3] ^= Output[3];
		tmpC[4] ^= Output[4];
		tmpC[5] ^= Output[5];
		tmpC[6] ^= Output[6];
		tmpC[7] ^= Output[7];
		tmpC[8] ^= Output[8];
		tmpC[9] ^= Output[9];
		tmpC[10] ^= Output[10];
		tmpC[11] ^= Output[11];

		maskNz = McElieceUtils::MaskNonZero64(d);
		maskLeq = McElieceUtils::MaskLeq64(L * 2, N);
		mask16b = (maskNz & maskLeq) & 0xFFFF;

		McElieceUtils::CMov(Output, B, maskNz & maskLeq);
		McElieceUtils::Copy(tmpC, Output);

		b = (d & mask16b) | (b & ~mask16b);
		L = ((N + 1 - L) & mask16b) | (L & ~mask16b);

		B[0] >>= 1;
		B[1] >>= 1;
		B[2] >>= 1;
		B[3] >>= 1;
		B[4] >>= 1;
		B[5] >>= 1;
		B[6] >>= 1;
		B[7] >>= 1;
		B[8] >>= 1;
		B[9] >>= 1;
		B[10] >>= 1;
		B[11] >>= 1;
	}

	Output[0] >>= 64 - (T + 1);
	Output[1] >>= 64 - (T + 1);
	Output[2] >>= 64 - (T + 1);
	Output[3] >>= 64 - (T + 1);
	Output[4] >>= 64 - (T + 1);
	Output[5] >>= 64 - (T + 1);
	Output[6] >>= 64 - (T + 1);
	Output[7] >>= 64 - (T + 1);
	Output[8] >>= 64 - (T + 1);
	Output[9] >>= 64 - (T + 1);
	Output[10] >>= 64 - (T + 1);
	Output[11] >>= 64 - (T + 1);
}

void FFTM12T62::PreProcess(std::vector<ulong> &Received, const std::vector<byte> &S)
{
	IntUtils::BlockToLe(S, 0, Received, 0, SECRET_SIZE - 5);

	Received[SECRET_SIZE / 8] <<= 8;
	Received[SECRET_SIZE / 8] |= S[((SECRET_SIZE / 8) * 8) + 4];
	Received[SECRET_SIZE / 8] <<= 8;
	Received[SECRET_SIZE / 8] |= S[((SECRET_SIZE / 8) * 8) + 3];
	Received[SECRET_SIZE / 8] <<= 8;
	Received[SECRET_SIZE / 8] |= S[((SECRET_SIZE / 8) * 8) + 2];
	Received[SECRET_SIZE / 8] <<= 8;
	Received[SECRET_SIZE / 8] |= S[((SECRET_SIZE / 8) * 8) + 1];
	Received[SECRET_SIZE / 8] <<= 8;
	Received[SECRET_SIZE / 8] |= S[((SECRET_SIZE / 8) * 8)];
}

void FFTM12T62::Scaling(std::array<std::array<ulong, M>, 64> &Output, std::array<std::array<ulong, M>, 64> &Inverse, const std::vector<byte> &PrivateKey, std::vector<ulong> &Received)
{
	int i;
	std::array<ulong, M> skInt;
	std::array<std::array<ulong, M>, 64> eval;
	std::array<ulong, M> tmp;

	// computing inverses
	MemUtils::Copy(PrivateKey, 0, skInt, 0, M * sizeof(ulong));
	AdditiveFFT::Transform(eval, skInt);
	Square(eval[0], eval[0]);
	McElieceUtils::Copy(eval[0], Inverse[0]);

	for (i = 1; i < 64; i++)
	{
		Square(eval[i], eval[i]);
		McElieceUtils::Multiply(Inverse[i], Inverse[i - 1], eval[i]);
	}

	Invert(tmp, Inverse[63]);

	for (i = 62; i >= 0; i--)
	{
		McElieceUtils::Multiply(Inverse[i + 1], tmp, Inverse[i]);
		McElieceUtils::Multiply(tmp, tmp, eval[i + 1]);
	}

	McElieceUtils::Copy(tmp, Inverse[0]);

	for (i = 0; i < 64; i++)
	{
		Output[i][0] = Inverse[i][0] & Received[i];
		Output[i][1] = Inverse[i][1] & Received[i];
		Output[i][2] = Inverse[i][2] & Received[i];
		Output[i][3] = Inverse[i][3] & Received[i];
		Output[i][4] = Inverse[i][4] & Received[i];
		Output[i][5] = Inverse[i][5] & Received[i];
		Output[i][6] = Inverse[i][6] & Received[i];
		Output[i][7] = Inverse[i][7] & Received[i];
		Output[i][8] = Inverse[i][8] & Received[i];
		Output[i][9] = Inverse[i][9] & Received[i];
		Output[i][10] = Inverse[i][10] & Received[i];
		Output[i][11] = Inverse[i][11] & Received[i];
	}
}

void FFTM12T62::ScalingInverse(std::array<std::array<ulong, M>, 64> &Output, std::array<std::array<ulong, M>, 64> &Inverse, std::array<ulong, 64> &Received)
{
	for (size_t i = 0; i < 64; i++)
	{
		Output[i][0] = Inverse[i][0] & Received[i];
		Output[i][1] = Inverse[i][1] & Received[i];
		Output[i][2] = Inverse[i][2] & Received[i];
		Output[i][3] = Inverse[i][3] & Received[i];
		Output[i][4] = Inverse[i][4] & Received[i];
		Output[i][5] = Inverse[i][5] & Received[i];
		Output[i][6] = Inverse[i][6] & Received[i];
		Output[i][7] = Inverse[i][7] & Received[i];
		Output[i][8] = Inverse[i][8] & Received[i];
		Output[i][9] = Inverse[i][9] & Received[i];
		Output[i][10] = Inverse[i][10] & Received[i];
		Output[i][11] = Inverse[i][11] & Received[i];
	}
}

void FFTM12T62::SyndromeAdjust(std::array<std::array<ulong, M>, 2> &Output)
{
	const size_t SASHFT = (128 - T * 2);

	Output[1][0] <<= SASHFT;
	Output[1][0] >>= SASHFT;
	Output[1][1] <<= SASHFT;
	Output[1][1] >>= SASHFT;
	Output[1][2] <<= SASHFT;
	Output[1][2] >>= SASHFT;
	Output[1][3] <<= SASHFT;
	Output[1][3] >>= SASHFT;
	Output[1][4] <<= SASHFT;
	Output[1][4] >>= SASHFT;
	Output[1][5] <<= SASHFT;
	Output[1][5] >>= SASHFT;
	Output[1][6] <<= SASHFT;
	Output[1][6] >>= SASHFT;
	Output[1][7] <<= SASHFT;
	Output[1][7] >>= SASHFT;
	Output[1][8] <<= SASHFT;
	Output[1][8] >>= SASHFT;
	Output[1][9] <<= SASHFT;
	Output[1][9] >>= SASHFT;
	Output[1][10] <<= SASHFT;
	Output[1][10] >>= SASHFT;
	Output[1][11] <<= SASHFT;
	Output[1][11] >>= SASHFT;
}

//~~~Encrypt~~~//

void FFTM12T62::GenE(std::vector<byte> &E, std::unique_ptr<IPrng> &Random)
{
	size_t i;
	size_t j;
	size_t eq;
	ulong mask;
	std::vector<ushort> ind(T);

	while (1)
	{
		Random->Fill(ind, 0, ind.size());

		for (i = 0; i < T; i++) 
		{
			ind[i] &= ((ushort)1 << M) - 1;
		}

		eq = 0;
		for (i = 1; i < T; i++)
		{
			for (j = 0; j < i; j++)
			{
				if (ind[i] == ind[j])
				{
					eq = 1;
				}
			}
		}

		if (eq == 0)
			break;
	}

	std::array<ulong, T> val;
	for (j = 0; j < T; j++)
	{
		val[j] = ((ulong)1 << (ind[j] & 63));
	}

	std::array<ulong, 64> eInt;
	for (i = 0; i < 64; i++)
	{
		eInt[i] = 0;
		for (j = 0; j < T; j++)
		{
			mask = i ^ (ind[j] >> 6);
			mask -= 1;
			mask >>= 63;
			mask = ~mask + 1;
			eInt[i] |= val[j] & mask;
		}
	}

	IntUtils::LeToBlock(eInt, 0, E, 0, eInt.size() * sizeof(ulong));
}

void FFTM12T62::Syndrome(std::vector<byte> &S, const std::vector<byte> &PublicKey, const std::vector<byte> &E)
{
	const size_t ARRSZE = ((PKN_COLS + 63) / 64); // TODO: intrinsics
	const size_t COLSZE = PKN_COLS / 8;

	std::array<ulong, ARRSZE> eInt;
	MemUtils::Copy(E, SECRET_SIZE, eInt, 0, COLSZE);
	std::array<ulong, ARRSZE> rowInt;
	std::array<ulong, 8> tmp;
	int t;
	byte b;

	for (size_t i = 0; i < PKN_ROWS; i += 8)
	{
		for (t = 0; t < 8; t++) 
		{
			rowInt[ARRSZE - 1] = 0;
			MemUtils::Copy(PublicKey, ((i + t) * COLSZE), rowInt, 0, COLSZE);
			tmp[t] = 0;

			for (size_t j = 0; j < ARRSZE; j++)
			{
				tmp[t] ^= eInt[j] & rowInt[j];
			}
		}

		b = 0;

		for (t = 7; t >= 0; t--)
		{
			tmp[t] ^= (tmp[t] >> 32);
			tmp[t] ^= (tmp[t] >> 16);
			tmp[t] ^= (tmp[t] >> 8);
			tmp[t] ^= (tmp[t] >> 4);
		}

		for (t = 7; t >= 0; t--)
		{
			b <<= 1;
			b |= (0x6996 >> (tmp[t] & 0xF)) & 1;
		}

		S[i / 8] = E[i / 8] ^ b;
	}
}

//~~~KeyGen~~~//

int FFTM12T62::IrrGen(std::array<ushort, T + 1> &Output, std::vector<ushort> &F)
{
	size_t c;
	size_t i;
	size_t j;
	size_t k;
	ushort inverse;
	ushort mask;
	ushort t;
	std::array<std::array<ushort, T>, T + 1> mat;

	// fill matrix
	mat[0][0] = 1;
	for (i = 1; i < T; i++)
	{
		mat[0][i] = 0;
	}
	for (i = 0; i < T; i++)
	{
		mat[1][i] = F[i];
	}
	for (j = 2; j <= T; j++) 
	{
		MatrixMultiply(mat[j], mat[j - 1], F);
	}

	// gaussian
	for (j = 0; j < T; j++)
	{
		for (k = j + 1; k < T; k++)
		{
			mask = McElieceUtils::Diff(mat[j][j], mat[j][k]);

			for (c = 0; c < T + 1; c++) 
			{
				mat[c][j] ^= mat[c][k] & mask;
			}
		}

		// return if not invertible
		if (mat[j][j] == 0) 
		{
			return -1;
		}

		// compute inverse
		inverse = McElieceUtils::Invert(mat[j][j], M);

		for (c = 0; c < T + 1; c++) 
		{
			mat[c][j] = McElieceUtils::Multiply(mat[c][j], inverse, M);
		}

		for (k = 0; k < T; k++)
		{
			t = mat[j][k];

			if (k != j)
			{
				for (c = 0; c < T + 1; c++)
				{
					mat[c][k] ^= McElieceUtils::Multiply(mat[c][j], t, M);
				}
			}
		}
	}

	for (i = 0; i < T; i++) 
	{
		Output[i] = mat[T][i];
	}

	Output[T] = 1;

	return 0;
}

void FFTM12T62::SkGen(std::vector<byte> &PrivateKey, std::unique_ptr<Prng::IPrng> &Random)
{
	size_t i;
	std::array<ushort, T + 1> irr;
	std::vector<ushort> f(T);

	while (1)
	{
		Random->Fill(f, 0, f.size());

		for (i = 0; i < T; i++) 
		{
			f[i] &= ((ushort)1 << M) - 1;
		}

		if (IrrGen(irr, f) == 0)
		{
			break;
		}
	}

	std::array<ulong, M> skInt;
	for (i = 0; i < M; i++)
	{
		skInt[i] = 0;
		for (int j = (int)irr.size() - 1; j >= 0; j--)
		{
			skInt[i] <<= 1;
			skInt[i] |= (irr[j] >> i) & 1;
		}

		IntUtils::Le64ToBytes(skInt[i], PrivateKey, i * 8);
	}

	std::vector<ulong> cond(CND_SIZE / 8);
	Random->Fill(cond, 0, cond.size());

	for (i = 0; i < CND_SIZE / 8; i++)
	{
		IntUtils::Le64ToBytes(cond[i], PrivateKey, IRR_SIZE + i * 8);
	}
}

int FFTM12T62::PkGen(std::vector<byte> &PublicKey, const std::vector<byte> &PrivateKey)
{
	size_t c;
	size_t i;
	size_t j;
	size_t k;
	size_t row;
	size_t tail;
	ulong mask;
	ulong u;
	std::array<ulong, M> skInt;

	// compute the inverses
	for (i = 0; i < M; i++)
	{
		skInt[i] = IntUtils::LeBytesTo64(PrivateKey, i * 8);
	}

	std::array<std::array<ulong, M>, 64> eval;
	std::array<std::array<ulong, M>, 64> inverse;
	AdditiveFFT::Transform(eval, skInt);
	McElieceUtils::Copy(eval[0], inverse[0]);

	for (i = 1; i < 64; i++) 
	{
		McElieceUtils::Multiply(inverse[i], inverse[i - 1], eval[i]);
	}

	std::array<ulong, M> tmp;
	Invert(tmp, inverse[63]);

	i = 63;
	while (i-- != 0)
	{
		McElieceUtils::Multiply(inverse[i + 1], tmp, inverse[i]);
		McElieceUtils::Multiply(tmp, tmp, eval[i + 1]);
	}

	McElieceUtils::Copy(tmp, inverse[0]);
	std::array<std::array<ulong, 64>, PKN_ROWS> mat;

	// fill matrix 
	for (j = 0; j < 64; j++)
	{
		for (k = 0; k < M; k++) 
		{
			mat[k][j] = inverse[j][k];
		}
	}

	static const ulong GfPoints[64][12] =
	{
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0X0000000000000000,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		},
		{
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF,
			0XFFFFFFFFFFFFFFFF, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000, 0XFFFF0000FFFF0000,
			0XFF00FF00FF00FF00, 0XF0F0F0F0F0F0F0F0, 0XCCCCCCCCCCCCCCCC, 0XAAAAAAAAAAAAAAAA,
		}
	};

	for (i = 1; i < T; i++)
	{
		for (j = 0; j < 64; j++)
		{
			McElieceUtils::Multiply(inverse[j], inverse[j], GfPoints[j]);

			for (k = 0; k < M; k++)
			{
				mat[i * M + k][j] = inverse[j][k];
			}
		}
	}

	// permute 
	std::array<ulong, CND_SIZE / 8> cond;
	for (i = 0; i < CND_SIZE / 8; i++)
	{
		cond[i] = IntUtils::LeBytesTo64(PrivateKey, IRR_SIZE + i * 8);
	}

	for (i = 0; i < PKN_ROWS; i++)
	{
		McElieceUtils::BenesCompact(mat[i], cond, 0);
	}

	// gaussian elimination 
	for (i = 0; i < M; i++)
	{
		for (j = 0; j < 64; j++)
		{
			row = i * 64 + j;

			if (row >= PKN_ROWS)
			{
				break;
			}

			for (k = row + 1; k < PKN_ROWS; k++)
			{
				mask = mat[row][i] ^ mat[k][i];
				mask >>= j;
				mask &= 1;
				mask = ~mask + 1;

				for (c = 0; c < 64; c++)
				{
					mat[row][c] ^= mat[k][c] & mask;
				}
			}

			// return if not invertible
			if (((mat[row][i] >> j) & 1) == 0) 
			{
				return -1;
			}

			for (k = 0; k < PKN_ROWS; k++)
			{
				if (k != row)
				{
					mask = mat[k][i] >> j;
					mask &= 1;
					mask = ~mask + 1;

					for (c = 0; c < 64; c++)
					{
						mat[k][c] ^= mat[row][c] & mask;
					}
				}
			}
		}
	}

	// store pk
	tail = (PKN_ROWS & 63) >> 3;
	size_t pos = 0;

	for (i = 0; i < PKN_ROWS; i++)
	{
		u = mat[i][(PKN_ROWS + 63) / 64 - 1];

		for (k = tail; k < 8; k++)
		{
			PublicKey[pos + (k - tail)] = (u >> (8 * k)) & 0xFF;
		}

		pos += 8 - tail;

		for (j = M; j < 64; j++)
		{
			IntUtils::Le64ToBytes(mat[i][j], PublicKey, pos);
			pos += 8;
		}
	}

	return 0;
}

//~~~FFT~~~//

void FFTM12T62::AdditiveFFT::Transform(std::array<std::array<ulong, M>, 64> &Output, std::array<ulong, M> &Input)
{
	RadixConversions(Input);
	Butterflies(Output, Input);
}

void FFTM12T62::AdditiveFFT::Butterflies(std::array<std::array<ulong, M>, 64> &Output, std::array<ulong, M> &Input)
{
	size_t b;
	size_t i;
	size_t j;
	size_t k;
	size_t s;
	size_t constsPos;

	static const byte ButterflyReverse[64] =
	{
		0, 32, 16, 48, 8, 40, 24, 56,
		4, 36, 20, 52, 12, 44, 28, 60,
		2, 34, 18, 50, 10, 42, 26, 58,
		6, 38, 22, 54, 14, 46, 30, 62,
		1, 33, 17, 49, 9, 41, 25, 57,
		5, 37, 21, 53, 13, 45, 29, 61,
		3, 35, 19, 51, 11, 43, 27, 59,
		7, 39, 23, 55, 15, 47, 31, 63
	};

	// broadcast
	for (j = 0; j < 64; j++)
	{
		Output[j][0] = (Input[0] >> ButterflyReverse[j]) & 1;
		Output[j][0] = ~Output[j][0] + 1;
		Output[j][1] = (Input[1] >> ButterflyReverse[j]) & 1;
		Output[j][1] = ~Output[j][1] + 1;
		Output[j][2] = (Input[2] >> ButterflyReverse[j]) & 1;
		Output[j][2] = ~Output[j][2] + 1;
		Output[j][3] = (Input[3] >> ButterflyReverse[j]) & 1;
		Output[j][3] = ~Output[j][3] + 1;
		Output[j][4] = (Input[4] >> ButterflyReverse[j]) & 1;
		Output[j][4] = ~Output[j][4] + 1;
		Output[j][5] = (Input[5] >> ButterflyReverse[j]) & 1;
		Output[j][5] = ~Output[j][5] + 1;
		Output[j][6] = (Input[6] >> ButterflyReverse[j]) & 1;
		Output[j][6] = ~Output[j][6] + 1;
		Output[j][7] = (Input[7] >> ButterflyReverse[j]) & 1;
		Output[j][7] = ~Output[j][7] + 1;
		Output[j][8] = (Input[8] >> ButterflyReverse[j]) & 1;
		Output[j][8] = ~Output[j][8] + 1;
		Output[j][9] = (Input[9] >> ButterflyReverse[j]) & 1;
		Output[j][9] = ~Output[j][9] + 1;
		Output[j][10] = (Input[10] >> ButterflyReverse[j]) & 1;
		Output[j][10] = ~Output[j][10] + 1;
		Output[j][11] = (Input[11] >> ButterflyReverse[j]) & 1;
		Output[j][11] = ~Output[j][11] + 1;
	}

	constsPos = 0;
	std::array<ulong, M> tmp;

	// butterflies
	for (i = 0; i <= 5; i++)
	{
		s = (size_t)1 << i;

		// butterflies
		for (i = 0; i <= 5; i++)
		{
			s = (size_t)1 << i;

			for (j = 0; j < 64; j += 2 * s)
			{
				for (k = j; k < j + s; k++)
				{
					McElieceUtils::Multiply(tmp, Output[k + s], ButterflyConsts[constsPos + (k - j)]);
					// memory tiling
					for (b = 0; b < M; b++)
					{
						Output[k][b] ^= tmp[b];
					}
					for (b = 0; b < M; b++)
					{
						Output[k + s][b] ^= Output[k][b];
					}
				}
			}

			constsPos += ((size_t)1 << i);
		}

		constsPos += ((size_t)1 << i);
	}
}

void FFTM12T62::AdditiveFFT::RadixConversions(std::array<ulong, M> &Output)
{
	size_t i;
	size_t j;
	size_t k;

	static const ulong RadixMask[5][2] =
	{
		{ 0x8888888888888888, 0x4444444444444444 },
		{ 0xC0C0C0C0C0C0C0C0, 0x3030303030303030 },
		{ 0xF000F000F000F000, 0x0F000F000F000F00 },
		{ 0xFF000000FF000000, 0x00FF000000FF0000 },
		{ 0xFFFF000000000000, 0x0000FFFF00000000 }
	};

	static const ulong RadixScalar[5][12] =
	{
		{
			0XF3CFC030FC30F003, 0X3FCF0F003C00C00C, 0X30033CC300C0C03C, 0XCCFF0F3C0F30F0C0,
			0X0300C03FF303C3F0, 0X3FFF3C0FF0CCCCC0, 0XF3FFF0C00F3C3CC0, 0X3003333FFFC3C000,
			0X0FF30FFFC3FFF300, 0XFFC0F300F0F0CC00, 0XC0CFF3FCCC3CFC00, 0XFC3C03F0F330C000,
		},
		{
			0X000F00000000F00F, 0X00000F00F00000F0, 0X0F00000F00000F00, 0XF00F00F00F000000,
			0X00F00000000000F0, 0X0000000F00000000, 0XF00000000F00F000, 0X00F00F00000F0000,
			0X0000F00000F00F00, 0X000F00F00F00F000, 0X00F00F0000000000, 0X0000000000F00000,
		},
		{
			0X0000FF00FF0000FF, 0X0000FF000000FF00, 0XFF0000FF00FF0000, 0XFFFF0000FF000000,
			0X00FF00FF00FF0000, 0X0000FFFFFF000000, 0X00FFFF00FF000000, 0XFFFFFF0000FF0000,
			0XFFFF00FFFF00FF00, 0X0000FF0000000000, 0XFFFFFF00FF000000, 0X00FF000000000000,
		},
		{
			0X000000000000FFFF, 0X00000000FFFF0000, 0X0000000000000000, 0XFFFF000000000000,
			0X00000000FFFF0000, 0X0000FFFF00000000, 0X0000000000000000, 0X00000000FFFF0000,
			0X0000FFFF00000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
		},
		{
			0X00000000FFFFFFFF, 0XFFFFFFFF00000000, 0XFFFFFFFF00000000, 0X0000000000000000,
			0X0000000000000000, 0XFFFFFFFF00000000, 0X0000000000000000, 0X0000000000000000,
			0XFFFFFFFF00000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
		}
	};

	// scaling
	for (i = 0; i <= 4; i++)
	{
		for (j = 0; j < M; j++)
		{
			k = 5;
			while (k-- > i)
			{
				Output[j] ^= (Output[j] & RadixMask[k][0]) >> ((size_t)1 << k);
				Output[j] ^= (Output[j] & RadixMask[k][1]) >> ((size_t)1 << k);
			}
		}

		McElieceUtils::Multiply(Output, Output, RadixScalar[i]);
	}
}

void FFTM12T62::TransposedFFT::Transform(std::array<std::array<ulong, M>, 2> &Output, std::array<std::array<ulong, M>, 64> &Input)
{
	Butterflies(Output, Input);
	RadixConversions(Output);
}

void FFTM12T62::TransposedFFT::Butterflies(std::array<std::array<ulong, M>, 2> &Output, std::array<std::array<ulong, M>, 64> &Input)
{
	size_t i;
	size_t j;
	size_t k;
	size_t s;
	ulong constsPos = 63;
	std::array<ulong, M> tmp;

	// butterflies
	i = 6;
	while (i-- != 0)
	{
		s = (size_t)1 << i;
		constsPos -= s;

		for (j = 0; j < 64; j += 2 * s)
		{
			for (k = j; k < j + s; k++)
			{
				McElieceUtils::Add(Input[k], Input[k + s]);
				McElieceUtils::Multiply(tmp, Input[k], ButterflyConsts[constsPos + (k - j)]);
				McElieceUtils::Add(Input[k + s], tmp);
			}
		}
	}

	// transpose
	static const byte ButterflyReverse[64] =
	{
		0, 32, 16, 48, 8, 40, 24, 56,
		4, 36, 20, 52, 12, 44, 28, 60,
		2, 34, 18, 50, 10, 42, 26, 58,
		6, 38, 22, 54, 14, 46, 30, 62,
		1, 33, 17, 49, 9, 41, 25, 57,
		5, 37, 21, 53, 13, 45, 29, 61,
		3, 35, 19, 51, 11, 43, 27, 59,
		7, 39, 23, 55, 15, 47, 31, 63
	};

	std::array<ulong, 64> buf;
	for (i = 0; i < M; i++)
	{
		for (j = 0; j < 64; j++) 
		{
			buf[ButterflyReverse[j]] = Input[j][i];
		}

		McElieceUtils::TransposeCompact64x64(buf);

		for (j = 0; j < 64; j++)
		{
			Input[j][i] = buf[j];
		}
	}

	// broadcast
	std::array<std::array<ulong, M>, 6> pre;
	McElieceUtils::Copy(Input[32], pre[0]);
	McElieceUtils::Add(Input[33], Input[32]);
	McElieceUtils::Copy(Input[33], pre[1]);
	McElieceUtils::Add(Input[35], Input[33]);
	McElieceUtils::Add(pre[0], Input[35]);
	McElieceUtils::Add(Input[34], Input[35]);
	McElieceUtils::Copy(Input[34], pre[2]);
	McElieceUtils::Add(Input[38], Input[34]);
	McElieceUtils::Add(pre[0], Input[38]);
	McElieceUtils::Add(Input[39], Input[38]);
	McElieceUtils::Add(pre[1], Input[39]);
	McElieceUtils::Add(Input[37], Input[39]);
	McElieceUtils::Add(pre[0], Input[37]);
	McElieceUtils::Add(Input[36], Input[37]);
	McElieceUtils::Copy(Input[36], pre[3]);
	McElieceUtils::Add(Input[44], Input[36]);
	McElieceUtils::Add(pre[0], Input[44]);
	McElieceUtils::Add(Input[45], Input[44]);
	McElieceUtils::Add(pre[1], Input[45]);
	McElieceUtils::Add(Input[47], Input[45]);
	McElieceUtils::Add(pre[0], Input[47]);
	McElieceUtils::Add(Input[46], Input[47]);
	McElieceUtils::Add(pre[2], Input[46]);
	McElieceUtils::Add(Input[42], Input[46]);
	McElieceUtils::Add(pre[0], Input[42]);
	McElieceUtils::Add(Input[43], Input[42]);
	McElieceUtils::Add(pre[1], Input[43]);
	McElieceUtils::Add(Input[41], Input[43]);
	McElieceUtils::Add(pre[0], Input[41]);
	McElieceUtils::Add(Input[40], Input[41]);
	McElieceUtils::Copy(Input[40], pre[4]);
	McElieceUtils::Add(Input[56], Input[40]);
	McElieceUtils::Add(pre[0], Input[56]);
	McElieceUtils::Add(Input[57], Input[56]);
	McElieceUtils::Add(pre[1], Input[57]);
	McElieceUtils::Add(Input[59], Input[57]);
	McElieceUtils::Add(pre[0], Input[59]);
	McElieceUtils::Add(Input[58], Input[59]);
	McElieceUtils::Add(pre[2], Input[58]);
	McElieceUtils::Add(Input[62], Input[58]);
	McElieceUtils::Add(pre[0], Input[62]);
	McElieceUtils::Add(Input[63], Input[62]);
	McElieceUtils::Add(pre[1], Input[63]);
	McElieceUtils::Add(Input[61], Input[63]);
	McElieceUtils::Add(pre[0], Input[61]);
	McElieceUtils::Add(Input[60], Input[61]);
	McElieceUtils::Add(pre[3], Input[60]);
	McElieceUtils::Add(Input[52], Input[60]);
	McElieceUtils::Add(pre[0], Input[52]);
	McElieceUtils::Add(Input[53], Input[52]);
	McElieceUtils::Add(pre[1], Input[53]);
	McElieceUtils::Add(Input[55], Input[53]);
	McElieceUtils::Add(pre[0], Input[55]);
	McElieceUtils::Add(Input[54], Input[55]);
	McElieceUtils::Add(pre[2], Input[54]);
	McElieceUtils::Add(Input[50], Input[54]);
	McElieceUtils::Add(pre[0], Input[50]);
	McElieceUtils::Add(Input[51], Input[50]);
	McElieceUtils::Add(pre[1], Input[51]);
	McElieceUtils::Add(Input[49], Input[51]);
	McElieceUtils::Add(pre[0], Input[49]);
	McElieceUtils::Add(Input[48], Input[49]);
	McElieceUtils::Copy(Input[48], pre[5]);
	McElieceUtils::Add(Input[16], Input[48]);
	McElieceUtils::Add(pre[0], Input[16]);
	McElieceUtils::Add(Input[17], Input[16]);
	McElieceUtils::Add(pre[1], Input[17]);
	McElieceUtils::Add(Input[19], Input[17]);
	McElieceUtils::Add(pre[0], Input[19]);
	McElieceUtils::Add(Input[18], Input[19]);
	McElieceUtils::Add(pre[2], Input[18]);
	McElieceUtils::Add(Input[22], Input[18]);
	McElieceUtils::Add(pre[0], Input[22]);
	McElieceUtils::Add(Input[23], Input[22]);
	McElieceUtils::Add(pre[1], Input[23]);
	McElieceUtils::Add(Input[21], Input[23]);
	McElieceUtils::Add(pre[0], Input[21]);
	McElieceUtils::Add(Input[20], Input[21]);
	McElieceUtils::Add(pre[3], Input[20]);
	McElieceUtils::Add(Input[28], Input[20]);
	McElieceUtils::Add(pre[0], Input[28]);
	McElieceUtils::Add(Input[29], Input[28]);
	McElieceUtils::Add(pre[1], Input[29]);
	McElieceUtils::Add(Input[31], Input[29]);
	McElieceUtils::Add(pre[0], Input[31]);
	McElieceUtils::Add(Input[30], Input[31]);
	McElieceUtils::Add(pre[2], Input[30]);
	McElieceUtils::Add(Input[26], Input[30]);
	McElieceUtils::Add(pre[0], Input[26]);
	McElieceUtils::Add(Input[27], Input[26]);
	McElieceUtils::Add(pre[1], Input[27]);
	McElieceUtils::Add(Input[25], Input[27]);
	McElieceUtils::Add(pre[0], Input[25]);
	McElieceUtils::Add(Input[24], Input[25]);
	McElieceUtils::Add(pre[4], Input[24]);
	McElieceUtils::Add(Input[8], Input[24]);
	McElieceUtils::Add(pre[0], Input[8]);
	McElieceUtils::Add(Input[9], Input[8]);
	McElieceUtils::Add(pre[1], Input[9]);
	McElieceUtils::Add(Input[11], Input[9]);
	McElieceUtils::Add(pre[0], Input[11]);
	McElieceUtils::Add(Input[10], Input[11]);
	McElieceUtils::Add(pre[2], Input[10]);
	McElieceUtils::Add(Input[14], Input[10]);
	McElieceUtils::Add(pre[0], Input[14]);
	McElieceUtils::Add(Input[15], Input[14]);
	McElieceUtils::Add(pre[1], Input[15]);
	McElieceUtils::Add(Input[13], Input[15]);
	McElieceUtils::Add(pre[0], Input[13]);
	McElieceUtils::Add(Input[12], Input[13]);
	McElieceUtils::Add(pre[3], Input[12]);
	McElieceUtils::Add(Input[4], Input[12]);
	McElieceUtils::Add(pre[0], Input[4]);
	McElieceUtils::Add(Input[5], Input[4]);
	McElieceUtils::Add(pre[1], Input[5]);
	McElieceUtils::Add(Input[7], Input[5]);
	McElieceUtils::Add(pre[0], Input[7]);
	McElieceUtils::Add(Input[6], Input[7]);
	McElieceUtils::Add(pre[2], Input[6]);
	McElieceUtils::Add(Input[2], Input[6]);
	McElieceUtils::Add(pre[0], Input[2]);
	McElieceUtils::Add(Input[3], Input[2]);
	McElieceUtils::Add(pre[1], Input[3]);
	McElieceUtils::Add(Input[1], Input[3]);
	McElieceUtils::Add(pre[0], Input[1]);
	McElieceUtils::Add(Output[0], Input[0], Input[1]);

	const ushort beta[6] =
	{
		8, 1300, 3408, 1354, 2341, 1154
	};

	for (j = 0; j < M; j++)
	{
		tmp[j] = (beta[0] >> j) & 1;
		tmp[j] = ~tmp[j] + 1;
	}

	McElieceUtils::Multiply(Output[1], pre[0], tmp);

	for (i = 1; i < 6; i++)
	{
		for (j = 0; j < M; j++)
		{
			tmp[j] = (beta[i] >> j) & 1;
			tmp[j] = ~tmp[j] + 1;
		}

		McElieceUtils::Multiply(tmp, pre[i], tmp);
		McElieceUtils::Add(Output[1], tmp);
	}
}

void FFTM12T62::TransposedFFT::RadixConversions(std::array<std::array<ulong, M>, 2> &Output)
{
	size_t i;
	size_t j;
	size_t k;

	static const ulong RadixTrMask[6][2] =
	{
		{ 0x2222222222222222, 0x4444444444444444 },
		{ 0x0C0C0C0C0C0C0C0C, 0x3030303030303030 },
		{ 0x00F000F000F000F0, 0x0F000F000F000F00 },
		{ 0x0000FF000000FF00, 0x00FF000000FF0000 },
		{ 0x00000000FFFF0000, 0x0000FFFF00000000 },
		{ 0xFFFFFFFF00000000, 0x00000000FFFFFFFF }
	};

	static const ulong RadixTrScalar[5][2][12] =
	{
		{
			{
				0XF3CFC030FC30F003, 0X3FCF0F003C00C00C, 0X30033CC300C0C03C, 0XCCFF0F3C0F30F0C0,
				0X0300C03FF303C3F0, 0X3FFF3C0FF0CCCCC0, 0XF3FFF0C00F3C3CC0, 0X3003333FFFC3C000,
				0X0FF30FFFC3FFF300, 0XFFC0F300F0F0CC00, 0XC0CFF3FCCC3CFC00, 0XFC3C03F0F330C000,
			},
			{
				0X000C03C0C3C0330C, 0XF330CFFCC00F33C0, 0XCCF330F00F3C0333, 0XFF03FFF3FF0CF0C0,
				0X3CC3FCF00FCC303C, 0X0F000C0FC30303F3, 0XCF0FC3FF333CCF3C, 0X003F3FC3C0FF333F,
				0X3CC3F0F3CF0FF00F, 0XF3F33CC03FC30CC0, 0X3CC330CFC333F33F, 0X3CC0303FF3C3FFFC,
			}
		},
		{
			{
				0X000F00000000F00F, 0X00000F00F00000F0, 0X0F00000F00000F00, 0XF00F00F00F000000,
				0X00F00000000000F0, 0X0000000F00000000, 0XF00000000F00F000, 0X00F00F00000F0000,
				0X0000F00000F00F00, 0X000F00F00F00F000, 0X00F00F0000000000, 0X0000000000F00000,
			},
			{
				0X0F00F00F00000000, 0XF00000000000F000, 0X00000F00000000F0, 0X0F00F00000F00000,
				0X000F00000F00F00F, 0X00F00F00F00F0000, 0X0F00F00000000000, 0X000000000F000000,
				0X00F00000000F00F0, 0X0000F00F00000F00, 0XF00000F00000F00F, 0X00000F00F00F00F0,
			}
		},
		{
			{
				0X0000FF00FF0000FF, 0X0000FF000000FF00, 0XFF0000FF00FF0000, 0XFFFF0000FF000000,
				0X00FF00FF00FF0000, 0X0000FFFFFF000000, 0X00FFFF00FF000000, 0XFFFFFF0000FF0000,
				0XFFFF00FFFF00FF00, 0X0000FF0000000000, 0XFFFFFF00FF000000, 0X00FF000000000000,
			},
			{
				0XFF00FFFFFF000000, 0XFF0000FFFF000000, 0XFFFF00FFFF000000, 0XFF00FFFFFFFFFF00,
				0X00000000FF00FF00, 0XFFFFFFFF00FF0000, 0X00FFFFFF00FF0000, 0XFFFF00FFFF00FFFF,
				0XFFFF0000FFFFFFFF, 0XFF00000000FF0000, 0X000000FF00FF00FF, 0X00FF00FF00FFFF00,
			}
		},
		{
			{
				0X000000000000FFFF, 0X00000000FFFF0000, 0X0000000000000000, 0XFFFF000000000000,
				0X00000000FFFF0000, 0X0000FFFF00000000, 0X0000000000000000, 0X00000000FFFF0000,
				0X0000FFFF00000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			},
			{
				0X0000000000000000, 0XFFFF000000000000, 0X0000000000000000, 0X0000000000000000,
				0XFFFF00000000FFFF, 0X0000000000000000, 0X0000FFFF00000000, 0XFFFF00000000FFFF,
				0X00000000FFFF0000, 0X0000000000000000, 0XFFFF00000000FFFF, 0X00000000FFFF0000,
			}
		},
		{
			{
				0X00000000FFFFFFFF, 0XFFFFFFFF00000000, 0XFFFFFFFF00000000, 0X0000000000000000,
				0X0000000000000000, 0XFFFFFFFF00000000, 0X0000000000000000, 0X0000000000000000,
				0XFFFFFFFF00000000, 0X0000000000000000, 0X0000000000000000, 0X0000000000000000,
			},
			{
				0X0000000000000000, 0X0000000000000000, 0X00000000FFFFFFFF, 0XFFFFFFFF00000000,
				0XFFFFFFFF00000000, 0X0000000000000000, 0XFFFFFFFF00000000, 0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000, 0X0000000000000000, 0XFFFFFFFFFFFFFFFF, 0XFFFFFFFF00000000,
			}
		}
	};

	j = 6;
	while (j-- != 0)
	{
		if (j < 5)
		{
			McElieceUtils::Multiply(Output[0], Output[0], RadixTrScalar[j][0]);
			McElieceUtils::Multiply(Output[1], Output[1], RadixTrScalar[j][1]);
		}

		for (i = 0; i < M; i++)
		{
			for (k = j; k <= 4; k++)
			{
				Output[0][i] ^= (Output[0][i] & RadixTrMask[k][0]) << ((size_t)1 << k);
				Output[0][i] ^= (Output[0][i] & RadixTrMask[k][1]) << ((size_t)1 << k);
				Output[1][i] ^= (Output[1][i] & RadixTrMask[k][0]) << ((size_t)1 << k);
				Output[1][i] ^= (Output[1][i] & RadixTrMask[k][1]) << ((size_t)1 << k);
			}
		}

		for (i = 0; i < M; i++)
		{
			Output[1][i] ^= (Output[0][i] & RadixTrMask[5][0]) >> 32;
			Output[1][i] ^= (Output[1][i] & RadixTrMask[5][1]) << 32;
		}
	}
}

//~~~Utils~~~//

void FFTM12T62::Invert(std::array<ulong, M> &Output, const std::array<ulong, M> &Input)
{
	std::array<ulong, M> tmpA;
	std::array<ulong, M> tmpB;

	McElieceUtils::Copy(Input, Output);
	Square(Output, Output);
	McElieceUtils::Multiply(tmpA, Output, Input);
	Square(Output, tmpA);
	Square(Output, Output);
	McElieceUtils::Multiply(tmpB, Output, tmpA);
	Square(Output, tmpB);
	Square(Output, Output);
	Square(Output, Output);
	Square(Output, Output);
	McElieceUtils::Multiply(Output, Output, tmpB);
	Square(Output, Output);
	Square(Output, Output);
	McElieceUtils::Multiply(Output, Output, tmpA);
	Square(Output, Output);
	McElieceUtils::Multiply(Output, Output, Input);
	Square(Output, Output);
}

void FFTM12T62::MatrixMultiply(std::array<ushort, T> &Output, std::array<ushort, T> &A, std::vector<ushort> &B)
{
	size_t i;
	size_t j;

	std::vector<ushort> tmp(123, 0);

	for (i = 0; i < 62; i++)
	{
		for (j = 0; j < 62; j++)
		{
			tmp[i + j] ^= McElieceUtils::Multiply(A[i], B[j], M);
		}
	}

	for (i = 122; i >= 62; i--)
	{
		tmp[i - 55] ^= McElieceUtils::Multiply(tmp[i], (ushort)1763, M);
		tmp[i - 61] ^= McElieceUtils::Multiply(tmp[i], (ushort)1722, M);
		tmp[i - 62] ^= McElieceUtils::Multiply(tmp[i], (ushort)4033, M);
	}

	for (i = 0; i < 62; i++) 
	{
		Output[i] = tmp[i];
	}
}

void FFTM12T62::Square(std::array<ulong, M> &Output, std::array<ulong, M> &Input)
{
	std::array<ulong, M> sum;

	sum[0] = Input[0] ^ Input[6];
	sum[1] = Input[11];
	sum[2] = Input[1] ^ Input[7];
	sum[3] = Input[6];
	sum[4] = Input[2] ^ Input[11] ^ Input[8];
	sum[5] = Input[7];
	sum[6] = Input[3] ^ Input[9];
	sum[7] = Input[8];
	sum[8] = Input[4] ^ Input[10];
	sum[9] = Input[9];
	sum[10] = Input[5] ^ Input[11];
	sum[11] = Input[10];

	MemUtils::Copy(sum, 0, Output, 0, M * sizeof(ulong));
}

NAMESPACE_MCELIECEEND