#include "FFTQ12289N1024.h"
#include "BCG.h"
#include "MemUtils.h"
#include "PolyMath.h"
#if defined(__AVX512__)
#	include "UInt512.h"
#elif defined(__AVX2__)
#	include "UInt256.h"
#elif defined(__AVX__)
#	include "UInt128.h"
#endif
#if defined(CEX_HAS_OPENMP)
#	include <omp.h>
#endif

NAMESPACE_RINGLWE

//~~~Constant Tables~~~//

const std::string FFTQ12289N1024::Name = "Q12289N1024";

const std::array<ushort, 512> FFTQ12289N1024::OmegasMontgomery =
{
	0xFEBU, 0x1B3EU, 0x1CCDU, 0x1F1DU, 0xCBEU, 0x13D7U, 0x20AU, 0x879U, 0x18DCU, 0x3FAU, 0x411U, 0x2247U, 0x928U, 0x2B03U, 0x15C6U, 0x7B5U,
	0x11B8U, 0x41AU, 0x1ABCU, 0xF14U, 0xEEAU, 0x17E6U, 0xA7BU, 0x4A6U, 0x12B5U, 0x1E8EU, 0x1D74U, 0x1A60U, 0x1550U, 0x1161U, 0xECDU, 0x2F6EU,
	0x2EC5U, 0x17EU, 0xF94U, 0x1D4U, 0x1ABBU, 0x14DBU, 0x1834U, 0xE7EU, 0x2C34U, 0x4E6U, 0x153BU, 0x2AB2U, 0xF9EU, 0x2810U, 0x287FU, 0xF27U,
	0x2E71U, 0x6C0U, 0x17F9U, 0x1354U, 0x16E6U, 0x17F8U, 0xE3BU, 0x1ADAU, 0x2214U, 0x28EU, 0x283EU, 0x6A6U, 0x1BABU, 0x1A68U, 0x38U, 0xC7FU,
	0x2703U, 0x25DU, 0x2E09U, 0x1F8CU, 0x15DAU, 0x242CU, 0x1903U, 0x12AEU, 0x1844U, 0x1210U, 0x2342U, 0x21F1U, 0xFF0U, 0x2E5CU, 0x184DU, 0xE12U,
	0x3CFU, 0x1F8DU, 0x2293U, 0x24E5U, 0x1631U, 0xD95U, 0x451U, 0x8EU, 0xF1U, 0x2FC7U, 0x3EBU, 0xDCCU, 0x1391U, 0x7A4U, 0x1778U, 0x2C8CU,
	0x1CD1U, 0x801U, 0x2AD8U, 0x2F41U, 0x1DA7U, 0x13C1U, 0xD75U, 0x12ACU, 0xB68U, 0x1B88U, 0xC37U, 0x1FB8U, 0x2C0FU, 0x1AA5U, 0x2CEEU, 0x2267U,
	0x2F6AU, 0x84FU, 0xB17U, 0xF75U, 0x1AFU, 0x62BU, 0x18EFU, 0x2638U, 0x16F2U, 0x2A5U, 0xD08U, 0x185AU, 0xACEU, 0x52BU, 0x239BU, 0x2FCDU,
	0x7EFU, 0x1B2CU, 0x190DU, 0x8E9U, 0xF81U, 0xF97U, 0x2F65U, 0x2532U, 0x1281U, 0x2AF4U, 0x12A6U, 0x1535U, 0x2E5FU, 0xEBCU, 0x1C5U, 0x1714U,
	0xB42U, 0x70DU, 0x803U, 0x7A2U, 0x2DC1U, 0xF7BU, 0x98FU, 0x17FEU, 0x1FEEU, 0xBD6U, 0x733U, 0x939U, 0x2F27U, 0xB5CU, 0xDC9U, 0xD6AU,
	0xC82U, 0x1E74U, 0x809U, 0x14F9U, 0x2EA3U, 0x5E8U, 0x1AFAU, 0x28EAU, 0x2B12U, 0x31U, 0x2A36U, 0x171BU, 0x5D1U, 0x263DU, 0x1736U, 0x29D2U,
	0x28BFU, 0x1D6FU, 0x1AAU, 0x230EU, 0xEADU, 0x284AU, 0x2494U, 0x15BU, 0x16ECU, 0x254FU, 0x25A2U, 0x199AU, 0x2964U, 0x2440U, 0x2D2EU, 0xAEU,
	0xB84U, 0x9C7U, 0x196BU, 0x29E3U, 0x2D56U, 0x99BU, 0x40U, 0xE48U, 0x2107U, 0x1489U, 0x171FU, 0x1EB0U, 0x6D3U, 0x23CEU, 0x156EU, 0x2413U,
	0x17B1U, 0x343U, 0xDF2U, 0x1090U, 0x2D3CU, 0xFCEU, 0x2ADAU, 0x23B3U, 0x422U, 0x2012U, 0x2E48U, 0x39AU, 0x1F1FU, 0x7A6U, 0x27E3U, 0x458U,
	0xE90U, 0xFD1U, 0x2B7AU, 0x1766U, 0x57CU, 0x145U, 0x3B4U, 0x2B87U, 0x182EU, 0x127U, 0x2D75U, 0x1686U, 0x2014U, 0x2051U, 0xB67U, 0x214FU,
	0x17E7U, 0x1B50U, 0x208DU, 0x550U, 0x9FBU, 0x1817U, 0x4B0U, 0x1BC1U, 0x1F37U, 0xD01U, 0x257DU, 0x2F59U, 0x13F2U, 0x1749U, 0x29C7U, 0x2857U,
	0xBEBU, 0x26C3U, 0x1320U, 0x246EU, 0x51U, 0xC13U, 0x3E8U, 0x1F21U, 0x1203U, 0x2D6U, 0x73DU, 0x2F75U, 0x109FU, 0x2B68U, 0xAD0U, 0x299EU,
	0x426U, 0x8F6U, 0xDE1U, 0x12C5U, 0xABBU, 0x12EEU, 0x2181U, 0x23C2U, 0x492U, 0x90FU, 0x316U, 0x2C46U, 0x243BU, 0x2380U, 0x52EU, 0x13DEU,
	0x2386U, 0x191DU, 0x2B45U, 0x2993U, 0xDB0U, 0xDD6U, 0x21DCU, 0x2610U, 0x5C7U, 0x1U, 0x2036U, 0x1BE7U, 0x2D2FU, 0x2AE8U, 0x1026U, 0x1668U,
	0x1372U, 0x2ABAU, 0x1691U, 0x2301U, 0x11EFU, 0x1660U, 0x193DU, 0x139FU, 0x25B2U, 0x1D2CU, 0x3B5U, 0x25C0U, 0xB9FU, 0x2DCEU, 0xAB8U, 0x2443U,
	0x276CU, 0x13CBU, 0x2F8BU, 0x9ACU, 0xEA4U, 0x2C48U, 0x197AU, 0x33BU, 0x24ECU, 0x14FEU, 0x2F7FU, 0x1EFFU, 0xCE0U, 0xF6DU, 0x26A5U, 0x1164U,
	0x2A9CU, 0x9DDU, 0xE00U, 0x1FB0U, 0x1F4BU, 0x2978U, 0x137DU, 0x1B2EU, 0x2E21U, 0x24E7U, 0x2FF8U, 0x3FEU, 0x2EAEU, 0x265DU, 0x2DE1U, 0x169FU,
	0x13E4U, 0x829U, 0x232DU, 0xB41U, 0xCD9U, 0x7DDU, 0x2358U, 0x2D9U, 0x1EDDU, 0x4ECU, 0x167BU, 0x1218U, 0x2EB3U, 0x97AU, 0x2961U, 0x594U,
	0x131AU, 0x1717U, 0xF5CU, 0x2556U, 0x227EU, 0xE35U, 0x15A6U, 0x91U, 0x143BU, 0x2193U, 0xE7BU, 0x2922U, 0x163U, 0xD36U, 0x1087U, 0x260DU,
	0x4B7U, 0x2351U, 0x1B64U, 0x490U, 0x27A2U, 0x2BD8U, 0x1225U, 0x2E6DU, 0x2A9FU, 0x2889U, 0x1B3U, 0x1F10U, 0x1000U, 0x1EDU, 0x26B4U, 0x1ABDU,
	0x1797U, 0x976U, 0x88BU, 0x25FBU, 0x21C3U, 0x267CU, 0x2456U, 0x1786U, 0x1C6EU, 0x3EAU, 0x10BCU, 0x13E0U, 0x647U, 0x1C91U, 0x36BU, 0x213DU,
	0x24D6U, 0x415U, 0x9B1U, 0x1394U, 0x1D04U, 0x162U, 0x19BFU, 0x24A1U, 0x2E47U, 0x961U, 0x42BU, 0x1C14U, 0x2CFCU, 0x186U, 0x213FU, 0x2108U,
	0x1C66U, 0x221U, 0x2189U, 0x258BU, 0x2F0FU, 0x601U, 0x102FU, 0x126AU, 0x1315U, 0x3F9U, 0x13DCU, 0x660U, 0xBFAU, 0x1BU, 0x5A0U, 0x214EU,
	0x2439U, 0x2F0EU, 0x2D62U, 0x2449U, 0xD48U, 0x26A2U, 0xC40U, 0x1BBAU, 0x2236U, 0x2E25U, 0x1CD8U, 0xF91U, 0x2E5DU, 0x1A4AU, 0x29F9U, 0x277FU,
	0x8C9U, 0xFD0U, 0xB44U, 0x2B80U, 0x84EU, 0x65EU, 0x238FU, 0x151FU, 0xA7EU, 0x2352U, 0xB99U, 0x2077U, 0x24D0U, 0x26BFU, 0x224BU, 0x14D4U,
	0x2982U, 0x6F1U, 0x122EU, 0x2A6FU, 0x1CB7U, 0xE34U, 0x2571U, 0x14ABU, 0x20B6U, 0x876U, 0x1337U, 0x2F90U, 0x23B4U, 0x2F61U, 0x1EACU, 0x2FFEU,
	0x131FU, 0x2A35U, 0xADCU, 0x144BU, 0x901U, 0x1C4FU, 0x25ACU, 0xFD5U, 0x2968U, 0xD24U, 0xCC7U, 0xFD9U, 0x113EU, 0x24E2U, 0x1EEDU, 0x87EU
};

const std::array<ushort, 512> FFTQ12289N1024::OmegasInvMontgomery =
{
	0xFEBU, 0x14C3U, 0x10E4U, 0x1334U, 0x2788U, 0x2DF7U, 0x1C2AU, 0x2343U, 0x284CU, 0x1A3BU, 0x4FEU, 0x26D9U, 0xDBAU, 0x2BF0U, 0x2C07U, 0x1725U,
	0x93U, 0x2134U, 0x1EA0U, 0x1AB1U, 0x15A1U, 0x128DU, 0x1173U, 0x1D4CU, 0x2B5BU, 0x2586U, 0x181BU, 0x2117U, 0x20EDU, 0x1545U, 0x2BE7U, 0x1E49U,
	0x2382U, 0x2FC9U, 0x1599U, 0x1456U, 0x295BU, 0x7C3U, 0x2D73U, 0xDEDU, 0x1527U, 0x21C6U, 0x1809U, 0x191BU, 0x1CADU, 0x1808U, 0x2941U, 0x190U,
	0x20DAU, 0x782U, 0x7F1U, 0x2063U, 0x54FU, 0x1AC6U, 0x2B1BU, 0x3CDU, 0x2183U, 0x17CDU, 0x1B26U, 0x1546U, 0x2E2DU, 0x206DU, 0x2E83U, 0x13CU,
	0x34U, 0xC66U, 0x2AD6U, 0x2533U, 0x17A7U, 0x22F9U, 0x2D5CU, 0x190FU, 0x9C9U, 0x1712U, 0x29D6U, 0x2E52U, 0x208CU, 0x24EAU, 0x27B2U, 0x97U,
	0xD9AU, 0x313U, 0x155CU, 0x3F2U, 0x1049U, 0x23CAU, 0x1479U, 0x2499U, 0x1D55U, 0x228CU, 0x1C40U, 0x125AU, 0xC0U, 0x529U, 0x2800U, 0x1330U,
	0x375U, 0x1889U, 0x285DU, 0x1C70U, 0x2235U, 0x2C16U, 0x3AU, 0x2F10U, 0x2F73U, 0x2BB0U, 0x226CU, 0x19D0U, 0xB1CU, 0xD6EU, 0x1074U, 0x2C32U,
	0x21EFU, 0x17B4U, 0x1A5U, 0x2011U, 0xE10U, 0xCBFU, 0x1DF1U, 0x17BDU, 0x1D53U, 0x16FEU, 0xBD5U, 0x1A27U, 0x1075U, 0x1F8U, 0x2DA4U, 0x8FEU,
	0x7AAU, 0x63AU, 0x18B8U, 0x1C0FU, 0xA8U, 0xA84U, 0x2300U, 0x10CAU, 0x1440U, 0x2B51U, 0x17EAU, 0x2606U, 0x2AB1U, 0xF74U, 0x14B1U, 0x181AU,
	0xEB2U, 0x249AU, 0xFB0U, 0xFEDU, 0x197BU, 0x28CU, 0x2EDAU, 0x17D3U, 0x47AU, 0x2C4DU, 0x2EBCU, 0x2A85U, 0x189BU, 0x487U, 0x2030U, 0x2171U,
	0x2BA9U, 0x81EU, 0x285BU, 0x10E2U, 0x2C67U, 0x1B9U, 0xFEFU, 0x2BDFU, 0xC4EU, 0x527U, 0x2033U, 0x2C5U, 0x1F71U, 0x220FU, 0x2CBEU, 0x1850U,
	0xBEEU, 0x1A93U, 0xC33U, 0x292EU, 0x1151U, 0x18E2U, 0x1B78U, 0xEFAU, 0x21B9U, 0x2FC1U, 0x2666U, 0x2ABU, 0x61EU, 0x1696U, 0x263AU, 0x247DU,
	0x2F53U, 0x2D3U, 0xBC1U, 0x69DU, 0x1667U, 0xA5FU, 0xAB2U, 0x1915U, 0x2EA6U, 0xB6DU, 0x7B7U, 0x2154U, 0xCF3U, 0x2E57U, 0x1292U, 0x742U,
	0x62FU, 0x18CBU, 0x9C4U, 0x2A30U, 0x18E6U, 0x5CBU, 0x2FD0U, 0x4EFU, 0x717U, 0x1507U, 0x2A19U, 0x15EU, 0x1B08U, 0x27F8U, 0x118DU, 0x237FU,
	0x2297U, 0x2238U, 0x24A5U, 0xDAU, 0x26C8U, 0x28CEU, 0x242BU, 0x1013U, 0x1803U, 0x2672U, 0x2086U, 0x240U, 0x285FU, 0x27FEU, 0x28F4U, 0x24BFU,
	0x18EDU, 0x2E3CU, 0x2145U, 0x1A2U, 0x1ACCU, 0x1D5BU, 0x50DU, 0x1D80U, 0xACFU, 0x9CU, 0x206AU, 0x2080U, 0x2718U, 0x16F4U, 0x14D5U, 0x2812U,
	0x2783U, 0x1114U, 0xB1FU, 0x1EC3U, 0x2028U, 0x233AU, 0x22DDU, 0x699U, 0x202CU, 0xA55U, 0x13B2U, 0x2700U, 0x1BB6U, 0x2525U, 0x5CCU, 0x1CE2U,
	0x3U, 0x1155U, 0xA0U, 0xC4DU, 0x71U, 0x1CCAU, 0x278BU, 0xF4BU, 0x1B56U, 0xA90U, 0x21CDU, 0x134AU, 0x592U, 0x1DD3U, 0x2910U, 0x67FU,
	0x1B2DU, 0xDB6U, 0x942U, 0xB31U, 0xF8AU, 0x2468U, 0xCAFU, 0x2583U, 0x1AE2U, 0xC72U, 0x29A3U, 0x27B3U, 0x481U, 0x24BDU, 0x2031U, 0x2738U,
	0x882U, 0x608U, 0x15B7U, 0x1A4U, 0x2070U, 0x1329U, 0x1DCU, 0xDCBU, 0x1447U, 0x23C1U, 0x95FU, 0x22B9U, 0xBB8U, 0x29FU, 0xF3U, 0xBC8U,
	0xEB3U, 0x2A61U, 0x2FE6U, 0x2407U, 0x29A1U, 0x1C25U, 0x2C08U, 0x1CECU, 0x1D97U, 0x1FD2U, 0x2A00U, 0xF2U, 0xA76U, 0xE78U, 0x2DE0U, 0x139BU,
	0xEF9U, 0xEC2U, 0x2E7BU, 0x305U, 0x13EDU, 0x2BD6U, 0x26A0U, 0x1BAU, 0xB60U, 0x1642U, 0x2E9FU, 0x12FDU, 0x1C6DU, 0x2650U, 0x2BECU, 0xB2BU,
	0xEC4U, 0x2C96U, 0x1370U, 0x29BAU, 0x1C21U, 0x1F45U, 0x2C17U, 0x1393U, 0x187BU, 0xBABU, 0x985U, 0xE3EU, 0xA06U, 0x2776U, 0x268BU, 0x186AU,
	0x1544U, 0x94DU, 0x2E14U, 0x2001U, 0x10F1U, 0x2E4EU, 0x778U, 0x562U, 0x194U, 0x1DDCU, 0x429U, 0x85FU, 0x2B71U, 0x149DU, 0xCB0U, 0x2B4AU,
	0x9F4U, 0x1F7AU, 0x22CBU, 0x2E9EU, 0x6DFU, 0x2186U, 0xE6EU, 0x1BC6U, 0x2F70U, 0x1A5BU, 0x21CCU, 0xD83U, 0xAABU, 0x20A5U, 0x18EAU, 0x1CE7U,
	0x2A6DU, 0x6A0U, 0x2687U, 0x14EU, 0x1DE9U, 0x1986U, 0x2B15U, 0x1124U, 0x2D28U, 0xCA9U, 0x2824U, 0x2328U, 0x24C0U, 0xCD4U, 0x27D8U, 0x1C1DU,
	0x1962U, 0x220U, 0x9A4U, 0x153U, 0x2C03U, 0x9U, 0xB1AU, 0x1E0U, 0x14D3U, 0x1C84U, 0x689U, 0x10B6U, 0x1051U, 0x2201U, 0x2624U, 0x565U,
	0x1E9DU, 0x95CU, 0x2094U, 0x2321U, 0x1102U, 0x82U, 0x1B03U, 0xB15U, 0x2CC6U, 0x1687U, 0x3B9U, 0x215DU, 0x2655U, 0x76U, 0x1C36U, 0x895U,
	0xBBEU, 0x2549U, 0x233U, 0x2462U, 0xA41U, 0x2C4CU, 0x12D5U, 0xA4FU, 0x1C62U, 0x16C4U, 0x19A1U, 0x1E12U, 0xD00U, 0x1970U, 0x547U, 0x1C8FU,
	0x1999U, 0x1FDBU, 0x519U, 0x2D2U, 0x141AU, 0xFCBU, 0x3000U, 0x2A3AU, 0x9F1U, 0xE25U, 0x222BU, 0x2251U, 0x66EU, 0x4BCU, 0x16E4U, 0xC7BU,
	0x1C23U, 0x2AD3U, 0xC81U, 0xBC6U, 0x3BBU, 0x2CEBU, 0x26F2U, 0x2B6FU, 0xC3FU, 0xE80U, 0x1D13U, 0x2546U, 0x1D3CU, 0x2220U, 0x270BU, 0x2BDBU,
	0x663U, 0x2531U, 0x499U, 0x1F62U, 0x8CU, 0x28C4U, 0x2D2BU, 0x1DFEU, 0x10E0U, 0x2C19U, 0x23EEU, 0x2FB0U, 0xB93U, 0x1CE1U, 0x93EU, 0x2416U
};

const std::array<ushort, 1024> FFTQ12289N1024::PsisBitrevMontgomery =
{
	0xFEBU, 0x1B3EU, 0x1CCDU, 0x1F1DU, 0xCBEU, 0x13D7U, 0x20AU, 0x879U, 0x18DCU, 0x3FAU, 0x411U, 0x2247U, 0x928U, 0x2B03U, 0x15C6U, 0x7B5U,
	0x11B8U, 0x41AU, 0x1ABCU, 0xF14U, 0xEEAU, 0x17E6U, 0xA7BU, 0x4A6U, 0x12B5U, 0x1E8EU, 0x1D74U, 0x1A60U, 0x1550U, 0x1161U, 0xECDU, 0x2F6EU,
	0x2EC5U, 0x17EU, 0xF94U, 0x1D4U, 0x1ABBU, 0x14DBU, 0x1834U, 0xE7EU, 0x2C34U, 0x4E6U, 0x153BU, 0x2AB2U, 0xF9EU, 0x2810U, 0x287FU, 0xF27U,
	0x2E71U, 0x6C0U, 0x17F9U, 0x1354U, 0x16E6U, 0x17F8U, 0xE3BU, 0x1ADAU, 0x2214U, 0x28EU, 0x283EU, 0x6A6U, 0x1BABU, 0x1A68U, 0x38U, 0xC7FU,
	0x2703U, 0x25DU, 0x2E09U, 0x1F8CU, 0x15DAU, 0x242CU, 0x1903U, 0x12AEU, 0x1844U, 0x1210U, 0x2342U, 0x21F1U, 0xFF0U, 0x2E5CU, 0x184DU, 0xE12U,
	0x3CFU, 0x1F8DU, 0x2293U, 0x24E5U, 0x1631U, 0xD95U, 0x451U, 0x8EU, 0xF1U, 0x2FC7U, 0x3EBU, 0xDCCU, 0x1391U, 0x7A4U, 0x1778U, 0x2C8CU,
	0x1CD1U, 0x801U, 0x2AD8U, 0x2F41U, 0x1DA7U, 0x13C1U, 0xD75U, 0x12ACU, 0xB68U, 0x1B88U, 0xC37U, 0x1FB8U, 0x2C0FU, 0x1AA5U, 0x2CEEU, 0x2267U,
	0x2F6AU, 0x84FU, 0xB17U, 0xF75U, 0x1AFU, 0x62BU, 0x18EFU, 0x2638U, 0x16F2U, 0x2A5U, 0xD08U, 0x185AU, 0xACEU, 0x52BU, 0x239BU, 0x2FCDU,
	0x7EFU, 0x1B2CU, 0x190DU, 0x8E9U, 0xF81U, 0xF97U, 0x2F65U, 0x2532U, 0x1281U, 0x2AF4U, 0x12A6U, 0x1535U, 0x2E5FU, 0xEBCU, 0x1C5U, 0x1714U,
	0xB42U, 0x70DU, 0x803U, 0x7A2U, 0x2DC1U, 0xF7BU, 0x98FU, 0x17FEU, 0x1FEEU, 0xBD6U, 0x733U, 0x939U, 0x2F27U, 0xB5CU, 0xDC9U, 0xD6AU,
	0xC82U, 0x1E74U, 0x809U, 0x14F9U, 0x2EA3U, 0x5E8U, 0x1AFAU, 0x28EAU, 0x2B12U, 0x31U, 0x2A36U, 0x171BU, 0x5D1U, 0x263DU, 0x1736U, 0x29D2U,
	0x28BFU, 0x1D6FU, 0x1AAU, 0x230EU, 0xEADU, 0x284AU, 0x2494U, 0x15BU, 0x16ECU, 0x254FU, 0x25A2U, 0x199AU, 0x2964U, 0x2440U, 0x2D2EU, 0xAEU,
	0xB84U, 0x9C7U, 0x196BU, 0x29E3U, 0x2D56U, 0x99BU, 0x40U, 0xE48U, 0x2107U, 0x1489U, 0x171FU, 0x1EB0U, 0x6D3U, 0x23CEU, 0x156EU, 0x2413U,
	0x17B1U, 0x343U, 0xDF2U, 0x1090U, 0x2D3CU, 0xFCEU, 0x2ADAU, 0x23B3U, 0x422U, 0x2012U, 0x2E48U, 0x39AU, 0x1F1FU, 0x7A6U, 0x27E3U, 0x458U,
	0xE90U, 0xFD1U, 0x2B7AU, 0x1766U, 0x57CU, 0x145U, 0x3B4U, 0x2B87U, 0x182EU, 0x127U, 0x2D75U, 0x1686U, 0x2014U, 0x2051U, 0xB67U, 0x214FU,
	0x17E7U, 0x1B50U, 0x208DU, 0x550U, 0x9FBU, 0x1817U, 0x4B0U, 0x1BC1U, 0x1F37U, 0xD01U, 0x257DU, 0x2F59U, 0x13F2U, 0x1749U, 0x29C7U, 0x2857U,
	0xBEBU, 0x26C3U, 0x1320U, 0x246EU, 0x51U, 0xC13U, 0x3E8U, 0x1F21U, 0x1203U, 0x2D6U, 0x73DU, 0x2F75U, 0x109FU, 0x2B68U, 0xAD0U, 0x299EU,
	0x426U, 0x8F6U, 0xDE1U, 0x12C5U, 0xABBU, 0x12EEU, 0x2181U, 0x23C2U, 0x492U, 0x90FU, 0x316U, 0x2C46U, 0x243BU, 0x2380U, 0x52EU, 0x13DEU,
	0x2386U, 0x191DU, 0x2B45U, 0x2993U, 0xDB0U, 0xDD6U, 0x21DCU, 0x2610U, 0x5C7U, 0x1U, 0x2036U, 0x1BE7U, 0x2D2FU, 0x2AE8U, 0x1026U, 0x1668U,
	0x1372U, 0x2ABAU, 0x1691U, 0x2301U, 0x11EFU, 0x1660U, 0x193DU, 0x139FU, 0x25B2U, 0x1D2CU, 0x3B5U, 0x25C0U, 0xB9FU, 0x2DCEU, 0xAB8U, 0x2443U,
	0x276CU, 0x13CBU, 0x2F8BU, 0x9ACU, 0xEA4U, 0x2C48U, 0x197AU, 0x33BU, 0x24ECU, 0x14FEU, 0x2F7FU, 0x1EFFU, 0xCE0U, 0xF6DU, 0x26A5U, 0x1164U,
	0x2A9CU, 0x9DDU, 0xE00U, 0x1FB0U, 0x1F4BU, 0x2978U, 0x137DU, 0x1B2EU, 0x2E21U, 0x24E7U, 0x2FF8U, 0x3FEU, 0x2EAEU, 0x265DU, 0x2DE1U, 0x169FU,
	0x13E4U, 0x829U, 0x232DU, 0xB41U, 0xCD9U, 0x7DDU, 0x2358U, 0x2D9U, 0x1EDDU, 0x4ECU, 0x167BU, 0x1218U, 0x2EB3U, 0x97AU, 0x2961U, 0x594U,
	0x131AU, 0x1717U, 0xF5CU, 0x2556U, 0x227EU, 0xE35U, 0x15A6U, 0x91U, 0x143BU, 0x2193U, 0xE7BU, 0x2922U, 0x163U, 0xD36U, 0x1087U, 0x260DU,
	0x4B7U, 0x2351U, 0x1B64U, 0x490U, 0x27A2U, 0x2BD8U, 0x1225U, 0x2E6DU, 0x2A9FU, 0x2889U, 0x1B3U, 0x1F10U, 0x1000U, 0x1EDU, 0x26B4U, 0x1ABDU,
	0x1797U, 0x976U, 0x88BU, 0x25FBU, 0x21C3U, 0x267CU, 0x2456U, 0x1786U, 0x1C6EU, 0x3EAU, 0x10BCU, 0x13E0U, 0x647U, 0x1C91U, 0x36BU, 0x213DU,
	0x24D6U, 0x415U, 0x9B1U, 0x1394U, 0x1D04U, 0x162U, 0x19BFU, 0x24A1U, 0x2E47U, 0x961U, 0x42BU, 0x1C14U, 0x2CFCU, 0x186U, 0x213FU, 0x2108U,
	0x1C66U, 0x221U, 0x2189U, 0x258BU, 0x2F0FU, 0x601U, 0x102FU, 0x126AU, 0x1315U, 0x3F9U, 0x13DCU, 0x660U, 0xBFAU, 0x1BU, 0x5A0U, 0x214EU,
	0x2439U, 0x2F0EU, 0x2D62U, 0x2449U, 0xD48U, 0x26A2U, 0xC40U, 0x1BBAU, 0x2236U, 0x2E25U, 0x1CD8U, 0xF91U, 0x2E5DU, 0x1A4AU, 0x29F9U, 0x277FU,
	0x8C9U, 0xFD0U, 0xB44U, 0x2B80U, 0x84EU, 0x65EU, 0x238FU, 0x151FU, 0xA7EU, 0x2352U, 0xB99U, 0x2077U, 0x24D0U, 0x26BFU, 0x224BU, 0x14D4U,
	0x2982U, 0x6F1U, 0x122EU, 0x2A6FU, 0x1CB7U, 0xE34U, 0x2571U, 0x14ABU, 0x20B6U, 0x876U, 0x1337U, 0x2F90U, 0x23B4U, 0x2F61U, 0x1EACU, 0x2FFEU,
	0x131FU, 0x2A35U, 0xADCU, 0x144BU, 0x901U, 0x1C4FU, 0x25ACU, 0xFD5U, 0x2968U, 0xD24U, 0xCC7U, 0xFD9U, 0x113EU, 0x24E2U, 0x1EEDU, 0x87EU,
	0xF6BU, 0x2EAFU, 0x997U, 0x19C7U, 0x2931U, 0x2ADFU, 0xE46U, 0xB4EU, 0x1E01U, 0x1BD6U, 0x1C77U, 0x2FEDU, 0x1017U, 0xD0FU, 0x867U, 0x5F2U,
	0x1C06U, 0x1CB6U, 0x2B21U, 0x98AU, 0x864U, 0x1747U, 0x195CU, 0x208AU, 0x22F1U, 0x15DEU, 0xE28U, 0x289DU, 0x52DU, 0x19A5U, 0x799U, 0x2BFCU,
	0x275DU, 0xA72U, 0xD0AU, 0xCCCU, 0x2B1AU, 0x1FAU, 0x1969U, 0x570U, 0x1566U, 0x224AU, 0x49AU, 0xAD8U, 0xD50U, 0x286BU, 0x2B74U, 0xA0FU,
	0x2511U, 0x2F40U, 0x17CCU, 0x274AU, 0x1047U, 0x17C5U, 0x39BU, 0x2BF3U, 0x2E88U, 0x11E2U, 0x29ADU, 0x2E8AU, 0x1A9U, 0x28D5U, 0x188U, 0x2778U,
	0x2110U, 0x108BU, 0x2239U, 0x1CD0U, 0x8F3U, 0xD2FU, 0x1F12U, 0x22C0U, 0x19D9U, 0x1E6EU, 0x6C9U, 0x2D93U, 0xF8EU, 0x247EU, 0x1A18U, 0x27CU,
	0x1AA9U, 0x1CD7U, 0x200U, 0x123EU, 0xB54U, 0x2F12U, 0x1E37U, 0x3E2U, 0x697U, 0x2E6BU, 0x1B6DU, 0x92U, 0x28F5U, 0x57BU, 0x1445U, 0x17CEU,
	0x9B3U, 0x806U, 0xBE2U, 0x2AC1U, 0xF8DU, 0x2A45U, 0x2E32U, 0x22B2U, 0x1FD7U, 0xB4U, 0x2580U, 0x1E04U, 0x1463U, 0x2A80U, 0x1A7CU, 0xCCU,
	0x2BE0U, 0xA28U, 0x1DA0U, 0xC31U, 0xBC9U, 0x2B2DU, 0x1E86U, 0x1B83U, 0x109BU, 0x1283U, 0x2B37U, 0x1A73U, 0x1BA1U, 0x242DU, 0x938U, 0x2E95U,
	0x788U, 0x2E31U, 0x1F58U, 0xE5EU, 0xC85U, 0xD1FU, 0x2BBDU, 0x1459U, 0x2185U, 0xCA6U, 0x2288U, 0x470U, 0x2493U, 0x722U, 0xC63U, 0x1189U,
	0x1ECDU, 0x15AU, 0x814U, 0x56DU, 0x2041U, 0xC5BU, 0x12E8U, 0x17EFU, 0x1F7EU, 0x22D9U, 0x264U, 0x108EU, 0x2A0BU, 0x1F83U, 0x7DU, 0x2DE5U,
	0x278DU, 0x1528U, 0x83EU, 0x2CCU, 0x266FU, 0x2958U, 0x2CD3U, 0x2E61U, 0xD78U, 0x157U, 0x774U, 0x11BAU, 0x28B7U, 0x1BA6U, 0x1277U, 0x4B8U,
	0x2D34U, 0xE05U, 0xBA6U, 0x55DU, 0x6B9U, 0x2A01U, 0x1007U, 0x97DU, 0x1071U, 0x1524U, 0x1769U, 0x2333U, 0x1B6U, 0xDBBU, 0x1C3CU, 0x4C2U,
	0x209BU, 0x1470U, 0x21EAU, 0x52FU, 0x1D54U, 0x133CU, 0x1C0U, 0x3F6U, 0x272DU, 0x2FBDU, 0x11D6U, 0x16CCU, 0x2FC5U, 0xA9DU, 0x5FFU, 0xC80U,
	0x15D4U, 0x16D5U, 0x19CU, 0x13EEU, 0x1C9EU, 0xEA0U, 0xBF0U, 0x9E0U, 0x1CEEU, 0x207AU, 0x23F2U, 0x1936U, 0x19D5U, 0x589U, 0x2730U, 0x1E68U,
	0x5EEU, 0xEB5U, 0x1050U, 0x13C7U, 0x2664U, 0x8E3U, 0x19ECU, 0x10ABU, 0x193FU, 0x811U, 0x1E2DU, 0xDA7U, 0x2088U, 0x2233U, 0x1FD0U, 0x2925U,
	0x174EU, 0x2F2DU, 0x23D7U, 0x2530U, 0x15DCU, 0x189EU, 0x20D0U, 0x243U, 0x1A7DU, 0x2B06U, 0x1666U, 0x2B69U, 0x2B9CU, 0x12FCU, 0x46BU, 0x2A5CU,
	0x236CU, 0x1F50U, 0x25DEU, 0xEFDU, 0x237U, 0x2484U, 0x1B58U, 0x19E3U, 0x1E13U, 0x13DAU, 0x2AAU, 0x2C2DU, 0x1457U, 0xFD2U, 0x1BAFU, 0x34CU,
	0x1D0AU, 0xEB9U, 0x125U, 0x2361U, 0x1B1CU, 0x2480U, 0x2A83U, 0xA49U, 0x1FFEU, 0xF68U, 0x159AU, 0x15E4U, 0xD98U, 0x87BU, 0x2442U, 0x2B10U,
	0x8A5U, 0x1FC8U, 0xEDDU, 0x2FFU, 0x2FCFU, 0xD8U, 0x2D00U, 0x1A6BU, 0x2871U, 0x7U, 0x2176U, 0x34DU, 0x1C43U, 0xC52U, 0x1108U, 0xCD5U,
	0x281CU, 0xB10U, 0xDF4U, 0x502U, 0x1D87U, 0xC9DU, 0x20A8U, 0x2957U, 0x17D9U, 0xC30U, 0x19F3U, 0x183BU, 0x2158U, 0x209CU, 0x1B07U, 0xDD0U,
	0x23EFU, 0x2A8BU, 0x2CC7U, 0x13B3U, 0x67AU, 0x15F2U, 0x2253U, 0x169DU, 0x126FU, 0x2EFU, 0x2C73U, 0x18F5U, 0x2A1FU, 0xBF9U, 0x1E7EU, 0x19BAU,
	0xA3EU, 0x150AU, 0x1FEU, 0x1DCCU, 0x1B09U, 0x242U, 0x2869U, 0x2E3FU, 0x22E1U, 0x124CU, 0x2FC2U, 0x1BF2U, 0x26BCU, 0x1C86U, 0x2121U, 0xE56U,
	0x2B3AU, 0x91EU, 0x636U, 0x1EC6U, 0x29EEU, 0x70AU, 0x763U, 0x13EFU, 0x1807U, 0x2274U, 0xD5AU, 0x1EA6U, 0x26DFU, 0x1255U, 0x1A1U, 0x270CU,
	0x25B4U, 0x119EU, 0xB82U, 0x1555U, 0x16DU, 0x371U, 0x787U, 0x3F7U, 0x2D9BU, 0x2B01U, 0x55BU, 0x2FE9U, 0x9B5U, 0x2C79U, 0x13AFU, 0x1A56U,
	0x2101U, 0x732U, 0x2FB9U, 0x1FF0U, 0x2569U, 0x12E2U, 0x1F01U, 0x24F5U, 0xA53U, 0x2BBAU, 0xBE5U, 0x196CU, 0xFFEU, 0xD7BU, 0x1EE7U, 0x2B28U,
	0x151EU, 0x1239U, 0xBCCU, 0x19D8U, 0x2C51U, 0x1D5FU, 0xE55U, 0x14A7U, 0x6FEU, 0x1B66U, 0x1522U, 0x2B1EU, 0x2BF1U, 0x7F3U, 0x17EDU, 0x28A7U,
	0x11D5U, 0x1C93U, 0x13D6U, 0x290AU, 0xB18U, 0x9AEU, 0x2436U, 0x1062U, 0x23EBU, 0x11A6U, 0x1D2DU, 0x488U, 0x1ADEU, 0xAAAU, 0x28B5U, 0x2734U,
	0x6C6U, 0xEE7U, 0x2ABBU, 0x16C8U, 0x2963U, 0x2A07U, 0x1147U, 0x20E4U, 0x2591U, 0x1BCFU, 0x2B02U, 0x2CA0U, 0x23D5U, 0xBDU, 0x2760U, 0x291EU,
	0xD8AU, 0x295CU, 0x1DA8U, 0xDFAU, 0x2CF7U, 0x1E69U, 0x25BFU, 0x212U, 0x2F76U, 0x22FDU, 0x9E4U, 0xCF5U, 0x2485U, 0x2803U, 0x5C9U, 0x2474U,
	0xD7EU, 0xEAEU, 0x1EDBU, 0x107AU, 0xA21U, 0x2C92U, 0x8E4U, 0x3D6U, 0x1971U, 0x739U, 0x212EU, 0x233DU, 0x11ABU, 0x1F34U, 0x8U, 0x1C9U,
	0x288U, 0x96U, 0x1F40U, 0x903U, 0x8FDU, 0x36AU, 0x1612U, 0xAAU, 0x24F6U, 0xB39U, 0x267FU, 0x2CEAU, 0x9E7U, 0x2BA1U, 0x16B0U, 0x2FECU,
	0x25D7U, 0x76DU, 0x1C03U, 0x2E0BU, 0xF06U, 0x625U, 0x17AFU, 0xED1U, 0x1D2U, 0x2BFBU, 0x2970U, 0xEEDU, 0x18B0U, 0x1229U, 0x1877U, 0xB71U
};

const std::array<ushort, 1024> FFTQ12289N1024::PsisInvMontgomery =
{
	0x100U, 0x294AU, 0x5E6U, 0x1C46U, 0x40AU, 0x1C02U, 0x1893U, 0x1EF1U, 0x2D91U, 0xD5EU, 0xFA0U, 0x917U, 0x828U, 0x15BDU, 0x31BU, 0x2997U,
	0x5F1U, 0x156CU, 0x9EBU, 0x1CD9U, 0x41FU, 0x1C05U, 0x1F6FU, 0x2DA3U, 0x685U, 0x7CAU, 0xED4U, 0x16B1U, 0x10F5U, 0x24B6U, 0x2E64U, 0x2FC6U,
	0x291DU, 0x2F05U, 0x2FDDU, 0xDB2U, 0xFACU, 0x2487U, 0x12EFU, 0x990U, 0x1CCCU, 0x2667U, 0xC58U, 0x89FU, 0x15CEU, 0x9F9U, 0x1CDBU, 0x18B2U,
	0x25D1U, 0x567U, 0x29EBU, 0x5FDU, 0xDBU, 0x14B2U, 0x10ACU, 0x1DD0U, 0x18D5U, 0x25D6U, 0x20D6U, 0x1268U, 0x24EBU, 0x2790U, 0x135EU, 0x1757U,
	0x2C7BU, 0x21C9U, 0x2DF9U, 0x1B24U, 0x2D06U, 0x2F94U, 0x6CCU, 0x2A1EU, 0x1A97U, 0xAA8U, 0x1CF4U, 0x11DAU, 0x1044U, 0x100AU, 0x2B70U, 0x2F5AU,
	0x2232U, 0x2E08U, 0xD6FU, 0x167EU, 0x2C5CU, 0x1AE9U, 0x2622U, 0x2E98U, 0x6A8U, 0x7CFU, 0x2A43U, 0x2F2FU, 0x2FE3U, 0x1B6AU, 0x2D10U, 0x670U,
	0x7C7U, 0x7F8U, 0x7FFU, 0x800U, 0x2A4AU, 0x2F30U, 0x222CU, 0x2050U, 0x200CU, 0x494U, 0x783U, 0x1C81U, 0xAEEU, 0x1CFEU, 0x18B7U, 0x113FU,
	0x1DE5U, 0x18D8U, 0x2CB2U, 0x2F88U, 0x1B5DU, 0x1F57U, 0x26C4U, 0x20F8U, 0x2024U, 0xB73U, 0x1D11U, 0x427U, 0xE4FU, 0x169EU, 0x2585U, 0x27A6U,
	0x5AAU, 0x2319U, 0x2E29U, 0x28E2U, 0x2821U, 0x2EE1U, 0xD8EU, 0x1D5EU, 0x432U, 0x775U, 0x1C7FU, 0x265CU, 0x1332U, 0x2BEU, 0x14F7U, 0x1E6DU,
	0x1FC7U, 0x26D4U, 0x58CU, 0xE82U, 0x2B38U, 0x2F52U, 0x2FE8U, 0x6D8U, 0x158DU, 0x255EU, 0x2E7CU, 0x6A4U, 0xEAAU, 0x16ABU, 0x33DU, 0x752U,
	0x1C7AU, 0xAEDU, 0x2AB5U, 0x13D1U, 0x1E43U, 0x1FC1U, 0x191CU, 0x1829U, 0x2C99U, 0x65FU, 0xE9U, 0x14B4U, 0x253FU, 0x279CU, 0x2ECEU, 0x221EU,
	0x204EU, 0xB79U, 0x2AC9U, 0x218BU, 0x2039U, 0xB76U, 0x23EDU, 0x12D9U, 0x1744U, 0x110AU, 0x24B9U, 0x53FU, 0xE77U, 0x211U, 0x2971U, 0x2F11U,
	0x1B4CU, 0x1879U, 0x37FU, 0xE37U, 0xFBFU, 0xFF7U, 0xFFFU, 0x249U, 0x2979U, 0x215BU, 0x127BU, 0x105BU, 0x24A0U, 0xC17U, 0x2404U, 0x276FU,
	0x27ECU, 0x5B4U, 0x29F6U, 0x2F24U, 0x6BCU, 0x1589U, 0x2C39U, 0x1AE4U, 0xAB3U, 0x161AU, 0x17BBU, 0x111BU, 0x2B97U, 0x2884U, 0x2138U, 0x1276U,
	0x24EDU, 0xC22U, 0x1D2AU, 0x2D50U, 0x28C3U, 0x2141U, 0x270AU, 0x2102U, 0x2701U, 0xC6EU, 0x2AECU, 0x2190U, 0xBA7U, 0x23F4U, 0x12DAU, 0x98DU,
	0x15F0U, 0x17B5U, 0x363U, 0xE33U, 0x169AU, 0x2C60U, 0x140EU, 0x9B9U, 0x2A89U, 0x2F39U, 0x6BFU, 0x1C65U, 0xAEAU, 0x23D9U, 0x51FU, 0x154EU,
	0x2555U, 0x19E8U, 0xA8FU, 0x23CCU, 0x2767U, 0x5A1U, 0xE85U, 0x213U, 0xE03U, 0x8DCU, 0x144U, 0x14C1U, 0x2F7U, 0x748U, 0x159DU, 0x9F2U,
	0x1CDAU, 0x2669U, 0x20EBU, 0x126BU, 0x2BC7U, 0x641U, 0x1C53U, 0x11C3U, 0x2BAFU, 0x2F63U, 0x6C5U, 0x2A1DU, 0x284EU, 0x5C2U, 0x29F8U, 0x13B6U,
	0x1088U, 0x2B82U, 0x2881U, 0x1A5CU, 0x3C4U, 0x1BF8U, 0x11B6U, 0x1DF6U, 0x1FB6U, 0x1FF6U, 0x1248U, 0x2BC2U, 0x1AD3U, 0x3D5U, 0x22D6U, 0x4FAU,
	0xB6U, 0x1AU, 0x1B72U, 0x1F5AU, 0x2DA0U, 0x2FAAU, 0x2919U, 0x5DFU, 0x1C45U, 0x11C1U, 0x171CU, 0x2597U, 0x20CDU, 0x2DD5U, 0x28D6U, 0xCB1U,
	0x241AU, 0x19BBU, 0x3ADU, 0x762U, 0x10EU, 0x294CU, 0x1A79U, 0x2612U, 0x1A03U, 0x184AU, 0x180BU, 0x1802U, 0x36EU, 0x759U, 0x1C7BU, 0x2D37U,
	0x2F9BU, 0x6CDU, 0x1C67U, 0x1F7DU, 0x2DA5U, 0x1B18U, 0x1196U, 0x24CDU, 0x12F9U, 0x106DU, 0x1DC7U, 0x441U, 0x29C1U, 0x5F7U, 0x2324U, 0x274FU,
	0x2EC3U, 0x28F8U, 0x1A6DU, 0xAA2U, 0xF3CU, 0x2477U, 0x2E5BU, 0x1B32U, 0x2D08U, 0x1426U, 0x1098U, 0x1016U, 0x16DFU, 0xA20U, 0x1605U, 0x17B8U,
	0xA3FU, 0x1CE5U, 0x1F8FU, 0x26CCU, 0x1342U, 0x1753U, 0x355U, 0xE31U, 0x207U, 0x2294U, 0x2E16U, 0xD71U, 0x2B11U, 0x627U, 0xE1U, 0x226AU,
	0x2E10U, 0x2FBAU, 0xDADU, 0x243EU, 0xC09U, 0x2402U, 0x12DCU, 0x1E20U, 0x1FBCU, 0x2DAEU, 0x2FACU, 0xDABU, 0xFABU, 0x23DU, 0xE09U, 0x1694U,
	0x1EA8U, 0x26ABU, 0x27D0U, 0x5B0U, 0xD0U, 0x1B8CU, 0xACBU, 0x1CF9U, 0x2D49U, 0x28C2U, 0x2EF8U, 0x2224U, 0x2E06U, 0x28DDU, 0xCB2U, 0x1663U,
	0x1EA1U, 0x26AAU, 0x586U, 0xCAU, 0xDD4U, 0x1D68U, 0xB0FU, 0x870U, 0x2A5AU, 0x13C4U, 0x108AU, 0x1014U, 0x24CU, 0x54U, 0xCU, 0x1B70U,
	0xAC7U, 0x23D4U, 0x19B1U, 0x2CD1U, 0x667U, 0x2334U, 0xBE3U, 0x1D21U, 0x18BCU, 0x2CAEU, 0x662U, 0x7C5U, 0x2366U, 0x2E34U, 0x2208U, 0x2E02U,
	0x2FB8U, 0x291BU, 0x1A72U, 0x2611U, 0x27BAU, 0x1364U, 0x250FU, 0x19DEU, 0x3B2U, 0x22D1U, 0x198CU, 0x1839U, 0x112DU, 0x24BEU, 0x20AEU, 0x26F5U,
	0x20FFU, 0x2025U, 0x2DBDU, 0x21F7U, 0x2724U, 0xC73U, 0x165AU, 0xA0DU, 0x2A95U, 0x1AA8U, 0x1186U, 0x1038U, 0x249BU, 0x20A9U, 0xB86U, 0x881U,
	0x137U, 0x708U, 0x234BU, 0x2079U, 0x2DC9U, 0xD66U, 0x1EAU, 0x46U, 0xAU, 0x6DDU, 0xFBU, 0xDDBU, 0x1D69U, 0x2D59U, 0xD56U, 0x1D56U,
	0x11E8U, 0x1046U, 0x249DU, 0x53BU, 0x1552U, 0x1E7AU, 0x2D80U, 0x680U, 0x1C5CU, 0x2657U, 0x27C4U, 0x1A41U, 0x260AU, 0x27B9U, 0x211BU, 0x2029U,
	0x26E2U, 0x58EU, 0x2315U, 0x503U, 0x154AU, 0x2C30U, 0x650U, 0xE9EU, 0x2B3CU, 0x2877U, 0x137FU, 0x2C9U, 0xE1DU, 0x244EU, 0x209EU, 0x1260U,
	0x2A0U, 0x60U, 0x1B7CU, 0x2637U, 0x2E9BU, 0xD84U, 0x1681U, 0x337U, 0x299BU, 0x2F17U, 0x2904U, 0x5DCU, 0x1569U, 0x30FU, 0xE27U, 0x2B2BU,
	0x2199U, 0x203BU, 0x2009U, 0x2DB9U, 0x28D2U, 0x138CU, 0x1082U, 0x1DCAU, 0xB1DU, 0x872U, 0xEECU, 0x1D90U, 0x2683U, 0xC5CU, 0x1C4U, 0x2966U,
	0x5EAU, 0x156BU, 0x17A2U, 0x17F3U, 0x1123U, 0x1DE1U, 0x1FB3U, 0x191AU, 0x396U, 0x22CDU, 0x2067U, 0x4A1U, 0x153CU, 0x2C2EU, 0x21BEU, 0x4D2U,
	0x1543U, 0x2C2FU, 0x1407U, 0x9B8U, 0x83FU, 0x2A53U, 0x13C3U, 0x1E41U, 0xB2EU, 0xF50U, 0x230U, 0x50U, 0x6E7U, 0x7D8U, 0xED6U, 0x2B44U,
	0x1AC1U, 0xAAEU, 0x2AACU, 0x2F3EU, 0x222EU, 0x4E2U, 0x29D8U, 0x1A8DU, 0x3CBU, 0x1BF9U, 0x3FFU, 0x22DCU, 0x12B2U, 0x1E1AU, 0x1204U, 0x104AU,
	0x1DC2U, 0x18D3U, 0x1143U, 0x170AU, 0x2C70U, 0x28A3U, 0x2818U, 0x1A4DU, 0x1179U, 0x27FU, 0x14EEU, 0x9D9U, 0x23B2U, 0xBF5U, 0x1648U, 0x10E6U,
	0x26AU, 0x14EBU, 0x2FDU, 0x1500U, 0x300U, 0x1BDCU, 0x11B2U, 0x24D1U, 0xC1EU, 0x2405U, 0x19B8U, 0x2CD2U, 0x28B1U, 0x281AU, 0x2EE0U, 0x1B45U,
	0x1878U, 0x1136U, 0x951U, 0x1CC3U, 0x11D3U, 0x1043U, 0x1DC1U, 0x268AU, 0xC5DU, 0x240EU, 0x2E4CU, 0x28E7U, 0x138FU, 0x175EU, 0x2C7CU, 0x1412U,
	0x2DEU, 0xE20U, 0x2B2AU, 0x2F50U, 0x1B55U, 0x2D0DU, 0x2F95U, 0x2916U, 0x2F04U, 0xD93U, 0x8CCU, 0x1CB0U, 0x2663U, 0x1333U, 0x2508U, 0x19DDU,
	0x1169U, 0x1DEBU, 0x2690U, 0x1A15U, 0x1171U, 0x1035U, 0x1DBFU, 0x11F7U, 0x291U, 0xE15U, 0x203U, 0x296FU, 0x1A7EU, 0x1180U, 0x280U, 0x737U,
	0xEBFU, 0x16AEU, 0xA19U, 0x1604U, 0x256FU, 0x559U, 0x29E9U, 0x216BU, 0x2710U, 0x2EBAU, 0x1464U, 0x1E58U, 0x1FC4U, 0x1FF8U, 0x26DBU, 0x58DU,
	0xCBU, 0x1DU, 0x224EU, 0x2E0CU, 0x694U, 0x2A16U, 0x284DU, 0x1379U, 0x2512U, 0x20BAU, 0x1264U, 0x2BC6U, 0x13F8U, 0x176DU, 0x1EC7U, 0x2D8BU,
	0x2FA7U, 0x223DU, 0x272EU, 0x1350U, 0x1755U, 0x17E8U, 0x17FDU, 0x1800U, 0x1EDCU, 0x2D8EU, 0x682U, 0xEEU, 0x22U, 0xDBCU, 0x1689U, 0x2582U,
	0x20CAU, 0x26F9U, 0x1A24U, 0x3BCU, 0x29AEU, 0x1A87U, 0x2614U, 0x2E96U, 0x2216U, 0x2E04U, 0x144AU, 0x2E6U, 0x6AU, 0x2259U, 0x2732U, 0xC75U,
	0x2AEDU, 0x13D9U, 0x108DU, 0x16F0U, 0x10FEU, 0x949U, 0x2A79U, 0x1AA4U, 0x1861U, 0x2CA1U, 0x28AAU, 0x2819U, 0xC96U, 0x165FU, 0x257CU, 0x1312U,
	0x995U, 0x83AU, 0xEE4U, 0x2B46U, 0x2F54U, 0x147AU, 0x10A4U, 0x2B86U, 0x21A6U, 0x2DF4U, 0x2FB6U, 0x1488U, 0x10A6U, 0x1018U, 0x2B72U, 0x13ECU,
	0x2BFEU, 0x1400U, 0x9B7U, 0x15F6U, 0x256DU, 0x20C7U, 0x201DU, 0xB72U, 0x2AC8U, 0x2F42U, 0x1B53U, 0x187AU, 0x25C9U, 0x131DU, 0x2BBU, 0xE1BU,
	0xFBBU, 0x16D2U, 0x2C68U, 0x658U, 0xE8U, 0x226BU, 0x2059U, 0x49FU, 0xA9U, 0x2262U, 0xBC5U, 0x88AU, 0x15CBU, 0x31DU, 0xE29U, 0xFBDU,
	0x2B65U, 0x633U, 0x1C51U, 0x2D31U, 0x21E3U, 0x196AU, 0xA7DU, 0x2AA5U, 0x2F3DU, 0x2FE5U, 0x2FFDU, 0x6DBU, 0x1C69U, 0x40FU, 0x770U, 0x110U,
	0xDDEU, 0x2445U, 0xC0AU, 0x164BU, 0x17C2U, 0x111CU, 0x1DE0U, 0x2D6AU, 0x1434U, 0x109AU, 0x24A9U, 0x20ABU, 0x2019U, 0x124DU, 0x1730U, 0x350U,
	0x22C3U, 0x198AU, 0x3A6U, 0x761U, 0xEC5U, 0x2466U, 0x277DU, 0x27EEU, 0x1A47U, 0x3C1U, 0x151CU, 0x304U, 0x1501U, 0x254AU, 0x20C2U, 0x4AEU,
	0x22F5U, 0xBDAU, 0x88DU, 0x1CA7U, 0x11CFU, 0x171EU, 0xA29U, 0x2A99U, 0x13CDU, 0x251EU, 0xC29U, 0x1D2BU, 0x1F99U, 0x2DA9U, 0x143DU, 0x252EU,
	0x20BEU, 0xB89U, 0xF5DU, 0xFE9U, 0xFFDU, 0x1DB7U, 0x1FADU, 0xB62U, 0x1633U, 0x10E3U, 0x2B8FU, 0x639U, 0x2A09U, 0x1A94U, 0x3CCU, 0xE42U,
	0x8E5U, 0x15D8U, 0x10D6U, 0x1DD6U, 0x268DU, 0x1339U, 0x2BFU, 0x740U, 0x2353U, 0x12C3U, 0x24F8U, 0x548U, 0x230BU, 0x2E27U, 0x144FU, 0x1E55U,
	0x18E8U, 0x1146U, 0x1DE6U, 0xB21U, 0x197U, 0x2284U, 0x1981U, 0x1F13U, 0xB4CU, 0x23E7U, 0x521U, 0x29E1U, 0x2F21U, 0x2FE1U, 0x6D7U, 0x2344U,
	0x2078U, 0xB7FU, 0x880U, 0xEEEU, 0x222U, 0x4EU, 0x2255U, 0x2E0DU, 0x28DEU, 0x2EFCU, 0x1B49U, 0x119DU, 0x24CEU, 0x542U, 0x1553U, 0x10C3U,
	0x265U, 0x297DU, 0x1A80U, 0x2613U, 0xC4CU, 0x1D30U, 0xB07U, 0x1626U, 0x32AU, 0x1BE2U, 0x1F6AU, 0x1234U, 0x1E08U, 0x18DDU, 0x1820U, 0x1805U,
	0xA4AU, 0x160BU, 0x2570U, 0x27A3U, 0x2ECFU, 0x1467U, 0x2534U, 0x2E76U, 0x28EDU, 0x2147U, 0x4C1U, 0xE65U, 0x8EAU, 0x146U, 0x2954U, 0xCC3U,
	0x1D41U, 0x11E5U, 0x96AU, 0x15EBU, 0x2C47U, 0x1AE6U, 0x1F46U, 0x1FE6U, 0x2DB4U, 0xD63U, 0x2B0FU, 0x2195U, 0x2716U, 0xC71U, 0x1C7U, 0x41U,
	0x149CU, 0x1E60U, 0x120EU, 0x1727U, 0x1EBDU, 0x26AEU, 0x2EACU, 0x1462U, 0x9C5U, 0x15F8U, 0x9FFU, 0x2A93U, 0x615U, 0x7BAU, 0x2A40U, 0x2853U,
	0x2131U, 0x1275U, 0x2A3U, 0x73CU, 0x2A2EU, 0x2F2CU, 0x2907U, 0xCB8U, 0x241BU, 0xC04U, 0x893U, 0x2A5FU, 0x2F33U, 0x2908U, 0x2F02U, 0x2901U
};

//~~~Public Functions~~~//

void FFTQ12289N1024::Decrypt(std::vector<byte> &Secret, const std::vector<ushort> &PrivateKey, const std::vector<byte> &Received)
{
	std::array<ushort, N> bp;
	std::array<ushort, N> c;
	std::array<ushort, N> v;

	DecodeB(bp, c, Received);
	PolyPointwise(v, PrivateKey, bp);
	Utility::PolyMath::BitReverse(v);
	InvNTT(v);
	Reconcile(Secret, v, c);
}

void FFTQ12289N1024::Encrypt(std::vector<byte> &Secret, std::vector<byte> &Send, const std::vector<byte> &Received, std::unique_ptr<Prng::IPrng> &Rng, bool Parallel)
{
	std::array<ushort, N> a;
	std::array<ushort, N> bp;
	std::array<ushort, N> c;
	std::array<ushort, N> ep;
	std::array<ushort, N> epp;
	std::array<ushort, N> pka;
	std::array<ushort, N> sp;
	std::array<ushort, N> tbp;
	std::array<ushort, N> v;

	std::vector<byte> seed(SEED_BYTES);
	DecodeA(pka, seed, Received);
	std::vector<uint> buf1(N);
	Rng->Fill(buf1, 0, N);
	std::vector<uint> buf2(N);
	Rng->Fill(buf2, 0, N);

#if defined(CEX_HAS_OPENMP)
	if (Parallel)
	{
#		pragma omp parallel
		{
#			pragma omp single nowait
			{
				PolyUniform(a, seed, Parallel);
			}
#			pragma omp single nowait
			{
				PolyGetNoise(sp, buf1);
				FwdNTT(sp);
			}
#			pragma omp single nowait
			{
				PolyGetNoise(ep, buf2);
				FwdNTT(ep);
			}
		}
	}
	else
#endif
	{
		PolyUniform(a, seed, Parallel);

		PolyGetNoise(sp, buf1);
		FwdNTT(sp);

		PolyGetNoise(ep, buf2);
		FwdNTT(ep);
	}

	PolyPointwise(bp, a, sp);
	PolyAdd(tbp, bp, ep);

	PolyPointwise(v, pka, sp);
	Utility::PolyMath::BitReverse(v);
	InvNTT(v);
	Rng->Fill(buf1, 0, N);;
	PolyGetNoise(epp, buf1);
	PolyAdd(v, v, epp);

	Rng->GetBytes(seed);
	RecHelper(c, v, seed);
	EncodeB(Send, tbp, c);
	Reconcile(Secret, v, c);
}

void FFTQ12289N1024::Generate(std::vector<byte> &PublicKey, std::vector<ushort> &PrivateKey, std::unique_ptr<Prng::IPrng> &Rng, bool Parallel)
{
	std::array<ushort, N> a;
	std::array<ushort, N> e;
	std::array<ushort, N> pk;
	std::array<ushort, N> r;

	std::vector<uint> buf1(N);
	Rng->Fill(buf1, 0, N);
	std::vector<uint> buf2(N);
	Rng->Fill(buf2, 0, N);
	std::vector<byte> seed(SEED_BYTES);
	Rng->GetBytes(seed);

#if defined(CEX_HAS_OPENMP)
	if (Parallel)
	{
#		pragma omp parallel
		{
#			pragma omp single nowait
			{
				PolyUniform(a, seed, Parallel);
			}
#			pragma omp single nowait
			{
				PolyGetNoise(PrivateKey, buf1);
				FwdNTT(PrivateKey);
			}
#			pragma omp single nowait
			{
				PolyGetNoise(e, buf2);
				FwdNTT(e);
			}
		}
	}
	else
#endif
	{
		PolyUniform(a, seed, Parallel);

		PolyGetNoise(PrivateKey, buf1);
		FwdNTT(PrivateKey);

		PolyGetNoise(e, buf2);
		FwdNTT(e);
	}

	PolyPointwise(r, PrivateKey, a);
	PolyAdd(pk, e, r);
	EncodeA(PublicKey, pk, seed);
}

//~~~Private Functions~~~//

void FFTQ12289N1024::DecodeA(std::array<ushort, N> &PubKey, std::vector<byte> &Seed, const std::vector<byte> &R)
{
	FromBytes(PubKey, R);
	Utility::MemUtils::Copy(R, POLY_BYTES, Seed, 0, SEED_BYTES);
}

void FFTQ12289N1024::DecodeB(std::array<ushort, N> &B, std::array<ushort, N> &C, const std::vector<byte> &R)
{
	FromBytes(B, R);

	for (size_t i = 0; i < N / 4; i++)
	{
		C[(4 * i) + 0] = static_cast<ushort>(R[POLY_BYTES + i] & 0x03);
		C[(4 * i) + 1] = static_cast<ushort>((R[POLY_BYTES + i] >> 2) & 0x03);
		C[(4 * i) + 2] = static_cast<ushort>((R[POLY_BYTES + i] >> 4) & 0x03);
		C[(4 * i) + 3] = static_cast<ushort>((R[POLY_BYTES + i] >> 6));
	}
}

void FFTQ12289N1024::EncodeA(std::vector<byte> &R, const std::array<ushort, N> &PubKey, const std::vector<byte> &Seed)
{
	ToBytes(R, PubKey);
	Utility::MemUtils::Copy(Seed, 0, R, POLY_BYTES, SEED_BYTES);
}

void FFTQ12289N1024::EncodeB(std::vector<byte> &R, const std::array<ushort, N> &B, const std::array<ushort, N> &C)
{
	ToBytes(R, B);

	for (size_t i = 0; i < N / 4; i++)
	{
		R[POLY_BYTES + i] = C[4 * i] | (C[(4 * i) + 1] << 2) | (C[(4 * i) + 2] << 4) | (C[(4 * i) + 3] << 6);
	}
}

void FFTQ12289N1024::FromBytes(std::array<ushort, N> &R, const std::vector<byte> &A)
{
	for (size_t i = 0; i < N / 4; ++i)
	{
		R[(4 * i)] = A[(7 * i)] | ((static_cast<ushort>(A[(7 * i) + 1]) & 0x3f) << 8);
		R[(4 * i) + 1] = (A[(7 * i) + 1] >> 6) | ((static_cast<ushort>(A[(7 * i) + 2]) << 2) | ((static_cast<ushort>(A[(7 * i) + 3]) & 0x0f) << 10));
		R[(4 * i) + 2] = (A[(7 * i) + 3] >> 4) | ((static_cast<ushort>(A[(7 * i) + 4]) << 4) | ((static_cast<ushort>(A[(7 * i) + 5]) & 0x03) << 12));
		R[(4 * i) + 3] = (A[(7 * i) + 5] >> 2) | ((static_cast<ushort>(A[(7 * i) + 6]) << 6));
	}
}

void FFTQ12289N1024::PolyUniform(std::array<ushort, N> &A, const std::vector<byte> &Seed, bool Parallel)
{
	Drbg::BCG eng(Enumeration::BlockCiphers::Rijndael);
	size_t bufLen = (2 * N) * sizeof(ushort);

	if (Parallel)
	{
		if (bufLen >= eng.ParallelProfile().ParallelMinimumSize())
		{
			bufLen -= (bufLen % eng.ParallelProfile().ParallelMinimumSize());
			eng.ParallelProfile().ParallelBlockSize() = bufLen;
		}
	}
	else
	{
		eng.ParallelProfile().IsParallel() = false;
	}

	eng.Initialize(Seed);
	std::vector<byte> buf(bufLen);
	eng.Generate(buf, 0, buf.size());

	size_t ctr = 0;
	size_t pos = 0;
	ushort val;

	while (ctr < N)
	{
		// 0x3fff/16393 - Specialized for q = 12889
		val = ((buf[pos] | (static_cast<ushort>(buf[pos + 1]) << 8)) & 0x3FFF);
		if (val < Q)
		{
			A[ctr++] = val;
		}

		pos += 2;
		if (pos >= buf.size())
		{
			eng.Generate(buf, 0, buf.size());
			pos = 0;
		}
	}
}

void FFTQ12289N1024::RecHelper(std::array<ushort, N> &C, const std::array<ushort, N> &V, std::vector<byte> &Random)
{
#if defined(__AVX512__)
	HelpRec<Numeric::UInt512, std::array<ushort, N>, std::vector<byte>>(C, V, Random, Q);
#elif defined(__AVX2__)
	HelpRec<Numeric::UInt256, std::array<ushort, N>, std::vector<byte>>(C, V, Random, Q);
#elif defined(__AVX__)
	HelpRec<Numeric::UInt128, std::array<ushort, N>, std::vector<byte>>(C, V, Random, Q);
#else
	HelpRec<int, std::array<ushort, N>, std::vector<byte>>(C, V, Random, Q);
#endif
}

void FFTQ12289N1024::Reconcile(std::vector<byte> &Key, const std::array<ushort, N> &V, const std::array<ushort, N> &C)
{
#if defined(__AVX512__)
	Rec<Numeric::UInt512, std::vector<byte>, std::array<ushort, N>>(Key, V, C, Q);
#elif defined(__AVX2__)
	Rec<Numeric::UInt256, std::vector<byte>, std::array<ushort, N>>(Key, V, C, Q);
#elif defined(__AVX__)
	Rec<Numeric::UInt128, std::vector<byte>, std::array<ushort, N>>(Key, V, C, Q);
#else
	Rec<int, std::vector<byte>, std::array<ushort, N>>(Key, V, C, Q);
#endif
}

void FFTQ12289N1024::ToBytes(std::vector<byte> &R, const std::array<ushort, N> &Poly)
{
	short c;
	ushort m;
	ushort t0;
	ushort t1;
	ushort t2;
	ushort t3;

	for (size_t i = 0; i < Poly.size() / 4; i++)
	{
		// make sure that coefficients have only 14 bits
		t0 = BarrettReduce(Poly[(4 * i)]);
		t1 = BarrettReduce(Poly[(4 * i) + 1]);
		t2 = BarrettReduce(Poly[(4 * i) + 2]);
		t3 = BarrettReduce(Poly[(4 * i) + 3]);

		// make sure that coefficients are in [0,q]
		m = t0 - Q;
		c = m;
		c >>= 15;
		t0 = m ^ ((t0 ^ m) & c);
		m = t1 - Q;
		c = m;
		c >>= 15;
		t1 = m ^ ((t1 ^ m) & c);
		m = t2 - Q;
		c = m;
		c >>= 15;
		t2 = m ^ ((t2 ^ m) & c);
		m = t3 - Q;
		c = m;
		c >>= 15;
		t3 = m ^ ((t3 ^ m) & c);

		R[(7 * i)] = static_cast<byte>(t0 & 0xFF);
		R[(7 * i) + 1] = static_cast<byte>((t0 >> 8) | (t1 << 6));
		R[(7 * i) + 2] = static_cast<byte>(t1 >> 2);
		R[(7 * i) + 3] = static_cast<byte>((t1 >> 10) | (t2 << 4));
		R[(7 * i) + 4] = static_cast<byte>(t2 >> 4);
		R[(7 * i) + 5] = static_cast<byte>((t2 >> 12) | (t3 << 2));
		R[(7 * i) + 6] = static_cast<byte>(t3 >> 6);
	}
}

NAMESPACE_RINGLWEEND
