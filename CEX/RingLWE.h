// The GPL version 3 License (GPLv3)
// 
// Copyright (c) 2017 vtdev.com
// This file is part of the CEX Cryptographic library.
// 
// This program is free software : you can redistribute it and / or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

#ifndef CEX_RINGLWE_H
#define CEX_RINGLWE_H

#include "CexDomain.h"
#include "BlockCiphers.h"
#include "IAeadMode.h"
#include "IAsymmetricCipher.h"
#include "IBlockCipher.h"
#include "RLWEKeyPair.h"
#include "RLWEParams.h"
#include "RLWEParamSet.h"
#include "RLWEPrivateKey.h"
#include "RLWEPublicKey.h"

NAMESPACE_RINGLWE

using Cipher::Symmetric::Block::Mode::IAeadMode;
using Cipher::Symmetric::Block::IBlockCipher;
using Key::Asymmetric::RLWEKeyPair;
using Enumeration::RLWEParams;
using Key::Asymmetric::RLWEPrivateKey;
using Key::Asymmetric::RLWEPublicKey;
using Enumeration::BlockCiphers;

/// <summary>
/// An implementation of the Ring Learning With Errors asymmetric cipher (RingLWE)
/// </summary> 
/// 
/// <example>
/// <description>Key generation:</description>
/// <code>
/// RingLWE asycpr(RLWEParams::Q12289N1024);
/// IAsymmetricKeyPair* kp = asycpr.Generate();
/// 
/// // serialize the public key
/// RLWEPublicKey* pubK1 = (RLWEPublicKey*)kp->PublicKey();
/// std:vector&lt;byte&gt; skey = pubK1->ToBytes();
/// </code>
///
/// <description>Encryption:</description>
/// <code>
/// RingLWE asycpr(Enumeration::RLWEParams::Q12289N1024);
/// asycpr.Initialize(true, kp);
/// 
/// std:vector&lt;byte&gt; cpt = asycpr.Encrypt(msg);
/// </code>
///
/// <description>Decryption:</description>
/// <code>
/// RingLWE asycpr(Enumeration::RLWEParams::Q12289N1024);
/// asycpr.Initialize(false, kp);
/// 
/// try
/// {
///		std:vector&lt;byte&gt; msg = asycpr.Decrypt(cpt);
/// }
/// catch (const CryptoAuthenticationFailure &ex)
/// {
///		// handle the failure
/// }
/// </code>
/// </example>
/// 
/// <remarks>
/// <description>Implementation Notes:</description>
/// <para>Ring learning with errors (RLWE) is the Learning With Errors problem (a generalization of the parity learning problem), specialized to polynomial rings over finite fields. \n
/// An important feature of the ring LWE problem is that the solution may be reducible to the NP-Hard Shortest Vector Problem (SVP) in a Lattice. \n
/// This makes RingLWE a strong asymmetric cipher and resistant to currently known attack methods that could use quantum computers.</para>
///
/// <para>This implementation of RingLWE uses the NewHope reconcilliation method, whereby the shared seed is generated by the receiver,
/// and encrypted using a combination of the senders public key and the receivers public key, and then shared between hosts. \n
/// That seed is compressed with a Keccak digest and used to key the GCM AEAD mode which encrypts and authenticates the message.</para>
/// 
/// <list type="bullet">
/// <item><description>The Q12289/N1024 parameter set is the default cipher configuration; as of (1.0.0.3), this is currently the only parameter set, but a modular construction is used anticipating future expansion</description></item>
/// <item><description>The primary Prng is set through the constructor, as either an prng type-name (default BCR-AES256), which instantiates the function internally, or a pointer to a perisitant external instance of a Prng</description></item>
/// <item><description>The message digest used to condition the seed bytes is set automatically; Keccak512 for standard ciphers, Keccak1024 for extended ciphers</description></item>
/// <item><description>The secondary prng used to generate the public key (BCR), is an AES128/CTR-BE construction, (changed from Shake128 in the new hope version)</description></item>
/// <item><description>The message is authenticated using GCM, and throws CryptoAuthenticationFailure on decryption authentication failure</description></item>
/// </list>
/// 
/// <description>Guiding Publications:</description>
/// <list type="number">
/// <item><description>The NewHope: <a href="https://eprint.iacr.org/2015/1092">key exchange</a> from the ring learning with errors problem.</description></item>
/// <item><description>A Simple, Provably <a href="http://eprint.iacr.org/2012/688.pdf">Secure Key Exchange</a> Scheme Based on the Learning with Errors Problem.</description></item>
/// </list>
/// </remarks>
class RingLWE final : public IAsymmetricCipher
{
	// TODO: (I could use some help with this..)
	// Add at least one other parameter set (>= 200 bits of security). I can provide a template..

private:

	static const std::string CLASS_NAME;

	BlockCiphers m_cipherType;
	bool m_destroyEngine;
	bool m_isDestroyed;
	bool m_isEncryption;
	bool m_isInitialized;
	bool m_isParallel;
	std::unique_ptr<IAsymmetricKeyPair> m_keyPair;
	std::vector<byte> m_keyTag;
	RLWEParamSet m_paramSet;
	std::unique_ptr<RLWEPrivateKey> m_privateKey;
	std::unique_ptr<RLWEPublicKey> m_publicKey;
	RLWEParams m_rlweParameters;
	std::unique_ptr<IPrng> m_rndGenerator;

public:

	//~~~Constructor~~~//

	/// <summary>
	/// Copy constructor: copy is restricted, this function has been deleted
	/// </summary>
	RingLWE(const RingLWE&) = delete;

	/// <summary>
	/// Copy operator: copy is restricted, this function has been deleted
	/// </summary>
	RingLWE& operator=(const RingLWE&) = delete;

	/// <summary>
	/// Default constructor: default is restricted, this function has been deleted
	/// </summary>
	RingLWE() = delete;

	/// <summary>
	/// Instantiate the cipher with auto-initialized prng and digest functions
	/// </summary>
	///
	/// <param name="Parameters">The parameter set enumeration name</param>
	/// <param name="PrngType">The seed prng function type; the default is the BCR generator</param>
	/// <param name="CipherType">The authentication block ciphers type; the default is AES256</param>
	/// <param name="Parallel">The cipher is multi-threaded</param>
	/// 
	/// <exception cref="Exception::CryptoAsymmetricException">Thrown if an invalid block cipher type, prng type, or parameter set is specified</exception>
	explicit RingLWE(RLWEParams Parameters, Prngs PrngType = Prngs::BCR, BlockCiphers CipherType = BlockCiphers::Rijndael, bool Parallel = false);

	/// <summary>
	/// Constructor: instantiate this class using an external Prng instance
	/// </summary>
	///
	/// <param name="Parameters">The parameter set enumeration name</param>
	/// <param name="Prng">A pointer to the seed Prng function</param>
	/// <param name="CipherType">The authentication block ciphers type; the default is AES256</param>
	/// <param name="Parallel">The cipher is multi-threaded</param>
	/// 
	/// <exception cref="Exception::CryptoAsymmetricException">Thrown if an invalid block cipher, prng, or parameter set is specified</exception>
	RingLWE(RLWEParams Parameters, IPrng* Prng, BlockCiphers CipherType = BlockCiphers::Rijndael, bool Parallel = false);

	/// <summary>
	/// Destructor: finalize this class
	/// </summary>
	~RingLWE() override;

	//~~~Accessors~~~//

	/// <summary>
	/// Read Only: The cipher type-name
	/// </summary>
	const AsymmetricEngines Enumeral() override;

	/// <summary>
	/// Read Only: The cipher is initialized for encryption
	/// </summary>
	const bool IsEncryption() override;

	/// <summary>
	/// Read Only: The cipher has been initialized with a key
	/// </summary>
	const bool IsInitialized() override;

	/// <summary>
	/// Read Only: The cipher and parameter-set formal names
	/// </summary>
	const std::string Name() override;

	/// <summary>
	/// Read Only: The ciphers initialization parameters
	/// </summary>
	const RLWEParamSet &ParamSet();

	/// <summary>
	/// Read Only: The ciphers parameters enumeration name
	/// </summary>
	const RLWEParams Parameters();

	/// <summary>
	/// Read/Write: A new asymmetric key-pairs optional identification tag.
	/// <para>Setting this value must be done before the Generate method is called.</para>
	/// </summary>
	std::vector<byte> &Tag() override;

	//~~~Public Functions~~~//

	/// <summary>
	/// Decrypt an encrypted cipher-text and return the shared secret
	/// </summary>
	/// 
	/// <param name="CipherText">The input cipher-text</param>
	/// 
	/// <returns>The decrypted message</returns>
	///
	/// <exception cref="Exception::CryptoAsymmetricException">Fails on invalid input or configuration</exception>
	/// <exception cref="Exception::CryptoAuthenticationFailure">Thrown if the message has failed authentication, or the configuration is invalid</exception>
	std::vector<byte> Decrypt(const std::vector<byte> &CipherText) override;

	/// <summary>
	/// Encrypt a secret and return the encrypted message
	/// </summary>
	/// 
	/// <param name="Message">The shared secret array</param>
	/// 
	/// <returns>The encrypted message</returns>
	/// 
	/// <exception cref="Exception::CryptoAsymmetricException">Fails on invalid input or configuration</exception>
	std::vector<byte> Encrypt(const std::vector<byte> &Message) override;

	/// <summary>
	/// Generate a public/private key-pair
	/// </summary>
	/// 
	/// <returns>A public/private key pair</returns>
	/// 
	/// <exception cref="Exception::CryptoAsymmetricException">Thrown if the key generation call fails</exception>
	IAsymmetricKeyPair* Generate() override;

	/// <summary>
	/// Initialize the cipher for encryption or decryption
	/// </summary>
	/// 
	/// <param name="Encryption">Initialize the cipher for encryption or decryption</param>
	/// <param name="KeyPair">The <see cref="IAsymmetricKeyPair"/> containing the Public (encrypt) and/or Private (decryption) key</param>
	/// 
	/// <exception cref="Exception::CryptoAsymmetricException">Fails on invalid key or configuration error</exception>
	void Initialize(bool Encryption, IAsymmetricKeyPair* KeyPair) override;

private:

	bool RLWEDecrypt(const std::vector<byte> &CipherText, std::vector<byte> &Message, std::vector<byte> &Secret);
	void RLWEEncrypt(const std::vector<byte> &Message, std::vector<byte> &CipherText, std::vector<byte> &Secret);
	void Scope();
};

NAMESPACE_RINGLWEEND
#endif
