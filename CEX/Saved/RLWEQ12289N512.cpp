#include "RLWEQ12289N512.h"
#include "BCG.h"
#include "MemUtils.h"

#if defined(__AVX512__)
#	include "UInt512.h"
#elif defined(__AVX2__)
#	include "UInt256.h"
#elif defined(__AVX__)
#	include "UInt128.h"
#endif
#if defined(CEX_HAS_OPENMP)
#	include <omp.h>
#endif

NAMESPACE_RINGLWE

//~~~Constant Tables~~~//

const std::string RLWEQ12289N512::Name = "Q12289N1024";

const std::array<ushort, 512> RLWEQ12289N512::BitrevTable =
{
	0x0000U, 0x0100U, 0x0080U, 0x0180U, 0x0040U, 0x0140U, 0x00C0U, 0x01C0U, 0x0020U, 0x0120U, 0x00A0U, 0x01A0U, 0x0060U, 0x0160U, 0x00E0U, 0x01E0U,
	0x0010U, 0x0110U, 0x0090U, 0x0190U, 0x0050U, 0x0150U, 0x00D0U, 0x01D0U, 0x0030U, 0x0130U, 0x00B0U, 0x01B0U, 0x0070U, 0x0170U, 0x00F0U, 0x01F0U,
	0x0008U, 0x0108U, 0x0088U, 0x0188U, 0x0048U, 0x0148U, 0x00C8U, 0x01C8U, 0x0028U, 0x0128U, 0x00A8U, 0x01A8U, 0x0068U, 0x0168U, 0x00E8U, 0x01E8U,
	0x0018U, 0x0118U, 0x0098U, 0x0198U, 0x0058U, 0x0158U, 0x00D8U, 0x01D8U, 0x0038U, 0x0138U, 0x00B8U, 0x01B8U, 0x0078U, 0x0178U, 0x00F8U, 0x01F8U,
	0x0004U, 0x0104U, 0x0084U, 0x0184U, 0x0044U, 0x0144U, 0x00C4U, 0x01C4U, 0x0024U, 0x0124U, 0x00A4U, 0x01A4U, 0x0064U, 0x0164U, 0x00E4U, 0x01E4U,
	0x0014U, 0x0114U, 0x0094U, 0x0194U, 0x0054U, 0x0154U, 0x00D4U, 0x01D4U, 0x0034U, 0x0134U, 0x00B4U, 0x01B4U, 0x0074U, 0x0174U, 0x00F4U, 0x01F4U,
	0x000CU, 0x010CU, 0x008CU, 0x018CU, 0x004CU, 0x014CU, 0x00CCU, 0x01CCU, 0x002CU, 0x012CU, 0x00ACU, 0x01ACU, 0x006CU, 0x016CU, 0x00ECU, 0x01ECU,
	0x001CU, 0x011CU, 0x009CU, 0x019CU, 0x005CU, 0x015CU, 0x00DCU, 0x01DCU, 0x003CU, 0x013CU, 0x00BCU, 0x01BCU, 0x007CU, 0x017CU, 0x00FCU, 0x01FCU,
	0x0002U, 0x0102U, 0x0082U, 0x0182U, 0x0042U, 0x0142U, 0x00C2U, 0x01C2U, 0x0022U, 0x0122U, 0x00A2U, 0x01A2U, 0x0062U, 0x0162U, 0x00E2U, 0x01E2U,
	0x0012U, 0x0112U, 0x0092U, 0x0192U, 0x0052U, 0x0152U, 0x00D2U, 0x01D2U, 0x0032U, 0x0132U, 0x00B2U, 0x01B2U, 0x0072U, 0x0172U, 0x00F2U, 0x01F2U,
	0x000AU, 0x010AU, 0x008AU, 0x018AU, 0x004AU, 0x014AU, 0x00CAU, 0x01CAU, 0x002AU, 0x012AU, 0x00AAU, 0x01AAU, 0x006AU, 0x016AU, 0x00EAU, 0x01EAU,
	0x001AU, 0x011AU, 0x009AU, 0x019AU, 0x005AU, 0x015AU, 0x00DAU, 0x01DAU, 0x003AU, 0x013AU, 0x00BAU, 0x01BAU, 0x007AU, 0x017AU, 0x00FAU, 0x01FAU,
	0x0006U, 0x0106U, 0x0086U, 0x0186U, 0x0046U, 0x0146U, 0x00C6U, 0x01C6U, 0x0026U, 0x0126U, 0x00A6U, 0x01A6U, 0x0066U, 0x0166U, 0x00E6U, 0x01E6U,
	0x0016U, 0x0116U, 0x0096U, 0x0196U, 0x0056U, 0x0156U, 0x00D6U, 0x01D6U, 0x0036U, 0x0136U, 0x00B6U, 0x01B6U, 0x0076U, 0x0176U, 0x00F6U, 0x01F6U,
	0x000EU, 0x010EU, 0x008EU, 0x018EU, 0x004EU, 0x014EU, 0x00CEU, 0x01CEU, 0x002EU, 0x012EU, 0x00AEU, 0x01AEU, 0x006EU, 0x016EU, 0x00EEU, 0x01EEU,
	0x001EU, 0x011EU, 0x009EU, 0x019EU, 0x005EU, 0x015EU, 0x00DEU, 0x01DEU, 0x003EU, 0x013EU, 0x00BEU, 0x01BEU, 0x007EU, 0x017EU, 0x00FEU, 0x01FEU,
	0x0001U, 0x0101U, 0x0081U, 0x0181U, 0x0041U, 0x0141U, 0x00C1U, 0x01C1U, 0x0021U, 0x0121U, 0x00A1U, 0x01A1U, 0x0061U, 0x0161U, 0x00E1U, 0x01E1U,
	0x0011U, 0x0111U, 0x0091U, 0x0191U, 0x0051U, 0x0151U, 0x00D1U, 0x01D1U, 0x0031U, 0x0131U, 0x00B1U, 0x01B1U, 0x0071U, 0x0171U, 0x00F1U, 0x01F1U,
	0x0009U, 0x0109U, 0x0089U, 0x0189U, 0x0049U, 0x0149U, 0x00C9U, 0x01C9U, 0x0029U, 0x0129U, 0x00A9U, 0x01A9U, 0x0069U, 0x0169U, 0x00E9U, 0x01E9U,
	0x0019U, 0x0119U, 0x0099U, 0x0199U, 0x0059U, 0x0159U, 0x00D9U, 0x01D9U, 0x0039U, 0x0139U, 0x00B9U, 0x01B9U, 0x0079U, 0x0179U, 0x00F9U, 0x01F9U,
	0x0005U, 0x0105U, 0x0085U, 0x0185U, 0x0045U, 0x0145U, 0x00C5U, 0x01C5U, 0x0025U, 0x0125U, 0x00A5U, 0x01A5U, 0x0065U, 0x0165U, 0x00E5U, 0x01E5U,
	0x0015U, 0x0115U, 0x0095U, 0x0195U, 0x0055U, 0x0155U, 0x00D5U, 0x01D5U, 0x0035U, 0x0135U, 0x00B5U, 0x01B5U, 0x0075U, 0x0175U, 0x00F5U, 0x01F5U,
	0x000DU, 0x010DU, 0x008DU, 0x018DU, 0x004DU, 0x014DU, 0x00CDU, 0x01CDU, 0x002DU, 0x012DU, 0x00ADU, 0x01ADU, 0x006DU, 0x016DU, 0x00EDU, 0x01EDU,
	0x001DU, 0x011DU, 0x009DU, 0x019DU, 0x005DU, 0x015DU, 0x00DDU, 0x01DDU, 0x003DU, 0x013DU, 0x00BDU, 0x01BDU, 0x007DU, 0x017DU, 0x00FDU, 0x01FDU,
	0x0003U, 0x0103U, 0x0083U, 0x0183U, 0x0043U, 0x0143U, 0x00C3U, 0x01C3U, 0x0023U, 0x0123U, 0x00A3U, 0x01A3U, 0x0063U, 0x0163U, 0x00E3U, 0x01E3U,
	0x0013U, 0x0113U, 0x0093U, 0x0193U, 0x0053U, 0x0153U, 0x00D3U, 0x01D3U, 0x0033U, 0x0133U, 0x00B3U, 0x01B3U, 0x0073U, 0x0173U, 0x00F3U, 0x01F3U,
	0x000BU, 0x010BU, 0x008BU, 0x018BU, 0x004BU, 0x014BU, 0x00CBU, 0x01CBU, 0x002BU, 0x012BU, 0x00ABU, 0x01ABU, 0x006BU, 0x016BU, 0x00EBU, 0x01EBU,
	0x001BU, 0x011BU, 0x009BU, 0x019BU, 0x005BU, 0x015BU, 0x00DBU, 0x01DBU, 0x003BU, 0x013BU, 0x00BBU, 0x01BBU, 0x007BU, 0x017BU, 0x00FBU, 0x01FBU,
	0x0007U, 0x0107U, 0x0087U, 0x0187U, 0x0047U, 0x0147U, 0x00C7U, 0x01C7U, 0x0027U, 0x0127U, 0x00A7U, 0x01A7U, 0x0067U, 0x0167U, 0x00E7U, 0x01E7U,
	0x0017U, 0x0117U, 0x0097U, 0x0197U, 0x0057U, 0x0157U, 0x00D7U, 0x01D7U, 0x0037U, 0x0137U, 0x00B7U, 0x01B7U, 0x0077U, 0x0177U, 0x00F7U, 0x01F7U,
	0x000FU, 0x010FU, 0x008FU, 0x018FU, 0x004FU, 0x014FU, 0x00CFU, 0x01CFU, 0x002FU, 0x012FU, 0x00AFU, 0x01AFU, 0x006FU, 0x016FU, 0x00EFU, 0x01EFU,
	0x001FU, 0x011FU, 0x009FU, 0x019FU, 0x005FU, 0x015FU, 0x00DFU, 0x01DFU, 0x003FU, 0x013FU, 0x00BFU, 0x01BFU, 0x007FU, 0x017FU, 0x00FFU, 0x01FFU
};

const std::array<ushort, 256> RLWEQ12289N512::OmegasMontgomery =
{
	0x0FEBU, 0x14C3U, 0x1F1DU, 0x1CCDU, 0x020AU, 0x2788U, 0x2343U, 0x13D7U, 0x0928U, 0x04FEU, 0x07B5U, 0x15C6U, 0x03FAU, 0x18DCU, 0x2BF0U, 0x2247U,
	0x1D4CU, 0x1E8EU, 0x15A1U, 0x128DU, 0x2134U, 0x2F6EU, 0x1550U, 0x1EA0U, 0x1545U, 0x0F14U, 0x11B8U, 0x2BE7U, 0x181BU, 0x2117U, 0x0A7BU, 0x2B5BU,
	0x2941U, 0x0190U, 0x17F9U, 0x1CADU, 0x1527U, 0x21C6U, 0x17F8U, 0x16E6U, 0x1599U, 0x1456U, 0x0038U, 0x2382U, 0x2214U, 0x2D73U, 0x06A6U, 0x283EU,
	0x14DBU, 0x1ABBU, 0x17CDU, 0x0E7EU, 0x013CU, 0x017EU, 0x2E2DU, 0x206DU, 0x2AB2U, 0x153BU, 0x2B1BU, 0x03CDU, 0x2063U, 0x2810U, 0x20DAU, 0x0782U,
	0x2F41U, 0x2AD8U, 0x2800U, 0x1330U, 0x125AU, 0x13C1U, 0x1D55U, 0x228CU, 0x2267U, 0x2CEEU, 0x155CU, 0x03F2U, 0x23CAU, 0x1FB8U, 0x0B68U, 0x1479U,
	0x17A7U, 0x22F9U, 0x02A5U, 0x16F2U, 0x0ACEU, 0x2AD6U, 0x2FCDU, 0x239BU, 0x2F6AU, 0x27B2U, 0x0F75U, 0x0B17U, 0x18EFU, 0x09C9U, 0x2E52U, 0x062BU,
	0x2342U, 0x0E10U, 0x17BDU, 0x1210U, 0x2E5CU, 0x0FF0U, 0x17B4U, 0x0E12U, 0x025DU, 0x2703U, 0x01F8U, 0x1F8CU, 0x12AEU, 0x1903U, 0x0BD5U, 0x1A27U,
	0x2BB0U, 0x008EU, 0x1631U, 0x226CU, 0x0B1CU, 0x0D6EU, 0x1F8DU, 0x03CFU, 0x003AU, 0x2F10U, 0x03EBU, 0x2235U, 0x0375U, 0x1889U, 0x07A4U, 0x1391U,
	0x2FC1U, 0x0E48U, 0x2D56U, 0x2666U, 0x061EU, 0x1696U, 0x09C7U, 0x0B84U, 0x1B78U, 0x0EFAU, 0x171FU, 0x1151U, 0x0BEEU, 0x1A93U, 0x23CEU, 0x06D3U,
	0x27E3U, 0x2BA9U, 0x10E2U, 0x07A6U, 0x039AU, 0x2E48U, 0x0FEFU, 0x2BDFU, 0x0FCEU, 0x2D3CU, 0x0527U, 0x23B3U, 0x1850U, 0x0343U, 0x1F71U, 0x220FU,
	0x1BC1U, 0x04B0U, 0x17EAU, 0x2606U, 0x0F74U, 0x0550U, 0x17E7U, 0x14B1U, 0x10CAU, 0x0D01U, 0x00A8U, 0x0A84U, 0x063AU, 0x2857U, 0x13F2U, 0x18B8U,
	0x0E90U, 0x2030U, 0x1766U, 0x2B7AU, 0x03B4U, 0x047AU, 0x2A85U, 0x0145U, 0x2014U, 0x0FB0U, 0x214FU, 0x0B67U, 0x0127U, 0x182EU, 0x028CU, 0x1686U,
	0x2DC1U, 0x2086U, 0x17FEU, 0x098FU, 0x070DU, 0x0B42U, 0x27FEU, 0x07A2U, 0x0733U, 0x26C8U, 0x1013U, 0x0BD6U, 0x0B5CU, 0x2F27U, 0x2238U, 0x0D6AU,
	0x16F4U, 0x08E9U, 0x07EFU, 0x14D5U, 0x206AU, 0x2080U, 0x2F65U, 0x0ACFU, 0x2E3CU, 0x1714U, 0x2E5FU, 0x2145U, 0x1ACCU, 0x1D5BU, 0x2AF4U, 0x1281U,
	0x09C4U, 0x2A30U, 0x1736U, 0x062FU, 0x2B12U, 0x2FD0U, 0x171BU, 0x2A36U, 0x0717U, 0x1507U, 0x05E8U, 0x2EA3U, 0x0809U, 0x1B08U, 0x237FU, 0x1E74U,
	0x230EU, 0x01AAU, 0x1292U, 0x0742U, 0x2154U, 0x284AU, 0x2EA6U, 0x0B6DU, 0x00AEU, 0x2D2EU, 0x0BC1U, 0x069DU, 0x0A5FU, 0x199AU, 0x16ECU, 0x0AB2U
};

const std::array<ushort, 256> RLWEQ12289N512::OmegasInvMontgomery =
{
	0x0FEBU, 0x1B3EU, 0x1334U, 0x10E4U, 0x1C2AU, 0x0CBEU, 0x0879U, 0x2DF7U, 0x0DBAU, 0x0411U, 0x1725U, 0x2C07U, 0x1A3BU, 0x284CU, 0x2B03U, 0x26D9U,
	0x04A6U, 0x2586U, 0x0EEAU, 0x17E6U, 0x041AU, 0x1E49U, 0x20EDU, 0x1ABCU, 0x1161U, 0x1AB1U, 0x0093U, 0x0ECDU, 0x1D74U, 0x1A60U, 0x1173U, 0x12B5U,
	0x287FU, 0x0F27U, 0x07F1U, 0x0F9EU, 0x2C34U, 0x04E6U, 0x1AC6U, 0x054FU, 0x0F94U, 0x01D4U, 0x2E83U, 0x2EC5U, 0x2183U, 0x1834U, 0x1546U, 0x1B26U,
	0x07C3U, 0x295BU, 0x028EU, 0x0DEDU, 0x0C7FU, 0x2FC9U, 0x1BABU, 0x1A68U, 0x191BU, 0x1809U, 0x0E3BU, 0x1ADAU, 0x1354U, 0x1808U, 0x2E71U, 0x06C0U,
	0x1C70U, 0x285DU, 0x1778U, 0x2C8CU, 0x0DCCU, 0x2C16U, 0x00F1U, 0x2FC7U, 0x2C32U, 0x1074U, 0x2293U, 0x24E5U, 0x0D95U, 0x19D0U, 0x2F73U, 0x0451U,
	0x15DAU, 0x242CU, 0x16FEU, 0x1D53U, 0x1075U, 0x2E09U, 0x08FEU, 0x2DA4U, 0x21EFU, 0x184DU, 0x2011U, 0x01A5U, 0x1DF1U, 0x1844U, 0x21F1U, 0x0CBFU,
	0x29D6U, 0x01AFU, 0x2638U, 0x1712U, 0x24EAU, 0x208CU, 0x084FU, 0x0097U, 0x0C66U, 0x0034U, 0x052BU, 0x2533U, 0x190FU, 0x2D5CU, 0x0D08U, 0x185AU,
	0x1B88U, 0x2499U, 0x1049U, 0x0C37U, 0x2C0FU, 0x1AA5U, 0x0313U, 0x0D9AU, 0x0D75U, 0x12ACU, 0x1C40U, 0x1DA7U, 0x1CD1U, 0x0801U, 0x0529U, 0x00C0U,
	0x254FU, 0x1915U, 0x1667U, 0x25A2U, 0x2964U, 0x2440U, 0x02D3U, 0x2F53U, 0x2494U, 0x015BU, 0x07B7U, 0x0EADU, 0x28BFU, 0x1D6FU, 0x2E57U, 0x0CF3U,
	0x118DU, 0x0C82U, 0x14F9U, 0x27F8U, 0x015EU, 0x2A19U, 0x1AFAU, 0x28EAU, 0x05CBU, 0x18E6U, 0x0031U, 0x04EFU, 0x29D2U, 0x18CBU, 0x05D1U, 0x263DU,
	0x1D80U, 0x050DU, 0x12A6U, 0x1535U, 0x0EBCU, 0x01A2U, 0x18EDU, 0x01C5U, 0x2532U, 0x009CU, 0x0F81U, 0x0F97U, 0x1B2CU, 0x2812U, 0x2718U, 0x190DU,
	0x2297U, 0x0DC9U, 0x00DAU, 0x24A5U, 0x242BU, 0x1FEEU, 0x0939U, 0x28CEU, 0x285FU, 0x0803U, 0x24BFU, 0x28F4U, 0x2672U, 0x1803U, 0x0F7BU, 0x0240U,
	0x197BU, 0x2D75U, 0x17D3U, 0x2EDAU, 0x249AU, 0x0EB2U, 0x2051U, 0x0FEDU, 0x2EBCU, 0x057CU, 0x2B87U, 0x2C4DU, 0x0487U, 0x189BU, 0x0FD1U, 0x2171U,
	0x1749U, 0x1C0FU, 0x07AAU, 0x29C7U, 0x257DU, 0x2F59U, 0x2300U, 0x1F37U, 0x1B50U, 0x181AU, 0x2AB1U, 0x208DU, 0x09FBU, 0x1817U, 0x2B51U, 0x1440U,
	0x0DF2U, 0x1090U, 0x2CBEU, 0x17B1U, 0x0C4EU, 0x2ADAU, 0x02C5U, 0x2033U, 0x0422U, 0x2012U, 0x01B9U, 0x2C67U, 0x285BU, 0x1F1FU, 0x0458U, 0x081EU,
	0x292EU, 0x0C33U, 0x156EU, 0x2413U, 0x1EB0U, 0x18E2U, 0x2107U, 0x1489U, 0x247DU, 0x263AU, 0x196BU, 0x29E3U, 0x099BU, 0x02ABU, 0x21B9U, 0x0040U
};

const std::array<ushort, 512> RLWEQ12289N512::PsisBitrevMontgomery =
{
	0x0FEBU, 0x14C3U, 0x1F1DU, 0x1CCDU, 0x020AU, 0x2788U, 0x2343U, 0x13D7U, 0x0928U, 0x04FEU, 0x07B5U, 0x15C6U, 0x03FAU, 0x18DCU, 0x2BF0U, 0x2247U,
	0x1D4CU, 0x1E8EU, 0x15A1U, 0x128DU, 0x2134U, 0x2F6EU, 0x1550U, 0x1EA0U, 0x1545U, 0x0F14U, 0x11B8U, 0x2BE7U, 0x181BU, 0x2117U, 0x0A7BU, 0x2B5BU,
	0x2941U, 0x0190U, 0x17F9U, 0x1CADU, 0x1527U, 0x21C6U, 0x17F8U, 0x16E6U, 0x1599U, 0x1456U, 0x0038U, 0x2382U, 0x2214U, 0x2D73U, 0x06A6U, 0x283EU,
	0x14DBU, 0x1ABBU, 0x17CDU, 0x0E7EU, 0x013CU, 0x017EU, 0x2E2DU, 0x206DU, 0x2AB2U, 0x153BU, 0x2B1BU, 0x03CDU, 0x2063U, 0x2810U, 0x20DAU, 0x0782U,
	0x2F41U, 0x2AD8U, 0x2800U, 0x1330U, 0x125AU, 0x13C1U, 0x1D55U, 0x228CU, 0x2267U, 0x2CEEU, 0x155CU, 0x03F2U, 0x23CAU, 0x1FB8U, 0x0B68U, 0x1479U,
	0x17A7U, 0x22F9U, 0x02A5U, 0x16F2U, 0x0ACEU, 0x2AD6U, 0x2FCDU, 0x239BU, 0x2F6AU, 0x27B2U, 0x0F75U, 0x0B17U, 0x18EFU, 0x09C9U, 0x2E52U, 0x062BU,
	0x2342U, 0x0E10U, 0x17BDU, 0x1210U, 0x2E5CU, 0x0FF0U, 0x17B4U, 0x0E12U, 0x025DU, 0x2703U, 0x01F8U, 0x1F8CU, 0x12AEU, 0x1903U, 0x0BD5U, 0x1A27U,
	0x2BB0U, 0x008EU, 0x1631U, 0x226CU, 0x0B1CU, 0x0D6EU, 0x1F8DU, 0x03CFU, 0x003AU, 0x2F10U, 0x03EBU, 0x2235U, 0x0375U, 0x1889U, 0x07A4U, 0x1391U,
	0x2FC1U, 0x0E48U, 0x2D56U, 0x2666U, 0x061EU, 0x1696U, 0x09C7U, 0x0B84U, 0x1B78U, 0x0EFAU, 0x171FU, 0x1151U, 0x0BEEU, 0x1A93U, 0x23CEU, 0x06D3U,
	0x27E3U, 0x2BA9U, 0x10E2U, 0x07A6U, 0x039AU, 0x2E48U, 0x0FEFU, 0x2BDFU, 0x0FCEU, 0x2D3CU, 0x0527U, 0x23B3U, 0x1850U, 0x0343U, 0x1F71U, 0x220FU,
	0x1BC1U, 0x04B0U, 0x17EAU, 0x2606U, 0x0F74U, 0x0550U, 0x17E7U, 0x14B1U, 0x10CAU, 0x0D01U, 0x00A8U, 0x0A84U, 0x063AU, 0x2857U, 0x13F2U, 0x18B8U,
	0x0E90U, 0x2030U, 0x1766U, 0x2B7AU, 0x03B4U, 0x047AU, 0x2A85U, 0x0145U, 0x2014U, 0x0FB0U, 0x214FU, 0x0B67U, 0x0127U, 0x182EU, 0x028CU, 0x1686U,
	0x2DC1U, 0x2086U, 0x17FEU, 0x098FU, 0x070DU, 0x0B42U, 0x27FEU, 0x07A2U, 0x0733U, 0x26C8U, 0x1013U, 0x0BD6U, 0x0B5CU, 0x2F27U, 0x2238U, 0x0D6AU,
	0x16F4U, 0x08E9U, 0x07EFU, 0x14D5U, 0x206AU, 0x2080U, 0x2F65U, 0x0ACFU, 0x2E3CU, 0x1714U, 0x2E5FU, 0x2145U, 0x1ACCU, 0x1D5BU, 0x2AF4U, 0x1281U,
	0x09C4U, 0x2A30U, 0x1736U, 0x062FU, 0x2B12U, 0x2FD0U, 0x171BU, 0x2A36U, 0x0717U, 0x1507U, 0x05E8U, 0x2EA3U, 0x0809U, 0x1B08U, 0x237FU, 0x1E74U,
	0x230EU, 0x01AAU, 0x1292U, 0x0742U, 0x2154U, 0x284AU, 0x2EA6U, 0x0B6DU, 0x00AEU, 0x2D2EU, 0x0BC1U, 0x069DU, 0x0A5FU, 0x199AU, 0x16ECU, 0x0AB2U,
	0x2E14U, 0x2001U, 0x26B4U, 0x1544U, 0x2A9FU, 0x0778U, 0x1F10U, 0x01B3U, 0x0194U, 0x1DDCU, 0x2BD8U, 0x27A2U, 0x1B64U, 0x2B71U, 0x2B4AU, 0x2351U,
	0x25FBU, 0x088BU, 0x268BU, 0x186AU, 0x0E3EU, 0x267CU, 0x187BU, 0x0BABU, 0x213DU, 0x036BU, 0x1370U, 0x29BAU, 0x1F45U, 0x13E0U, 0x1C6EU, 0x2C17U,
	0x2407U, 0x001BU, 0x0EB3U, 0x2A61U, 0x2C08U, 0x1CECU, 0x13DCU, 0x29A1U, 0x1FD2U, 0x126AU, 0x2F0FU, 0x2A00U, 0x0A76U, 0x0E78U, 0x0221U, 0x1C66U,
	0x042BU, 0x13EDU, 0x01BAU, 0x0961U, 0x0186U, 0x2CFCU, 0x0EC2U, 0x2108U, 0x0415U, 0x24D6U, 0x2650U, 0x1394U, 0x24A1U, 0x19BFU, 0x2E9FU, 0x12FDU,
	0x1EACU, 0x0003U, 0x0C4DU, 0x2F61U, 0x2F90U, 0x1337U, 0x278BU, 0x0F4BU, 0x0E34U, 0x1CB7U, 0x0A90U, 0x14ABU, 0x067FU, 0x06F1U, 0x0592U, 0x1DD3U,
	0x05CCU, 0x1CE2U, 0x0ADCU, 0x1BB6U, 0x202CU, 0x0A55U, 0x1C4FU, 0x0901U, 0x0B1FU, 0x1EC3U, 0x1EEDU, 0x2783U, 0x2968U, 0x22DDU, 0x0FD9U, 0x0CC7U,
	0x2439U, 0x00F3U, 0x2449U, 0x2D62U, 0x0C40U, 0x1447U, 0x22B9U, 0x26A2U, 0x2E5DU, 0x15B7U, 0x277FU, 0x29F9U, 0x2E25U, 0x2236U, 0x1329U, 0x0F91U,
	0x2583U, 0x2352U, 0x0F8AU, 0x2468U, 0x0DB6U, 0x14D4U, 0x24D0U, 0x0942U, 0x24BDU, 0x2B80U, 0x08C9U, 0x2031U, 0x29A3U, 0x27B3U, 0x238FU, 0x1AE2U,
	0x2A3AU, 0x0001U, 0x141AU, 0x0FCBU, 0x1FDBU, 0x1668U, 0x2D2FU, 0x0519U, 0x04BCU, 0x2993U, 0x2386U, 0x16E4U, 0x222BU, 0x2251U, 0x21DCU, 0x09F1U,
	0x11EFU, 0x19A1U, 0x139FU, 0x193DU, 0x2ABAU, 0x1372U, 0x1970U, 0x2301U, 0x03B5U, 0x0A41U, 0x0A4FU, 0x1D2CU, 0x2DCEU, 0x0B9FU, 0x2549U, 0x2443U,
	0x0C13U, 0x0051U, 0x2C19U, 0x1F21U, 0x2416U, 0x26C3U, 0x0B93U, 0x1CE1U, 0x2F75U, 0x073DU, 0x2D2BU, 0x1DFEU, 0x1F62U, 0x2B68U, 0x0663U, 0x2531U,
	0x0C81U, 0x0BC6U, 0x052EU, 0x1C23U, 0x0492U, 0x26F2U, 0x2C46U, 0x0316U, 0x0C3FU, 0x0E80U, 0x12EEU, 0x0ABBU, 0x0DE1U, 0x1D3CU, 0x2BDBU, 0x08F6U,
	0x2C03U, 0x0009U, 0x24E7U, 0x2E21U, 0x2EAEU, 0x09A4U, 0x169FU, 0x2DE1U, 0x2A9CU, 0x2624U, 0x1FB0U, 0x0E00U, 0x137DU, 0x14D3U, 0x10B6U, 0x2978U,
	0x1164U, 0x26A5U, 0x2094U, 0x2321U, 0x0082U, 0x1EFFU, 0x24ECU, 0x1B03U, 0x215DU, 0x2C48U, 0x2CC6U, 0x1687U, 0x1C36U, 0x0895U, 0x2F8BU, 0x2655U,
	0x0CA9U, 0x02D9U, 0x0CD9U, 0x2824U, 0x24C0U, 0x0CD4U, 0x0829U, 0x13E4U, 0x2B15U, 0x1124U, 0x167BU, 0x1DE9U, 0x2A6DU, 0x06A0U, 0x097AU, 0x2EB3U,
	0x1087U, 0x09F4U, 0x2E9EU, 0x0D36U, 0x2922U, 0x0E7BU, 0x0E6EU, 0x1BC6U, 0x0E35U, 0x227EU, 0x1A5BU, 0x0091U, 0x1CE7U, 0x1717U, 0x0AABU, 0x20A5U
};

const std::array<ushort, 512> RLWEQ12289N512::PsisInvMontgomery =
{
	0x0200U, 0x0F68U, 0x10ABU, 0x1523U, 0x258FU, 0x170CU, 0x0C85U, 0x17AFU, 0x242DU, 0x07E5U, 0x0C0FU, 0x12A2U, 0x0405U, 0x0636U, 0x0157U, 0x0212U,
	0x2073U, 0x10B1U, 0x0AD1U, 0x2591U, 0x039BU, 0x1C86U, 0x1134U, 0x0982U, 0x05BCU, 0x232CU, 0x21EAU, 0x2BBAU, 0x0B4EU, 0x2E94U, 0x13C5U, 0x1F87U,
	0x0697U, 0x2A83U, 0x2233U, 0x1E2CU, 0x2B67U, 0x1A0FU, 0x1E78U, 0x18B0U, 0x0A28U, 0x183BU, 0x1363U, 0x1814U, 0x2677U, 0x1807U, 0x2CD3U, 0x2803U,
	0x0EF1U, 0x2D57U, 0x04FBU, 0x0F1DU, 0x01A9U, 0x150AU, 0x108EU, 0x2704U, 0x1585U, 0x2D02U, 0x272DU, 0x1F01U, 0x0D0FU, 0x1A56U, 0x245BU, 0x28C8U,
	0x2C1FU, 0x0D98U, 0x0EB5U, 0x0488U, 0x04E7U, 0x1183U, 0x21A3U, 0x25D7U, 0x2B37U, 0x0C9DU, 0x1E68U, 0x2435U, 0x1A23U, 0x1C12U, 0x28B7U, 0x295CU,
	0x2D93U, 0x2DCAU, 0x0F31U, 0x2F44U, 0x2511U, 0x2FC2U, 0x0C5BU, 0x2FECU, 0x241FU, 0x2FFAU, 0x2C0BU, 0x0FFEU, 0x2EAFU, 0x1555U, 0x1F90U, 0x271DU,
	0x2A86U, 0x1D0AU, 0x1E2DU, 0x09AEU, 0x0A0FU, 0x033AU, 0x235BU, 0x2114U, 0x0BC9U, 0x1B07U, 0x13EEU, 0x2903U, 0x16A5U, 0x1DACU, 0x278DU, 0x09E4U,
	0x0D2FU, 0x034CU, 0x0465U, 0x211AU, 0x0177U, 0x1B09U, 0x007DU, 0x0903U, 0x102AU, 0x0301U, 0x2564U, 0x2101U, 0x1C77U, 0x2B01U, 0x097DU, 0x1E56U,
	0x132AU, 0x1A1DU, 0x2664U, 0x28B5U, 0x0CCCU, 0x1D92U, 0x0444U, 0x29DCU, 0x016CU, 0x0DF4U, 0x207AU, 0x14A7U, 0x2AD4U, 0x26E3U, 0x1E47U, 0x2CF7U,
	0x1A18U, 0x0EFDU, 0x18B3U, 0x04FFU, 0x183CU, 0x21ABU, 0x0814U, 0x0B39U, 0x22B2U, 0x13BEU, 0x1B91U, 0x1695U, 0x2931U, 0x0787U, 0x0DBBU, 0x2283U,
	0x1494U, 0x0B81U, 0x06DCU, 0x13D6U, 0x224AU, 0x169DU, 0x0B6EU, 0x178AU, 0x23D0U, 0x17D9U, 0x0BF0U, 0x07F3U, 0x13FBU, 0x22A7U, 0x06A9U, 0x0B8DU,
	0x2239U, 0x13DAU, 0x2B69U, 0x069EU, 0x2E79U, 0x1235U, 0x1F7EU, 0x1612U, 0x2A80U, 0x275CU, 0x1E2BU, 0x1D1FU, 0x2A0FU, 0x09B5U, 0x0E05U, 0x233DU,
	0x24ADU, 0x0BBFU, 0x1C3AU, 0x23EBU, 0x1969U, 0x0BF9U, 0x2879U, 0x13FEU, 0x1D7EU, 0x06AAU, 0x19D5U, 0x1239U, 0x289DU, 0x0613U, 0x1D8AU, 0x2207U,
	0x19D9U, 0x1B58U, 0x189EU, 0x291EU, 0x1835U, 0x1DB5U, 0x1812U, 0x09E7U, 0x0806U, 0x034DU, 0x12ADU, 0x111AU, 0x163AU, 0x25B4U, 0x1769U, 0x2C92U,
	0x17CEU, 0x2EDCU, 0x27F0U, 0x1F9FU, 0x0D50U, 0x2A8BU, 0x0470U, 0x2E2FU, 0x117BU, 0x0F65U, 0x15D4U, 0x1522U, 0x1747U, 0x270CU, 0x27C3U, 0x0D04U,
	0x0D41U, 0x1457U, 0x046BU, 0x16C8U, 0x0179U, 0x0798U, 0x107EU, 0x0288U, 0x2580U, 0x00D8U, 0x0C80U, 0x0048U, 0x142BU, 0x0018U, 0x06B9U, 0x0008U,
	0x123EU, 0x1003U, 0x1615U, 0x2557U, 0x275DU, 0x2C73U, 0x0D1FU, 0x0ED1U, 0x1460U, 0x24F1U, 0x16CBU, 0x2C51U, 0x0799U, 0x1EC6U, 0x2289U, 0x0A42U,
	0x0B83U, 0x236CU, 0x23D7U, 0x1BCFU, 0x2BF3U, 0x0945U, 0x2EA7U, 0x0317U, 0x0F8DU, 0x1108U, 0x052FU, 0x25AEU, 0x21BBU, 0x2C90U, 0x2B3FU, 0x1EDBU,
	0x2E6BU, 0x0A49U, 0x0F79U, 0x136EU, 0x2529U, 0x067AU, 0x0C63U, 0x1229U, 0x0421U, 0x160EU, 0x2161U, 0x075AU, 0x2B21U, 0x2274U, 0x2E61U, 0x0B7CU,
	0x1F76U, 0x03D4U, 0x1A7DU, 0x1147U, 0x28D5U, 0x25C3U, 0x2D9DU, 0x2C97U, 0x2F35U, 0x0EDDU, 0x2FBDU, 0x24F5U, 0x1FEAU, 0x1C52U, 0x2AA4U, 0x1971U,
	0x1E37U, 0x087BU, 0x2A13U, 0x12D4U, 0x2E07U, 0x1647U, 0x1F58U, 0x076DU, 0x1A73U, 0x127AU, 0x08D1U, 0x1629U, 0x22F1U, 0x0763U, 0x1BA6U, 0x2277U,
	0x2938U, 0x0B7DU, 0x2DBEU, 0x23D5U, 0x2F40U, 0x1BF2U, 0x0FC0U, 0x1951U, 0x0540U, 0x2871U, 0x01C0U, 0x0D7BU, 0x2096U, 0x247FU, 0x1ADDU, 0x2C2BU,
	0x28F5U, 0x0EB9U, 0x0DA7U, 0x24E9U, 0x048DU, 0x1C4EU, 0x2185U, 0x2970U, 0x2B2DU, 0x0DD0U, 0x2E65U, 0x149BU, 0x0F77U, 0x26DFU, 0x1528U, 0x0CF5U,
	0x270EU, 0x1452U, 0x1D05U, 0x06C6U, 0x29ADU, 0x0242U, 0x2DE5U, 0x10C1U, 0x2F4DU, 0x1596U, 0x2FC5U, 0x0732U, 0x2FEDU, 0x0266U, 0x1FFAU, 0x10CDU,
	0x1AA9U, 0x159AU, 0x08E3U, 0x2734U, 0x22F7U, 0x2D12U, 0x1BA8U, 0x0F06U, 0x0938U, 0x0502U, 0x1313U, 0x21ACU, 0x165CU, 0x2B3AU, 0x0774U, 0x1E69U,
	0x027CU, 0x0A23U, 0x00D4U, 0x0361U, 0x1047U, 0x2121U, 0x056DU, 0x0B0BU, 0x01CFU, 0x23AFU, 0x209BU, 0x0BE5U, 0x2ADFU, 0x03F7U, 0x2E4BU, 0x2153U,
	0x2F6FU, 0x1B1CU, 0x1FD0U, 0x290AU, 0x1A9BU, 0x0DAEU, 0x28DFU, 0x2490U, 0x1DA0U, 0x0C30U, 0x09E0U, 0x0410U, 0x134BU, 0x115BU, 0x266FU, 0x05C9U,
	0x1CD0U, 0x11EEU, 0x199BU, 0x05FAU, 0x0889U, 0x01FEU, 0x22D9U, 0x00AAU, 0x1B9EU, 0x1039U, 0x1935U, 0x2569U, 0x0867U, 0x2C79U, 0x02CDU, 0x0ED3U,
	0x00EFU, 0x04F1U, 0x1050U, 0x11A6U, 0x0570U, 0x05E2U, 0x01D0U, 0x01F6U, 0x109BU, 0x20A8U, 0x0589U, 0x1AE3U, 0x21D9U, 0x28F7U, 0x2B49U, 0x1DA8U,
	0x1E6EU, 0x19E3U, 0x1A25U, 0x08A1U, 0x08B7U, 0x22E1U, 0x12E8U, 0x2BA1U, 0x264EU, 0x0E8BU, 0x1CC5U, 0x04D9U, 0x0997U, 0x119EU, 0x2333U, 0x25E0U,
	0x1BBCU, 0x0CA0U, 0x193FU, 0x2436U, 0x286BU, 0x0C12U, 0x0D79U, 0x0406U, 0x147EU, 0x2158U, 0x16D5U, 0x2B1EU, 0x279DU, 0x2E60U, 0x2D35U, 0x2F76U,
	0x1F12U, 0x0FD2U, 0x2A5CU, 0x0546U, 0x1E1FU, 0x01C2U, 0x2A0BU, 0x0096U, 0x1E04U, 0x0032U, 0x2A02U, 0x1011U, 0x1E01U, 0x055BU, 0x2A01U, 0x01C9U
};

//~~~Public Functions~~~//

void RLWEQ12289N512::Decrypt(std::vector<byte> &Secret, const std::vector<ushort> &PrivateKey, const std::vector<byte> &Received)
{
	std::array<ushort, RLWE_N> bp;
	std::array<ushort, RLWE_N> c;
	std::array<ushort, RLWE_N> v;

	DecodeB(bp, c, Received);
	PolyPointwise(v, PrivateKey, bp);
	Utility::PolyMath::BitReverse(v, BitrevTable);
	InvNTT(v);
	Reconcile(Secret, v, c);
}

void RLWEQ12289N512::Encrypt(std::vector<byte> &Secret, std::vector<byte> &Send, const std::vector<byte> &Received, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::array<ushort, RLWE_N> a;
	std::array<ushort, RLWE_N> bp;
	std::array<ushort, RLWE_N> c;
	std::array<ushort, RLWE_N> ep;
	std::array<ushort, RLWE_N> epp;
	std::array<ushort, RLWE_N> pka;
	std::array<ushort, RLWE_N> sp;
	std::array<ushort, RLWE_N> tbp;
	std::array<ushort, RLWE_N> v;

	std::vector<byte> seed(RLWE_SEED_SIZE);
	DecodeA(pka, seed, Received);
	std::vector<uint> buf1(RLWE_N);
	Rng->Fill(buf1, 0, RLWE_N);
	std::vector<uint> buf2(RLWE_N);
	Rng->Fill(buf2, 0, RLWE_N);

#if defined(CEX_HAS_OPENMP) && defined(CEX_RLWE_PARALLEL)
#	pragma omp parallel
	{
#		pragma omp single nowait
		{
			PolyUniform(a, seed);
		}
#		pragma omp single nowait
		{
			PolyGetNoise(sp, buf1);
			FwdNTT(sp);
		}
#		pragma omp single nowait
		{
			PolyGetNoise(ep, buf2);
			FwdNTT(ep);
		}
	}
#else
	PolyUniform(a, seed);

	PolyGetNoise(sp, buf1);
	FwdNTT(sp);

	PolyGetNoise(ep, buf2);
	FwdNTT(ep);
#endif

	PolyPointwise(bp, a, sp);
	PolyAdd(tbp, bp, ep);

	PolyPointwise(v, pka, sp);
	Utility::PolyMath::BitReverse(v, BitrevTable);
	InvNTT(v);
	Rng->Fill(buf1, 0, RLWE_N);;
	PolyGetNoise(epp, buf1);
	PolyAdd(v, v, epp);

	Rng->GetBytes(seed);
	RecHelper(c, v, seed);
	EncodeB(Send, tbp, c);
	Reconcile(Secret, v, c);
}

void RLWEQ12289N512::Generate(std::vector<byte> &PublicKey, std::vector<ushort> &PrivateKey, std::unique_ptr<Prng::IPrng> &Rng)
{
	std::array<ushort, RLWE_N> a;
	std::array<ushort, RLWE_N> e;
	std::array<ushort, RLWE_N> pk;
	std::array<ushort, RLWE_N> r;

	std::vector<uint> buf1(RLWE_N);
	Rng->Fill(buf1, 0, RLWE_N);
	std::vector<uint> buf2(RLWE_N);
	Rng->Fill(buf2, 0, RLWE_N);
	std::vector<byte> seed(RLWE_SEED_SIZE);
	Rng->GetBytes(seed);

#if defined(CEX_HAS_OPENMP) && defined(CEX_RLWE_PARALLEL)
#	pragma omp parallel
	{
#		pragma omp single nowait
		{
			PolyUniform(a, seed);
		}
#		pragma omp single nowait
		{
			PolyGetNoise(PrivateKey, buf1);
			FwdNTT(PrivateKey);
		}
#		pragma omp single nowait
		{
			PolyGetNoise(e, buf2);
			FwdNTT(e);
		}
	}
#else
	PolyUniform(a, seed);

	PolyGetNoise(PrivateKey, buf1);
	FwdNTT(PrivateKey);

	PolyGetNoise(e, buf2);
	FwdNTT(e);
#endif

	PolyPointwise(r, PrivateKey, a);
	PolyAdd(pk, e, r);
	EncodeA(PublicKey, pk, seed);
}

//~~~Private Functions~~~//

void RLWEQ12289N512::DecodeA(std::array<ushort, RLWE_N> &PubKey, std::vector<byte> &Seed, const std::vector<byte> &R)
{
	FromBytes(PubKey, R);
	Utility::MemUtils::Copy(R, RLWE_PUBPOLY_SIZE, Seed, 0, RLWE_SEED_SIZE);
}

void RLWEQ12289N512::DecodeB(std::array<ushort, RLWE_N> &B, std::array<ushort, RLWE_N> &C, const std::vector<byte> &R)
{
	FromBytes(B, R);

	for (size_t i = 0; i < RLWE_N / 4; i++)
	{
		C[(4 * i) + 0] = static_cast<ushort>(R[RLWE_PUBPOLY_SIZE + i] & 0x03);
		C[(4 * i) + 1] = static_cast<ushort>((R[RLWE_PUBPOLY_SIZE + i] >> 2) & 0x03);
		C[(4 * i) + 2] = static_cast<ushort>((R[RLWE_PUBPOLY_SIZE + i] >> 4) & 0x03);
		C[(4 * i) + 3] = static_cast<ushort>((R[RLWE_PUBPOLY_SIZE + i] >> 6));
	}
}

void RLWEQ12289N512::EncodeA(std::vector<byte> &R, const std::array<ushort, RLWE_N> &PubKey, const std::vector<byte> &Seed)
{
	ToBytes(R, PubKey);
	Utility::MemUtils::Copy(Seed, 0, R, RLWE_PUBPOLY_SIZE, RLWE_SEED_SIZE);
}

void RLWEQ12289N512::EncodeB(std::vector<byte> &R, const std::array<ushort, RLWE_N> &B, const std::array<ushort, RLWE_N> &C)
{
	ToBytes(R, B);

	for (size_t i = 0; i < RLWE_N / 4; i++)
	{
		R[RLWE_PUBPOLY_SIZE + i] = C[4 * i] | (C[(4 * i) + 1] << 2) | (C[(4 * i) + 2] << 4) | (C[(4 * i) + 3] << 6);
	}
}

void RLWEQ12289N512::FromBytes(std::array<ushort, RLWE_N> &R, const std::vector<byte> &A)
{
	for (size_t i = 0; i < RLWE_N / 4; ++i)
	{
		R[(4 * i)] = A[(7 * i)] | ((static_cast<ushort>(A[(7 * i) + 1]) & 0x3F) << 8);
		R[(4 * i) + 1] = (A[(7 * i) + 1] >> 6) | ((static_cast<ushort>(A[(7 * i) + 2]) << 2) | ((static_cast<ushort>(A[(7 * i) + 3]) & 0x0F) << 10));
		R[(4 * i) + 2] = (A[(7 * i) + 3] >> 4) | ((static_cast<ushort>(A[(7 * i) + 4]) << 4) | ((static_cast<ushort>(A[(7 * i) + 5]) & 0x03) << 12));
		R[(4 * i) + 3] = (A[(7 * i) + 5] >> 2) | ((static_cast<ushort>(A[(7 * i) + 6]) << 6));
	}
}

void RLWEQ12289N512::PolyUniform(std::array<ushort, RLWE_N> &A, const std::vector<byte> &Seed)
{
	Drbg::BCG eng(Enumeration::BlockCiphers::Rijndael);
	size_t bufLen = (2 * RLWE_N) * sizeof(ushort);

#if defined(CEX_HAS_OPENMP) && defined(CEX_RLWE_PARALLEL)
	if (bufLen >= eng.ParallelProfile().ParallelMinimumSize())
	{
		bufLen -= (bufLen % eng.ParallelProfile().ParallelMinimumSize());
		eng.ParallelProfile().ParallelBlockSize() = bufLen;
	}
#else
	eng.ParallelProfile().IsParallel() = false;
#endif

	eng.Initialize(Seed);
	std::vector<byte> buf(bufLen);
	eng.Generate(buf, 0, buf.size());

	size_t ctr = 0;
	size_t pos = 0;
	ushort val;

	while (ctr < RLWE_N)
	{
		// 0x3fff/16393 - Specialized for q = 12889
		val = ((buf[pos] | (static_cast<ushort>(buf[pos + 1]) << 8)) & 0x3FFFU);
		if (val < RLWE_Q)
		{
			A[ctr] = val;
			++ctr;
		}

		pos += 2;
		if (pos >= buf.size())
		{
			eng.Generate(buf, 0, buf.size());
			pos = 0;
		}
	}
}

void RLWEQ12289N512::RecHelper(std::array<ushort, RLWE_N> &C, const std::array<ushort, RLWE_N> &V, std::vector<byte> &Random)
{
#if defined(__AVX512__)
	HelpRec<Numeric::UInt512, std::array<ushort, RLWE_N>, std::vector<byte>>(C, V, Random, RLWE_Q);
#elif defined(__AVX2__)
	HelpRec<Numeric::UInt256, std::array<ushort, RLWE_N>, std::vector<byte>>(C, V, Random, RLWE_Q);
#elif defined(__AVX__)
	HelpRec<Numeric::UInt128, std::array<ushort, RLWE_N>, std::vector<byte>>(C, V, Random, RLWE_Q);
#else
	HelpRec<int, std::array<ushort, RLWE_N>, std::vector<byte>>(C, V, Random, RLWE_Q);
#endif
}

void RLWEQ12289N512::Reconcile(std::vector<byte> &Key, const std::array<ushort, RLWE_N> &V, const std::array<ushort, RLWE_N> &C)
{
#if defined(__AVX512__)
	Rec<Numeric::UInt512, std::vector<byte>, std::array<ushort, RLWE_N>>(Key, V, C, RLWE_Q);
#elif defined(__AVX2__)
	Rec<Numeric::UInt256, std::vector<byte>, std::array<ushort, RLWE_N>>(Key, V, C, RLWE_Q);
#elif defined(__AVX__)
	Rec<Numeric::UInt128, std::vector<byte>, std::array<ushort, RLWE_N>>(Key, V, C, RLWE_Q);
#else
	Rec<int, std::vector<byte>, std::array<ushort, RLWE_N>>(Key, V, C, RLWE_Q);
#endif
}

void RLWEQ12289N512::ToBytes(std::vector<byte> &R, const std::array<ushort, RLWE_N> &Poly)
{
	short c;
	ushort m;
	ushort t0;
	ushort t1;
	ushort t2;
	ushort t3;

	for (size_t i = 0; i < Poly.size() / 4; i++)
	{
		// make sure that coefficients have only 14 bits
		t0 = Utility::PolyMath::BarrettReduce(Poly[(4 * i)]);
		t1 = Utility::PolyMath::BarrettReduce(Poly[(4 * i) + 1]);
		t2 = Utility::PolyMath::BarrettReduce(Poly[(4 * i) + 2]);
		t3 = Utility::PolyMath::BarrettReduce(Poly[(4 * i) + 3]);

		// make sure that coefficients are in [0,q]
		m = t0 - RLWE_Q;
		c = m;
		c >>= 15;
		t0 = m ^ ((t0 ^ m) & c);
		m = t1 - RLWE_Q;
		c = m;
		c >>= 15;
		t1 = m ^ ((t1 ^ m) & c);
		m = t2 - RLWE_Q;
		c = m;
		c >>= 15;
		t2 = m ^ ((t2 ^ m) & c);
		m = t3 - RLWE_Q;
		c = m;
		c >>= 15;
		t3 = m ^ ((t3 ^ m) & c);

		R[(7 * i)] = static_cast<byte>(t0 & 0xFF);
		R[(7 * i) + 1] = static_cast<byte>((t0 >> 8) | (t1 << 6));
		R[(7 * i) + 2] = static_cast<byte>(t1 >> 2);
		R[(7 * i) + 3] = static_cast<byte>((t1 >> 10) | (t2 << 4));
		R[(7 * i) + 4] = static_cast<byte>(t2 >> 4);
		R[(7 * i) + 5] = static_cast<byte>((t2 >> 12) | (t3 << 2));
		R[(7 * i) + 6] = static_cast<byte>(t3 >> 6);
	}
}

NAMESPACE_RINGLWEEND
