#ifndef _CEX_PKGEN_H
#define _CEX_PKGEN_H

#include "CexDomain.h"
#include "benes.h"
#include "fft2.h"
#include "params.h"
#include "util.h"
#include "vec.h"

/* Class Heirarchy

pk_gen
	benes.h
		transpose.h
	fft2.h
		params.h
		vec.h
	params.h
	util.h
	vec.h
		params.h

sk_gen
	gfm.h
		params.h
	util.h

decrypt
	bm2.h
		params.h
		gfm.h
			params.h
		vec.h
			params.h
	benes.h
		transpose.h
	fft2.h
		params.h
		vec.h
			params.h
	fft_tr2.h
		params.h
		transpose.h
		vec.h
	params.h
	transpose.h
	util.h
	vec.h
		params.h

encrypt
	params.h
	util.h
*/


NAMESPACE_MCELIECE

/// <summary>
/// 
/// </summary>
class pk_gen2
{
public:

	static int pk_gen(unsigned char *pk, const unsigned char *sk) 
	{
		unsigned char *pk_ptr = pk;
		int i, j, k;
		int row, c, tail;
		uint64_t mat[GFBITS * SYS_T][64];
		uint64_t mask;
		uint64_t u;

		uint64_t points[64][GFBITS] = 
		{
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			}

		};

		uint64_t sk_int[GFBITS];
		uint64_t eval[64][GFBITS];
		uint64_t inv[64][GFBITS];
		uint64_t tmp[GFBITS];
		uint64_t cond[COND_BYTES / 8];

		// compute the inverses
		for (i = 0; i < GFBITS; i++)
			sk_int[i] = util::load8(sk, i * 8);

		fft2::fft(eval, sk_int); //1ms
		vec::vec_copy(inv[0], eval[0]);

		for (i = 1; i < 64; i++)//1ms
			vec::vec_mul(inv[i], inv[i - 1], eval[i]);

		vec::vec_inv(tmp, inv[63]);//1ms

		for (i = 62; i >= 0; i--) //1ms
		{
			vec::vec_mul(inv[i + 1], tmp, inv[i]);
			vec::vec_mul(tmp, tmp, eval[i + 1]);
		}

		vec::vec_copy(inv[0], tmp);//1ms

		// fill matrix 1ms
		for (j = 0; j < 64; j++)//1ms
		{
			for (k = 0; k < GFBITS; k++)
				mat[k][j] = inv[j][k];
		}

		for (i = 1; i < SYS_T; i++) //1ms
		{
			for (j = 0; j < 64; j++)
			{
				vec::vec_mul(inv[j], inv[j], points[j]);

				for (k = 0; k < GFBITS; k++)
					mat[i * GFBITS + k][j] = inv[j][k];
			}
		}

		// permute 
		for (i = 0; i < COND_BYTES / 8; i++)//2ms
			cond[i] = util::load8(sk, IRR_BYTES + i * 8);

		for (i = 0; i < GFBITS * SYS_T; i++)//1ms
			benes::benes_compact(mat[i], cond, 0);

		// gaussian elimination 
		for (i = 0; i < (GFBITS * SYS_T + 63) / 64; i++)//10ms
		{
			for (j = 0; j < 64; j++)
			{
				row = i * 64 + j;

				if (row >= GFBITS * SYS_T)
					break;

				for (k = row + 1; k < GFBITS * SYS_T; k++)//1ms
				{
					mask = mat[row][i] ^ mat[k][i];
					mask >>= j;
					mask &= 1;
					mask = ~mask + 1;
					
					for (c = 0; c < 64; c++)
						mat[row][c] ^= mat[k][c] & mask;
				}
				

				if (((mat[row][i] >> j) & 1) == 0)//1ms
				{ // return if not invertible
					return -1;
				}

				for (k = 0; k < GFBITS * SYS_T; k++)//1ms
				{
					if (k != row) 
					{
						mask = mat[k][i] >> j;
						mask &= 1;
						mask = ~mask + 1;
						
						for (c = 0; c < 64; c++)
							mat[k][c] ^= mat[row][c] & mask;
					}
				}
			}//1ms
		}//28ms

		// store pk
		tail = ((GFBITS * SYS_T) & 63) >> 3;
		//tail: 

		for (i = 0; i < GFBITS * SYS_T; i++) 
		{
			u = mat[i][(GFBITS * SYS_T + 63) / 64 - 1];

			for (k = tail; k < 8; k++)
				pk_ptr[k - tail] = (u >> (8 * k)) & 0xFF;

			pk_ptr += 8 - tail;

			for (j = (GFBITS * SYS_T + 63) / 64; j < 64; j++) 
			{
				util::store8(pk_ptr, mat[i][j]);
				pk_ptr += 8;
			}
		}

		return 0;
	}
};

NAMESPACE_MCELIECEEND
#endif