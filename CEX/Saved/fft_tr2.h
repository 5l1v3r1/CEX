#ifndef _CEX_FFTTR_H
#define _CEX_FFTTR_H

#include "CexDomain.h"
#include "params.h"
#include "transpose.h"
#include "vec.h"

NAMESPACE_MCELIECE

/// <summary>
/// 
/// </summary>
class fft_tr2
{
public:
#define vec_add(z, x, y)           \
	for (b = 0; b < GFBITS; b++) { \
		z[b] = x[b] ^ y[b];        \
	}

	static void radix_conversions_tr(uint64_t in[][GFBITS]) {
		int i, j, k;

		const uint64_t mask[6][2] = 
		{
			{ 0x2222222222222222, 0x4444444444444444 },
			{ 0x0C0C0C0C0C0C0C0C, 0x3030303030303030 },
			{ 0x00F000F000F000F0, 0x0F000F000F000F00 },
			{ 0x0000FF000000FF00, 0x00FF000000FF0000 },
			{ 0x00000000FFFF0000, 0x0000FFFF00000000 },
			{ 0xFFFFFFFF00000000, 0x00000000FFFFFFFF } 
		};

		const uint64_t s[5][2][GFBITS] = {
			{ {
					0XF3CFC030FC30F003,
					0X3FCF0F003C00C00C,
					0X30033CC300C0C03C,
					0XCCFF0F3C0F30F0C0,
					0X0300C03FF303C3F0,
					0X3FFF3C0FF0CCCCC0,
					0XF3FFF0C00F3C3CC0,
					0X3003333FFFC3C000,
					0X0FF30FFFC3FFF300,
					0XFFC0F300F0F0CC00,
					0XC0CFF3FCCC3CFC00,
					0XFC3C03F0F330C000,
				},
				{
					0X000C03C0C3C0330C,
					0XF330CFFCC00F33C0,
					0XCCF330F00F3C0333,
					0XFF03FFF3FF0CF0C0,
					0X3CC3FCF00FCC303C,
					0X0F000C0FC30303F3,
					0XCF0FC3FF333CCF3C,
					0X003F3FC3C0FF333F,
					0X3CC3F0F3CF0FF00F,
					0XF3F33CC03FC30CC0,
					0X3CC330CFC333F33F,
					0X3CC0303FF3C3FFFC,
				} },
				{ {
						0X000F00000000F00F,
						0X00000F00F00000F0,
						0X0F00000F00000F00,
						0XF00F00F00F000000,
						0X00F00000000000F0,
						0X0000000F00000000,
						0XF00000000F00F000,
						0X00F00F00000F0000,
						0X0000F00000F00F00,
						0X000F00F00F00F000,
						0X00F00F0000000000,
						0X0000000000F00000,
					},
					{
						0X0F00F00F00000000,
						0XF00000000000F000,
						0X00000F00000000F0,
						0X0F00F00000F00000,
						0X000F00000F00F00F,
						0X00F00F00F00F0000,
						0X0F00F00000000000,
						0X000000000F000000,
						0X00F00000000F00F0,
						0X0000F00F00000F00,
						0XF00000F00000F00F,
						0X00000F00F00F00F0,
					} },
					{ {
							0X0000FF00FF0000FF,
							0X0000FF000000FF00,
							0XFF0000FF00FF0000,
							0XFFFF0000FF000000,
							0X00FF00FF00FF0000,
							0X0000FFFFFF000000,
							0X00FFFF00FF000000,
							0XFFFFFF0000FF0000,
							0XFFFF00FFFF00FF00,
							0X0000FF0000000000,
							0XFFFFFF00FF000000,
							0X00FF000000000000,
						},
						{
							0XFF00FFFFFF000000,
							0XFF0000FFFF000000,
							0XFFFF00FFFF000000,
							0XFF00FFFFFFFFFF00,
							0X00000000FF00FF00,
							0XFFFFFFFF00FF0000,
							0X00FFFFFF00FF0000,
							0XFFFF00FFFF00FFFF,
							0XFFFF0000FFFFFFFF,
							0XFF00000000FF0000,
							0X000000FF00FF00FF,
							0X00FF00FF00FFFF00,
						} },
						{ {
								0X000000000000FFFF,
								0X00000000FFFF0000,
								0X0000000000000000,
								0XFFFF000000000000,
								0X00000000FFFF0000,
								0X0000FFFF00000000,
								0X0000000000000000,
								0X00000000FFFF0000,
								0X0000FFFF00000000,
								0X0000000000000000,
								0X0000000000000000,
								0X0000000000000000,
							},
							{
								0X0000000000000000,
								0XFFFF000000000000,
								0X0000000000000000,
								0X0000000000000000,
								0XFFFF00000000FFFF,
								0X0000000000000000,
								0X0000FFFF00000000,
								0XFFFF00000000FFFF,
								0X00000000FFFF0000,
								0X0000000000000000,
								0XFFFF00000000FFFF,
								0X00000000FFFF0000,
							} },
							{ {
									0X00000000FFFFFFFF,
									0XFFFFFFFF00000000,
									0XFFFFFFFF00000000,
									0X0000000000000000,
									0X0000000000000000,
									0XFFFFFFFF00000000,
									0X0000000000000000,
									0X0000000000000000,
									0XFFFFFFFF00000000,
									0X0000000000000000,
									0X0000000000000000,
									0X0000000000000000,
								},
								{
									0X0000000000000000,
									0X0000000000000000,
									0X00000000FFFFFFFF,
									0XFFFFFFFF00000000,
									0XFFFFFFFF00000000,
									0X0000000000000000,
									0XFFFFFFFF00000000,
									0XFFFFFFFFFFFFFFFF,
									0XFFFFFFFF00000000,
									0X0000000000000000,
									0XFFFFFFFFFFFFFFFF,
									0XFFFFFFFF00000000,
								} }

		};

		//

		for (j = 5; j >= 0; j--) 
		{
			if (j < 5) 
			{
				vec::vec_mul(in[0], in[0], s[j][0]); // scaling
				vec::vec_mul(in[1], in[1], s[j][1]); // scaling
			}

			for (i = 0; i < GFBITS; i++)
			{
				for (k = j; k <= 4; k++)
				{
					in[0][i] ^= (in[0][i] & mask[k][0]) << (1 << k);
					in[0][i] ^= (in[0][i] & mask[k][1]) << (1 << k);

					in[1][i] ^= (in[1][i] & mask[k][0]) << (1 << k);
					in[1][i] ^= (in[1][i] & mask[k][1]) << (1 << k);
				}
			}

			for (i = 0; i < GFBITS; i++) 
			{
				in[1][i] ^= (in[0][i] & mask[5][0]) >> 32;
				in[1][i] ^= (in[1][i] & mask[5][1]) << 32;
			}
		}
	}

	static void butterflies_tr(uint64_t out[][GFBITS], uint64_t in[][GFBITS]) {
		int i, j, k, s, b;

		uint64_t tmp[GFBITS];
		uint64_t pre[6][GFBITS];
		uint64_t buf[64];

		const uint64_t consts[63][GFBITS] = 
		{
			//64
			{
				0XF00F0FF0F00F0FF0,
				0XF0F00F0F0F0FF0F0,
				0X0FF00FF00FF00FF0,
				0XAA5555AAAA5555AA,
				0XF00F0FF0F00F0FF0,
				0X33CCCC33CC3333CC,
				0XFFFF0000FFFF0000,
				0XCC33CC3333CC33CC,
				0X33CC33CC33CC33CC,
				0X5A5A5A5A5A5A5A5A,
				0XFF00FF00FF00FF00,
				0XF00F0FF0F00F0FF0,
			},
			//128
			{
				0X3C3C3C3C3C3C3C3C,
				0XF0F0F0F0F0F0F0F0,
				0X5555AAAA5555AAAA,
				0XCC3333CCCC3333CC,
				0XC33CC33CC33CC33C,
				0X55555555AAAAAAAA,
				0X33333333CCCCCCCC,
				0X00FF00FFFF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0X0000000000000000,
				0X0000FFFFFFFF0000,
				0XF0F00F0F0F0FF0F0,
			},
			{
				0X3C3C3C3C3C3C3C3C,
				0X0F0F0F0F0F0F0F0F,
				0XAAAA5555AAAA5555,
				0XCC3333CCCC3333CC,
				0XC33CC33CC33CC33C,
				0X55555555AAAAAAAA,
				0X33333333CCCCCCCC,
				0XFF00FF0000FF00FF,
				0X0F0F0F0F0F0F0F0F,
				0X0000000000000000,
				0X0000FFFFFFFF0000,
				0XF0F00F0F0F0FF0F0,
			},
			//256
			{
				0XAA55AA5555AA55AA,
				0XCC33CC3333CC33CC,
				0X33CCCC33CC3333CC,
				0X55555555AAAAAAAA,
				0XFF0000FF00FFFF00,
				0X3CC33CC3C33CC33C,
				0X5555AAAA5555AAAA,
				0X0FF00FF00FF00FF0,
				0XCCCC33333333CCCC,
				0XF0F0F0F0F0F0F0F0,
				0X00FFFF0000FFFF00,
				0XC33CC33CC33CC33C,
			},
			{
				0X55AA55AAAA55AA55,
				0XCC33CC3333CC33CC,
				0XCC3333CC33CCCC33,
				0X55555555AAAAAAAA,
				0XFF0000FF00FFFF00,
				0XC33CC33C3CC33CC3,
				0XAAAA5555AAAA5555,
				0XF00FF00FF00FF00F,
				0X3333CCCCCCCC3333,
				0X0F0F0F0F0F0F0F0F,
				0XFF0000FFFF0000FF,
				0XC33CC33CC33CC33C,
			},
			{
				0XAA55AA5555AA55AA,
				0X33CC33CCCC33CC33,
				0XCC3333CC33CCCC33,
				0X55555555AAAAAAAA,
				0X00FFFF00FF0000FF,
				0X3CC33CC3C33CC33C,
				0X5555AAAA5555AAAA,
				0X0FF00FF00FF00FF0,
				0X3333CCCCCCCC3333,
				0XF0F0F0F0F0F0F0F0,
				0X00FFFF0000FFFF00,
				0XC33CC33CC33CC33C,
			},
			{
				0X55AA55AAAA55AA55,
				0X33CC33CCCC33CC33,
				0X33CCCC33CC3333CC,
				0X55555555AAAAAAAA,
				0X00FFFF00FF0000FF,
				0XC33CC33C3CC33CC3,
				0XAAAA5555AAAA5555,
				0XF00FF00FF00FF00F,
				0XCCCC33333333CCCC,
				0X0F0F0F0F0F0F0F0F,
				0XFF0000FFFF0000FF,
				0XC33CC33CC33CC33C,
			},
			//512
			{
				0X6699669999669966,
				0X33CCCC33CC3333CC,
				0XA5A5A5A55A5A5A5A,
				0X3C3CC3C3C3C33C3C,
				0XF00FF00F0FF00FF0,
				0X55AA55AA55AA55AA,
				0X3C3CC3C3C3C33C3C,
				0X0F0F0F0FF0F0F0F0,
				0X55AA55AA55AA55AA,
				0X33CCCC33CC3333CC,
				0XF0F0F0F0F0F0F0F0,
				0XA55A5AA55AA5A55A,
			},
			{
				0X9966996666996699,
				0X33CCCC33CC3333CC,
				0XA5A5A5A55A5A5A5A,
				0X3C3CC3C3C3C33C3C,
				0X0FF00FF0F00FF00F,
				0XAA55AA55AA55AA55,
				0X3C3CC3C3C3C33C3C,
				0XF0F0F0F00F0F0F0F,
				0XAA55AA55AA55AA55,
				0XCC3333CC33CCCC33,
				0X0F0F0F0F0F0F0F0F,
				0XA55A5AA55AA5A55A,
			},
			{
				0X6699669999669966,
				0X33CCCC33CC3333CC,
				0X5A5A5A5AA5A5A5A5,
				0XC3C33C3C3C3CC3C3,
				0X0FF00FF0F00FF00F,
				0XAA55AA55AA55AA55,
				0XC3C33C3C3C3CC3C3,
				0X0F0F0F0FF0F0F0F0,
				0XAA55AA55AA55AA55,
				0X33CCCC33CC3333CC,
				0XF0F0F0F0F0F0F0F0,
				0XA55A5AA55AA5A55A,
			},
			{
				0X9966996666996699,
				0X33CCCC33CC3333CC,
				0X5A5A5A5AA5A5A5A5,
				0XC3C33C3C3C3CC3C3,
				0XF00FF00F0FF00FF0,
				0X55AA55AA55AA55AA,
				0XC3C33C3C3C3CC3C3,
				0XF0F0F0F00F0F0F0F,
				0X55AA55AA55AA55AA,
				0XCC3333CC33CCCC33,
				0X0F0F0F0F0F0F0F0F,
				0XA55A5AA55AA5A55A,
			},
			{
				0X6699669999669966,
				0XCC3333CC33CCCC33,
				0X5A5A5A5AA5A5A5A5,
				0X3C3CC3C3C3C33C3C,
				0X0FF00FF0F00FF00F,
				0X55AA55AA55AA55AA,
				0X3C3CC3C3C3C33C3C,
				0X0F0F0F0FF0F0F0F0,
				0X55AA55AA55AA55AA,
				0X33CCCC33CC3333CC,
				0XF0F0F0F0F0F0F0F0,
				0XA55A5AA55AA5A55A,
			},
			{
				0X9966996666996699,
				0XCC3333CC33CCCC33,
				0X5A5A5A5AA5A5A5A5,
				0X3C3CC3C3C3C33C3C,
				0XF00FF00F0FF00FF0,
				0XAA55AA55AA55AA55,
				0X3C3CC3C3C3C33C3C,
				0XF0F0F0F00F0F0F0F,
				0XAA55AA55AA55AA55,
				0XCC3333CC33CCCC33,
				0X0F0F0F0F0F0F0F0F,
				0XA55A5AA55AA5A55A,
			},
			{
				0X6699669999669966,
				0XCC3333CC33CCCC33,
				0XA5A5A5A55A5A5A5A,
				0XC3C33C3C3C3CC3C3,
				0XF00FF00F0FF00FF0,
				0XAA55AA55AA55AA55,
				0XC3C33C3C3C3CC3C3,
				0X0F0F0F0FF0F0F0F0,
				0XAA55AA55AA55AA55,
				0X33CCCC33CC3333CC,
				0XF0F0F0F0F0F0F0F0,
				0XA55A5AA55AA5A55A,
			},
			{
				0X9966996666996699,
				0XCC3333CC33CCCC33,
				0XA5A5A5A55A5A5A5A,
				0XC3C33C3C3C3CC3C3,
				0X0FF00FF0F00FF00F,
				0X55AA55AA55AA55AA,
				0XC3C33C3C3C3CC3C3,
				0XF0F0F0F00F0F0F0F,
				0X55AA55AA55AA55AA,
				0XCC3333CC33CCCC33,
				0X0F0F0F0F0F0F0F0F,
				0XA55A5AA55AA5A55A,
			},
			//1024
			{
				0X9669699696696996,
				0X6996699669966996,
				0X6996699669966996,
				0X00FFFF0000FFFF00,
				0XFF00FF00FF00FF00,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X6996699669966996,
				0X6996699669966996,
				0X00FFFF0000FFFF00,
				0X00FF00FF00FF00FF,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X6996699669966996,
				0X6996699669966996,
				0XFF0000FFFF0000FF,
				0X00FF00FF00FF00FF,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X6996699669966996,
				0X6996699669966996,
				0XFF0000FFFF0000FF,
				0XFF00FF00FF00FF00,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X6996699669966996,
				0X9669966996699669,
				0XFF0000FFFF0000FF,
				0X00FF00FF00FF00FF,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X6996699669966996,
				0X9669966996699669,
				0XFF0000FFFF0000FF,
				0XFF00FF00FF00FF00,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X6996699669966996,
				0X9669966996699669,
				0X00FFFF0000FFFF00,
				0XFF00FF00FF00FF00,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X6996699669966996,
				0X9669966996699669,
				0X00FFFF0000FFFF00,
				0X00FF00FF00FF00FF,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X9669966996699669,
				0X00FFFF0000FFFF00,
				0XFF00FF00FF00FF00,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X9669966996699669,
				0X00FFFF0000FFFF00,
				0X00FF00FF00FF00FF,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X9669966996699669,
				0XFF0000FFFF0000FF,
				0X00FF00FF00FF00FF,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X9669966996699669,
				0XFF0000FFFF0000FF,
				0XFF00FF00FF00FF00,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X6996699669966996,
				0XFF0000FFFF0000FF,
				0X00FF00FF00FF00FF,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X6996699669966996,
				0XFF0000FFFF0000FF,
				0XFF00FF00FF00FF00,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X6996699669966996,
				0X00FFFF0000FFFF00,
				0XFF00FF00FF00FF00,
				0X0FF00FF0F00FF00F,
				0X0F0FF0F0F0F00F0F,
				0XC33C3CC33CC3C33C,
				0XC33C3CC33CC3C33C,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			{
				0X9669699696696996,
				0X9669966996699669,
				0X6996699669966996,
				0X00FFFF0000FFFF00,
				0X00FF00FF00FF00FF,
				0XF00FF00F0FF00FF0,
				0XF0F00F0F0F0FF0F0,
				0X3CC3C33CC33C3CC3,
				0X3CC3C33CC33C3CC3,
				0XA55A5AA55AA5A55A,
				0XC33C3CC33CC3C33C,
				0X3CC3C33C3CC3C33C,
			},
			//2048
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			}
		};

		uint64_t consts_ptr = 63;

		const unsigned char reversal[64] = 
		{
			0, 32, 16, 48, 8, 40, 24, 56,
			4, 36, 20, 52, 12, 44, 28, 60,
			2, 34, 18, 50, 10, 42, 26, 58,
			6, 38, 22, 54, 14, 46, 30, 62,
			1, 33, 17, 49, 9, 41, 25, 57,
			5, 37, 21, 53, 13, 45, 29, 61,
			3, 35, 19, 51, 11, 43, 27, 59,
			7, 39, 23, 55, 15, 47, 31, 63
		};

		const uint16_t beta[6] = { 8, 1300, 3408, 1354, 2341, 1154 };

		// butterflies

		for (i = 5; i >= 0; i--) 
		{
			s = 1 << i;
			consts_ptr -= s;

			for (j = 0; j < 64; j += 2 * s)
			{
				for (k = j; k < j + s; k++)
				{
					vec_add(in[k], in[k], in[k + s]);
					vec::vec_mul(tmp, in[k], consts[consts_ptr + (k - j)]);
					vec_add(in[k + s], in[k + s], tmp);
				}
			}
		}

		// transpose

		for (i = 0; i < GFBITS; i++)
		{
			for (j = 0; j < 64; j++)
				buf[reversal[j]] = in[j][i];

			transpose::transpose_64x64_compact(buf, buf);

			for (j = 0; j < 64; j++)
				in[j][i] = buf[j];
		}

		// broadcast

		vec::vec_copy(pre[0], in[32]);
		vec_add(in[33], in[33], in[32]);
		vec::vec_copy(pre[1], in[33]);
		vec_add(in[35], in[35], in[33]);
		vec_add(pre[0], pre[0], in[35]);
		vec_add(in[34], in[34], in[35]);
		vec::vec_copy(pre[2], in[34]);
		vec_add(in[38], in[38], in[34]);
		vec_add(pre[0], pre[0], in[38]);
		vec_add(in[39], in[39], in[38]);
		vec_add(pre[1], pre[1], in[39]);
		vec_add(in[37], in[37], in[39]);
		vec_add(pre[0], pre[0], in[37]);
		vec_add(in[36], in[36], in[37]);
		vec::vec_copy(pre[3], in[36]);
		vec_add(in[44], in[44], in[36]);
		vec_add(pre[0], pre[0], in[44]);
		vec_add(in[45], in[45], in[44]);
		vec_add(pre[1], pre[1], in[45]);
		vec_add(in[47], in[47], in[45]);
		vec_add(pre[0], pre[0], in[47]);
		vec_add(in[46], in[46], in[47]);
		vec_add(pre[2], pre[2], in[46]);
		vec_add(in[42], in[42], in[46]);
		vec_add(pre[0], pre[0], in[42]);
		vec_add(in[43], in[43], in[42]);
		vec_add(pre[1], pre[1], in[43]);
		vec_add(in[41], in[41], in[43]);
		vec_add(pre[0], pre[0], in[41]);
		vec_add(in[40], in[40], in[41]);
		vec::vec_copy(pre[4], in[40]);
		vec_add(in[56], in[56], in[40]);
		vec_add(pre[0], pre[0], in[56]);
		vec_add(in[57], in[57], in[56]);
		vec_add(pre[1], pre[1], in[57]);
		vec_add(in[59], in[59], in[57]);
		vec_add(pre[0], pre[0], in[59]);
		vec_add(in[58], in[58], in[59]);
		vec_add(pre[2], pre[2], in[58]);
		vec_add(in[62], in[62], in[58]);
		vec_add(pre[0], pre[0], in[62]);
		vec_add(in[63], in[63], in[62]);
		vec_add(pre[1], pre[1], in[63]);
		vec_add(in[61], in[61], in[63]);
		vec_add(pre[0], pre[0], in[61]);
		vec_add(in[60], in[60], in[61]);
		vec_add(pre[3], pre[3], in[60]);
		vec_add(in[52], in[52], in[60]);
		vec_add(pre[0], pre[0], in[52]);
		vec_add(in[53], in[53], in[52]);
		vec_add(pre[1], pre[1], in[53]);
		vec_add(in[55], in[55], in[53]);
		vec_add(pre[0], pre[0], in[55]);
		vec_add(in[54], in[54], in[55]);
		vec_add(pre[2], pre[2], in[54]);
		vec_add(in[50], in[50], in[54]);
		vec_add(pre[0], pre[0], in[50]);
		vec_add(in[51], in[51], in[50]);
		vec_add(pre[1], pre[1], in[51]);
		vec_add(in[49], in[49], in[51]);
		vec_add(pre[0], pre[0], in[49]);
		vec_add(in[48], in[48], in[49]);
		vec::vec_copy(pre[5], in[48]);
		vec_add(in[16], in[16], in[48]);
		vec_add(pre[0], pre[0], in[16]);
		vec_add(in[17], in[17], in[16]);
		vec_add(pre[1], pre[1], in[17]);
		vec_add(in[19], in[19], in[17]);
		vec_add(pre[0], pre[0], in[19]);
		vec_add(in[18], in[18], in[19]);
		vec_add(pre[2], pre[2], in[18]);
		vec_add(in[22], in[22], in[18]);
		vec_add(pre[0], pre[0], in[22]);
		vec_add(in[23], in[23], in[22]);
		vec_add(pre[1], pre[1], in[23]);
		vec_add(in[21], in[21], in[23]);
		vec_add(pre[0], pre[0], in[21]);
		vec_add(in[20], in[20], in[21]);
		vec_add(pre[3], pre[3], in[20]);
		vec_add(in[28], in[28], in[20]);
		vec_add(pre[0], pre[0], in[28]);
		vec_add(in[29], in[29], in[28]);
		vec_add(pre[1], pre[1], in[29]);
		vec_add(in[31], in[31], in[29]);
		vec_add(pre[0], pre[0], in[31]);
		vec_add(in[30], in[30], in[31]);
		vec_add(pre[2], pre[2], in[30]);
		vec_add(in[26], in[26], in[30]);
		vec_add(pre[0], pre[0], in[26]);
		vec_add(in[27], in[27], in[26]);
		vec_add(pre[1], pre[1], in[27]);
		vec_add(in[25], in[25], in[27]);
		vec_add(pre[0], pre[0], in[25]);
		vec_add(in[24], in[24], in[25]);
		vec_add(pre[4], pre[4], in[24]);
		vec_add(in[8], in[8], in[24]);
		vec_add(pre[0], pre[0], in[8]);
		vec_add(in[9], in[9], in[8]);
		vec_add(pre[1], pre[1], in[9]);
		vec_add(in[11], in[11], in[9]);
		vec_add(pre[0], pre[0], in[11]);
		vec_add(in[10], in[10], in[11]);
		vec_add(pre[2], pre[2], in[10]);
		vec_add(in[14], in[14], in[10]);
		vec_add(pre[0], pre[0], in[14]);
		vec_add(in[15], in[15], in[14]);
		vec_add(pre[1], pre[1], in[15]);
		vec_add(in[13], in[13], in[15]);
		vec_add(pre[0], pre[0], in[13]);
		vec_add(in[12], in[12], in[13]);
		vec_add(pre[3], pre[3], in[12]);
		vec_add(in[4], in[4], in[12]);
		vec_add(pre[0], pre[0], in[4]);
		vec_add(in[5], in[5], in[4]);
		vec_add(pre[1], pre[1], in[5]);
		vec_add(in[7], in[7], in[5]);
		vec_add(pre[0], pre[0], in[7]);
		vec_add(in[6], in[6], in[7]);
		vec_add(pre[2], pre[2], in[6]);
		vec_add(in[2], in[2], in[6]);
		vec_add(pre[0], pre[0], in[2]);
		vec_add(in[3], in[3], in[2]);
		vec_add(pre[1], pre[1], in[3]);
		vec_add(in[1], in[1], in[3]);
		vec_add(pre[0], pre[0], in[1]);
		vec_add(out[0], in[0], in[1]);

		for (j = 0; j < GFBITS; j++) 
		{
			tmp[j] = (beta[0] >> j) & 1;
			tmp[j] = ~tmp[j] + 1;
		}

		vec::vec_mul(out[1], pre[0], tmp);

		for (i = 1; i < 6; i++) 
		{
			for (j = 0; j < GFBITS; j++) 
			{
				tmp[j] = (beta[i] >> j) & 1;
				tmp[j] = ~tmp[j] + 1;
			}

			vec::vec_mul(tmp, pre[i], tmp);
			vec_add(out[1], out[1], tmp);
		}
	}

	static void fft_tr(uint64_t out[][GFBITS], uint64_t in[][GFBITS]) 
	{
		butterflies_tr(out, in);
		radix_conversions_tr(out);
	}

};

NAMESPACE_MCELIECEEND
#endif