#ifndef _CEX_PKGEN3_H
#define _CEX_PKGEN3_H

#include "CexDomain.h"
#include "Benes2.h"
#include "fft3.h"
//#include "params.h"
#include "util2.h"
#include "GfVector.h"
#include "benes.h"
#include "vec.h"

NAMESPACE_MCELIECE

/// <summary>
/// 
/// </summary>
class pk_gen3
{
public:
	/*
	#define PK_NROWS (SYS_T * GFBITS)					// 744 (M * T)
	#define PK_NCOLS ((1 << GFBITS) - SYS_T * GFBITS)	// 3352 (1 << M) - (M * T)

	#define IRR_BYTES (GFBITS * 8)						// 96
	#define COND_BYTES (736 * 8)						// 5888 (736? PK_NROWS + 8) * 8
	#define SYND_BYTES (PK_NROWS / 8)					// 93
	*/

	static int pk_gen(std::vector<byte> &pk, const std::vector<byte> &sk, size_t Dimension, size_t Factor)
	{

		const size_t CNDLEN = (Dimension * Factor) - 8;
		const size_t IRRLEN = Dimension * 8;
		size_t pk_ptr = 0;
		int i, j, k;
		int row, c, tail;
		std::vector<std::vector<ulong>> mat(Dimension * Factor, std::vector<ulong>(64));
		ulong mask;
		ulong u;
		std::vector<std::vector<ulong>> points =
		{
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			}

		};

		std::vector<ulong> sk_int(Dimension);
		std::vector<std::vector<ulong>> eval(64, std::vector<ulong>(Dimension));
		std::vector<std::vector<ulong>> inv(64, std::vector<ulong>(Dimension));
		std::vector<ulong> tmp(Dimension);
		std::vector<ulong> cond(CNDLEN);

		// compute the inverses
		for (i = 0; i < Dimension; i++)
			sk_int[i] = util2::load8(sk, i * 8);

		fft3::fft(eval, sk_int, Dimension);//1ms
		GfVector::vec_copy(inv[0], eval[0], Dimension);//12ms

		for (i = 1; i < 64; i++)//1ms
			GfVector::vec_mul(inv[i], 0, inv[i - 1], 0, eval[i], 0, Dimension);

		GfVector::vec_inv(tmp, inv[63], Dimension);//3ms

		for (i = 62; i >= 0; i--)//1ms
		{
			GfVector::vec_mul(inv[i + 1], 0, tmp, 0, inv[i], 0, Dimension);
			GfVector::vec_mul(tmp, 0, tmp, 0, eval[i + 1], 0, Dimension);
		}

		GfVector::vec_copy(inv[0], tmp, Dimension);//6ms

		// fill matrix
		for (j = 0; j < 64; j++)//1ms
		{
			for (k = 0; k < Dimension; k++)
				mat[k][j] = inv[j][k];
		}

		for (i = 1; i < Factor; i++)//1ms
		{
			for (j = 0; j < 64; j++)
			{
				GfVector::vec_mul(inv[j], 0, inv[j], 0, points[j], 0, Dimension);

				for (k = 0; k < Dimension; k++)
					mat[i * Dimension + k][j] = inv[j][k];
			}
		}

		// permute
		for (i = 0; i < CNDLEN; i++)//171ms
			cond[i] = util2::load8(sk, IRRLEN + i * 8);

		for (i = 0; i < Dimension * Factor; i++)//2ms
			Benes2::benes_compact(mat[i], cond, 0);

		// gaussian elimination 722ms
		for (i = 0; i < (Dimension * Factor + 63) / 64; i++)//729ms
		{
			for (j = 0; j < 64; j++)
			{
				row = i * 64 + j;

				if (row >= Dimension * Factor)
					break;

				for (k = row + 1; k < Dimension * Factor; k++)//1ms
				{
					mask = mat[row][i] ^ mat[k][i];
					mask >>= j;
					mask &= 1;
					mask = ~mask + 1;

					for (c = 0; c < 64; c++)
						mat[row][c] ^= mat[k][c] & mask;
				}

				if (((mat[row][i] >> j) & 1) == 0)//21ms
				{ // return if not invertible
					return -1;
				}

				for (k = 0; k < Dimension * Factor; k++)//1ms
				{
					if (k != row) 
					{
						mask = mat[k][i] >> j;
						mask &= 1;
						mask = ~mask + 1;

						for (c = 0; c < 64; c++)
							mat[k][c] ^= mat[row][c] & mask;
					}
				}
			}//21ms
		}//2360

		// store pk
		tail = ((Dimension * Factor) & 63) >> 3;

		for (i = 0; i < Dimension * Factor; i++)
		{
			u = mat[i][(Dimension * Factor + 63) / 64 - 1];

			for (k = tail; k < 8; k++)
				pk[pk_ptr + (k - tail)] = (u >> (8 * k)) & 0xFF;

			pk_ptr += 8 - tail;

			for (j = (Dimension * Factor + 63) / 64; j < 64; j++)
			{
				util2::store8(pk, pk_ptr, mat[i][j]);
				pk_ptr += 8;
			}
		}

		return 0;
	}



	/*static int pk_gen(std::vector<byte> &pk, const std::vector<byte> &sk, size_t Dimension, size_t Factor)
	{
		const size_t CNDLEN = (Dimension * Factor) - 8;
		const size_t IRRLEN = Dimension * 8;
		size_t pk_ptr = 0;
		int i, j, k;
		int row, c, tail;
		std::vector<std::vector<ulong>> mat(Dimension * Factor, std::vector<ulong>(64));
		ulong mask;
		ulong u;

		std::vector<std::vector<ulong>> points =
		{
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0X0000000000000000,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			},
			{
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFFFFFFFFFF,
				0XFFFFFFFF00000000,
				0XFFFF0000FFFF0000,
				0XFF00FF00FF00FF00,
				0XF0F0F0F0F0F0F0F0,
				0XCCCCCCCCCCCCCCCC,
				0XAAAAAAAAAAAAAAAA,
			}
		};

		std::vector<ulong> sk_int(Dimension);
		std::vector<std::vector<ulong>> eval(64, std::vector<ulong>(Dimension));
		std::vector<std::vector<ulong>> inv(64, std::vector<ulong>(Dimension));
		std::vector<ulong> tmp(Dimension);

		std::vector<ulong> cond(CNDLEN);

		// compute the inverses

		for (i = 0; i < Dimension; i++)
			sk_int[i] = util2::load8(sk, i * 8);

		fft3::fft(eval, sk_int, Dimension);
		GfVector::vec_copy(inv[0], eval[0], Dimension);

		for (i = 1; i < 64; i++)
			GfVector::vec_mul(inv[i], inv[i - 1], eval[i], Dimension);

		GfVector::vec_inv(tmp, inv[63], Dimension);

		for (i = 62; i >= 0; i--)
		{
			GfVector::vec_mul(inv[i + 1], tmp, inv[i], Dimension);
			GfVector::vec_mul(tmp, tmp, eval[i + 1], Dimension);
		}

		GfVector::vec_copy(inv[0], tmp, Dimension);

		// fill matrix

		for (j = 0; j < 64; j++)
		{
			for (k = 0; k < Dimension; k++)
				mat[k][j] = inv[j][k];
		}

		for (i = 1; i < Factor; i++)
		{
			for (j = 0; j < 64; j++)
			{
				GfVector::vec_mul(inv[j], inv[j], points[j], Dimension);

				for (k = 0; k < Dimension; k++)
					mat[i * Dimension + k][j] = inv[j][k];
			}
		}

		// permute

		for (i = 0; i < CNDLEN; i++)
			cond[i] = util2::load8(sk, IRRLEN + i * 8);

		for (i = 0; i < Dimension * Factor; i++)
			Benes2::benes_compact(mat[i], cond, 0);

		// gaussian elimination

		for (i = 0; i < (Dimension * Factor + 63) / 64; i++)
		{
			for (j = 0; j < 64; j++)
			{
				row = i * 64 + j;

				if (row >= Dimension * Factor)
					break;

				for (k = row + 1; k < Dimension * Factor; k++)
				{
					mask = mat[row][i] ^ mat[k][i];
					mask >>= j;
					mask &= 1;
					mask = ~mask + 1;

					for (c = 0; c < 64; c++)
						mat[row][c] ^= mat[k][c] & mask;
				}

				if (((mat[row][i] >> j) & 1) == 0)
				{ // return if not invertible
					return -1;
				}

				for (k = 0; k < Dimension * Factor; k++)
				{
					if (k != row) 
					{
						mask = mat[k][i] >> j;
						mask &= 1;
						mask = ~mask + 1;

						for (c = 0; c < 64; c++)
							mat[k][c] ^= mat[row][c] & mask;
					}
				}
			}
		}

		// store pk
		tail = ((Dimension * Factor) & 63) >> 3;

		for (i = 0; i < Dimension * Factor; i++)
		{
			u = mat[i][(Dimension * Factor + 63) / 64 - 1];

			for (k = tail; k < 8; k++)
				pk[pk_ptr + (k - tail)] = (u >> (8 * k)) & 0xFF;

			pk_ptr += 8 - tail;

			for (j = (Dimension * Factor + 63) / 64; j < 64; j++)
			{
				util2::store8(pk, pk_ptr, mat[i][j]);
				pk_ptr += 8;
			}
		}

		return 0;
	}*/
};

NAMESPACE_MCELIECEEND
#endif